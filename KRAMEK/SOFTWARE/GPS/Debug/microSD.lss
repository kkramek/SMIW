
microSD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00004b34  00004bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000469  0080026a  0080026a  00004d32  2**0
                  ALLOC
  3 .debug_aranges 00000290  00000000  00000000  00004d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000394  00000000  00000000  00004fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b4a  00000000  00000000  00005356  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000908  00000000  00000000  00007ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002633  00000000  00000000  000087a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000480  00000000  00000000  0000addc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008fa  00000000  00000000  0000b25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000031f2  00000000  00000000  0000bb56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000448  00000000  00000000  0000ed48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
 
 Return Value: uint8_t
  - TWDR: recieved value at TWI/I2C-Interface, 0 at timeout
  - 0:    Error at read
 **********************************************/
uint8_t i2c_readAck(void){
       0:	0c 94 a1 01 	jmp	0x342	; 0x342 <__ctors_end>
    }
    
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
       4:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
       8:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
       c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      10:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      14:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      18:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      1c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      20:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      24:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      28:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      2c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      30:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      34:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      38:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      3c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      40:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      44:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      48:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      4c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      50:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      54:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      58:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      5c:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      60:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>
      64:	0c 94 be 01 	jmp	0x37c	; 0x37c <__bad_interrupt>

00000068 <ssd1306oled_font>:
	...
      70:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
      80:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
      90:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
      a0:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
      b0:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
      c0:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
      d0:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
      e0:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
      f0:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     100:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     110:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     120:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     130:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     140:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     150:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     160:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     170:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     180:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     190:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     1a0:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     1b0:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     1c0:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     1d0:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     1e0:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     1f0:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     200:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     210:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     220:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     230:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     240:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     250:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     260:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     270:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     280:	a0 a0 a0 7c 00 44 64 54 4c 44 00 00 08 77 41 00     ...|.DdTLD...wA.
     290:	00 00 00 63 00 00 00 00 41 77 08 00 00 08 04 08     ...c....Aw......
     2a0:	08 04 00 3a 40 40 20 7a 00 3d 40 40 40 3d 00 21     ...:@@ z.=@@@=.!
     2b0:	54 54 54 79 00 7d 12 11 12 7d 00 39 44 44 44 39     TTTy.}...}.9DDD9
     2c0:	00 3d 42 42 42 3d 00 02 05 02 00 00 00 7e 01 49     .=BBB=.......~.I
     2d0:	55 73 00 7c 10 10 08 1c                             Us.|....

000002d8 <special_char>:
     2d8:	bc 5f 9c 60 a4 61 84 62 b6 63 96 64 b0 65 9f 66     ._.`.a.b.c.d.e.f
     2e8:	b5 67 ff ff                                         .g..

000002ec <init_sequence>:
     2ec:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
     2fc:	00 d5 f0 d9 22 da 12 db 20 8d 14                    ...."... ..

00000307 <pstr_inf>:
     307:	49 4e 46                                            INF

0000030a <pstr_inity>:
     30a:	49 4e 49 54 59                                      INITY

0000030f <pstr_nan>:
     30f:	4e 41 4e                                            NAN

00000312 <pwr_m10>:
     312:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     322:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000032a <pwr_p10>:
     32a:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     33a:	ca 1b 0e 5a ae c5 9d 74                             ...Z...t

00000342 <__ctors_end>:
     342:	11 24       	eor	r1, r1
     344:	1f be       	out	0x3f, r1	; 63
     346:	cf ef       	ldi	r28, 0xFF	; 255
     348:	d8 e0       	ldi	r29, 0x08	; 8
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	cd bf       	out	0x3d, r28	; 61

0000034e <__do_copy_data>:
     34e:	12 e0       	ldi	r17, 0x02	; 2
     350:	a0 e0       	ldi	r26, 0x00	; 0
     352:	b1 e0       	ldi	r27, 0x01	; 1
     354:	e4 e3       	ldi	r30, 0x34	; 52
     356:	fb e4       	ldi	r31, 0x4B	; 75
     358:	02 c0       	rjmp	.+4      	; 0x35e <.do_copy_data_start>

0000035a <.do_copy_data_loop>:
     35a:	05 90       	lpm	r0, Z+
     35c:	0d 92       	st	X+, r0

0000035e <.do_copy_data_start>:
     35e:	aa 36       	cpi	r26, 0x6A	; 106
     360:	b1 07       	cpc	r27, r17
     362:	d9 f7       	brne	.-10     	; 0x35a <.do_copy_data_loop>

00000364 <__do_clear_bss>:
     364:	16 e0       	ldi	r17, 0x06	; 6
     366:	aa e6       	ldi	r26, 0x6A	; 106
     368:	b2 e0       	ldi	r27, 0x02	; 2
     36a:	01 c0       	rjmp	.+2      	; 0x36e <.do_clear_bss_start>

0000036c <.do_clear_bss_loop>:
     36c:	1d 92       	st	X+, r1

0000036e <.do_clear_bss_start>:
     36e:	a3 3d       	cpi	r26, 0xD3	; 211
     370:	b1 07       	cpc	r27, r17
     372:	e1 f7       	brne	.-8      	; 0x36c <.do_clear_bss_loop>
     374:	0e 94 c8 19 	call	0x3390	; 0x3390 <main>
     378:	0c 94 98 25 	jmp	0x4b30	; 0x4b30 <_exit>

0000037c <__bad_interrupt>:
     37c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000380 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
     380:	fc 01       	movw	r30, r24
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     382:	31 81       	ldd	r19, Z+1	; 0x01
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	80 81       	ld	r24, Z
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	28 2b       	or	r18, r24
     38c:	39 2b       	or	r19, r25
	return rv;
}
     38e:	82 2f       	mov	r24, r18
     390:	93 2f       	mov	r25, r19
     392:	08 95       	ret

00000394 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
     394:	fc 01       	movw	r30, r24
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
     396:	23 81       	ldd	r18, Z+3	; 0x03
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	40 e0       	ldi	r20, 0x00	; 0
     39c:	50 e0       	ldi	r21, 0x00	; 0
     39e:	54 2f       	mov	r21, r20
     3a0:	43 2f       	mov	r20, r19
     3a2:	32 2f       	mov	r19, r18
     3a4:	22 27       	eor	r18, r18
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	a0 e0       	ldi	r26, 0x00	; 0
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	28 2b       	or	r18, r24
     3b0:	39 2b       	or	r19, r25
     3b2:	4a 2b       	or	r20, r26
     3b4:	5b 2b       	or	r21, r27
	rv = rv << 8 | ptr[1];
     3b6:	54 2f       	mov	r21, r20
     3b8:	43 2f       	mov	r20, r19
     3ba:	32 2f       	mov	r19, r18
     3bc:	22 27       	eor	r18, r18
     3be:	81 81       	ldd	r24, Z+1	; 0x01
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	28 2b       	or	r18, r24
     3c8:	39 2b       	or	r19, r25
     3ca:	4a 2b       	or	r20, r26
     3cc:	5b 2b       	or	r21, r27
	rv = rv << 8 | ptr[0];
     3ce:	54 2f       	mov	r21, r20
     3d0:	43 2f       	mov	r20, r19
     3d2:	32 2f       	mov	r19, r18
     3d4:	22 27       	eor	r18, r18
     3d6:	80 81       	ld	r24, Z
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	a0 e0       	ldi	r26, 0x00	; 0
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	28 2b       	or	r18, r24
     3e0:	39 2b       	or	r19, r25
     3e2:	4a 2b       	or	r20, r26
     3e4:	5b 2b       	or	r21, r27
	return rv;
}
     3e6:	62 2f       	mov	r22, r18
     3e8:	73 2f       	mov	r23, r19
     3ea:	84 2f       	mov	r24, r20
     3ec:	95 2f       	mov	r25, r21
     3ee:	08 95       	ret

000003f0 <st_word>:
}
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
     3f0:	fc 01       	movw	r30, r24
	*ptr++ = (BYTE)val; val >>= 8;
     3f2:	60 83       	st	Z, r22
	*ptr++ = (BYTE)val;
     3f4:	71 83       	std	Z+1, r23	; 0x01
}
     3f6:	08 95       	ret

000003f8 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     3f8:	fc 01       	movw	r30, r24
     3fa:	41 93       	st	Z+, r20
     3fc:	bb 27       	eor	r27, r27
     3fe:	a7 2f       	mov	r26, r23
     400:	96 2f       	mov	r25, r22
     402:	85 2f       	mov	r24, r21
	*ptr++ = (BYTE)val; val >>= 8;
     404:	81 93       	st	Z+, r24
     406:	cb 01       	movw	r24, r22
     408:	aa 27       	eor	r26, r26
     40a:	bb 27       	eor	r27, r27
	*ptr++ = (BYTE)val; val >>= 8;
     40c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
     40e:	47 2f       	mov	r20, r23
     410:	55 27       	eor	r21, r21
     412:	66 27       	eor	r22, r22
     414:	77 27       	eor	r23, r23
     416:	41 83       	std	Z+1, r20	; 0x01
}
     418:	08 95       	ret

0000041a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static void mem_cpy (void* dst, const void* src, UINT cnt)
{
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	ec 01       	movw	r28, r24
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt != 0) {
     420:	41 15       	cp	r20, r1
     422:	51 05       	cpc	r21, r1
     424:	79 f0       	breq	.+30     	; 0x444 <mem_cpy+0x2a>
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	30 e0       	ldi	r19, 0x00	; 0
		do {
			*d++ = *s++;
     42a:	fe 01       	movw	r30, r28
     42c:	e2 0f       	add	r30, r18
     42e:	f3 1f       	adc	r31, r19
     430:	db 01       	movw	r26, r22
     432:	a2 0f       	add	r26, r18
     434:	b3 1f       	adc	r27, r19
     436:	8c 91       	ld	r24, X
     438:	80 83       	st	Z, r24
     43a:	2f 5f       	subi	r18, 0xFF	; 255
     43c:	3f 4f       	sbci	r19, 0xFF	; 255
		} while (--cnt);
     43e:	42 17       	cp	r20, r18
     440:	53 07       	cpc	r21, r19
     442:	99 f7       	brne	.-26     	; 0x42a <mem_cpy+0x10>
	}
}
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	08 95       	ret

0000044a <mem_set>:


/* Fill memory block */
static void mem_set (void* dst, int val, UINT cnt)
{
	BYTE *d = (BYTE*)dst;
     44a:	fc 01       	movw	r30, r24

	do {
		*d++ = (BYTE)val;
     44c:	61 93       	st	Z+, r22
	} while (--cnt);
     44e:	41 50       	subi	r20, 0x01	; 1
     450:	50 40       	sbci	r21, 0x00	; 0
     452:	e1 f7       	brne	.-8      	; 0x44c <mem_set+0x2>
}
     454:	08 95       	ret

00000456 <mem_cmp>:


/* Compare memory block */
static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
{
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	ec 01       	movw	r28, r24
     45c:	a0 e0       	ldi	r26, 0x00	; 0
     45e:	b0 e0       	ldi	r27, 0x00	; 0
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
     460:	fe 01       	movw	r30, r28
     462:	ea 0f       	add	r30, r26
     464:	fb 1f       	adc	r31, r27
     466:	80 81       	ld	r24, Z
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	fb 01       	movw	r30, r22
     46c:	ea 0f       	add	r30, r26
     46e:	fb 1f       	adc	r31, r27
     470:	20 81       	ld	r18, Z
     472:	fc 01       	movw	r30, r24
     474:	e2 1b       	sub	r30, r18
     476:	f1 09       	sbc	r31, r1
     478:	9f 01       	movw	r18, r30
	} while (--cnt && r == 0);
     47a:	41 50       	subi	r20, 0x01	; 1
     47c:	50 40       	sbci	r21, 0x00	; 0
     47e:	19 f0       	breq	.+6      	; 0x486 <mem_cmp+0x30>
     480:	11 96       	adiw	r26, 0x01	; 1
     482:	30 97       	sbiw	r30, 0x00	; 0
     484:	69 f3       	breq	.-38     	; 0x460 <mem_cmp+0xa>

	return r;
}
     486:	82 2f       	mov	r24, r18
     488:	93 2f       	mov	r25, r19
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <clst2sect>:

static DWORD clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
     490:	ef 92       	push	r14
     492:	ff 92       	push	r15
     494:	0f 93       	push	r16
     496:	1f 93       	push	r17
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	ec 01       	movw	r28, r24
	clst -= 2;		/* Cluster number is origin from 2 */
     49e:	0f 2e       	mov	r0, r31
     4a0:	fe ef       	ldi	r31, 0xFE	; 254
     4a2:	ef 2e       	mov	r14, r31
     4a4:	ff ef       	ldi	r31, 0xFF	; 255
     4a6:	ff 2e       	mov	r15, r31
     4a8:	ff ef       	ldi	r31, 0xFF	; 255
     4aa:	0f 2f       	mov	r16, r31
     4ac:	ff ef       	ldi	r31, 0xFF	; 255
     4ae:	1f 2f       	mov	r17, r31
     4b0:	f0 2d       	mov	r31, r0
     4b2:	e4 0e       	add	r14, r20
     4b4:	f5 1e       	adc	r15, r21
     4b6:	06 1f       	adc	r16, r22
     4b8:	17 1f       	adc	r17, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
     4ba:	8b 89       	ldd	r24, Y+19	; 0x13
     4bc:	9c 89       	ldd	r25, Y+20	; 0x14
     4be:	ad 89       	ldd	r26, Y+21	; 0x15
     4c0:	be 89       	ldd	r27, Y+22	; 0x16
     4c2:	02 97       	sbiw	r24, 0x02	; 2
     4c4:	a1 09       	sbc	r26, r1
     4c6:	b1 09       	sbc	r27, r1
     4c8:	e8 16       	cp	r14, r24
     4ca:	f9 06       	cpc	r15, r25
     4cc:	0a 07       	cpc	r16, r26
     4ce:	1b 07       	cpc	r17, r27
     4d0:	28 f0       	brcs	.+10     	; 0x4dc <clst2sect+0x4c>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	10 c0       	rjmp	.+32     	; 0x4fc <clst2sect+0x6c>
	return fs->database + fs->csize * clst;		/* Start sector number of the cluster */
     4dc:	29 85       	ldd	r18, Y+9	; 0x09
     4de:	3a 85       	ldd	r19, Y+10	; 0x0a
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	c8 01       	movw	r24, r16
     4e6:	b7 01       	movw	r22, r14
     4e8:	0e 94 b8 20 	call	0x4170	; 0x4170 <__mulsi3>
     4ec:	2f a1       	ldd	r18, Y+39	; 0x27
     4ee:	38 a5       	ldd	r19, Y+40	; 0x28
     4f0:	49 a5       	ldd	r20, Y+41	; 0x29
     4f2:	5a a5       	ldd	r21, Y+42	; 0x2a
     4f4:	26 0f       	add	r18, r22
     4f6:	37 1f       	adc	r19, r23
     4f8:	48 1f       	adc	r20, r24
     4fa:	59 1f       	adc	r21, r25
}
     4fc:	62 2f       	mov	r22, r18
     4fe:	73 2f       	mov	r23, r19
     500:	84 2f       	mov	r24, r20
     502:	95 2f       	mov	r25, r21
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	1f 91       	pop	r17
     50a:	0f 91       	pop	r16
     50c:	ff 90       	pop	r15
     50e:	ef 90       	pop	r14
     510:	08 95       	ret

00000512 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
     512:	cf 92       	push	r12
     514:	df 92       	push	r13
     516:	ef 92       	push	r14
     518:	ff 92       	push	r15
     51a:	0f 93       	push	r16
     51c:	1f 93       	push	r17
     51e:	cf 93       	push	r28
     520:	df 93       	push	r29
     522:	8c 01       	movw	r16, r24
     524:	eb 01       	movw	r28, r22
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
     526:	cb 01       	movw	r24, r22
     528:	4a 96       	adiw	r24, 0x1a	; 26
     52a:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
     52e:	6c 01       	movw	r12, r24
     530:	ee 24       	eor	r14, r14
     532:	ff 24       	eor	r15, r15
	if (fs->fs_type == FS_FAT32) {
     534:	f8 01       	movw	r30, r16
     536:	80 81       	ld	r24, Z
     538:	83 30       	cpi	r24, 0x03	; 3
     53a:	69 f4       	brne	.+26     	; 0x556 <ld_clust+0x44>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
     53c:	ce 01       	movw	r24, r28
     53e:	44 96       	adiw	r24, 0x14	; 20
     540:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
     544:	a0 e0       	ldi	r26, 0x00	; 0
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	dc 01       	movw	r26, r24
     54a:	99 27       	eor	r25, r25
     54c:	88 27       	eor	r24, r24
     54e:	c8 2a       	or	r12, r24
     550:	d9 2a       	or	r13, r25
     552:	ea 2a       	or	r14, r26
     554:	fb 2a       	or	r15, r27
	}

	return cl;
}
     556:	6c 2d       	mov	r22, r12
     558:	7d 2d       	mov	r23, r13
     55a:	8e 2d       	mov	r24, r14
     55c:	9f 2d       	mov	r25, r15
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	0f 91       	pop	r16
     566:	ff 90       	pop	r15
     568:	ef 90       	pop	r14
     56a:	df 90       	pop	r13
     56c:	cf 90       	pop	r12
     56e:	08 95       	ret

00000570 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
     570:	cf 92       	push	r12
     572:	df 92       	push	r13
     574:	ef 92       	push	r14
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	8c 01       	movw	r16, r24
     582:	eb 01       	movw	r28, r22
     584:	69 01       	movw	r12, r18
     586:	7a 01       	movw	r14, r20
	st_word(dir + DIR_FstClusLO, (WORD)cl);
     588:	cb 01       	movw	r24, r22
     58a:	4a 96       	adiw	r24, 0x1a	; 26
     58c:	b9 01       	movw	r22, r18
     58e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <st_word>
	if (fs->fs_type == FS_FAT32) {
     592:	f8 01       	movw	r30, r16
     594:	80 81       	ld	r24, Z
     596:	83 30       	cpi	r24, 0x03	; 3
     598:	41 f4       	brne	.+16     	; 0x5aa <st_clust+0x3a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
     59a:	97 01       	movw	r18, r14
     59c:	44 27       	eor	r20, r20
     59e:	55 27       	eor	r21, r21
     5a0:	ce 01       	movw	r24, r28
     5a2:	44 96       	adiw	r24, 0x14	; 20
     5a4:	b9 01       	movw	r22, r18
     5a6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <st_word>
	}
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	df 90       	pop	r13
     5b8:	cf 90       	pop	r12
     5ba:	08 95       	ret

000005bc <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
     5bc:	cf 93       	push	r28
     5be:	df 93       	push	r29
     5c0:	ac 01       	movw	r20, r24
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *sp;
	char c;
#endif

	tt = tp = *path;
     5c2:	fc 01       	movw	r30, r24
     5c4:	a0 81       	ld	r26, Z
     5c6:	b1 81       	ldd	r27, Z+1	; 0x01
	if (!tp) return vol;	/* Invalid path name? */
     5c8:	10 97       	sbiw	r26, 0x00	; 0
     5ca:	d1 f1       	breq	.+116    	; 0x640 <get_ldnumber+0x84>
     5cc:	fd 01       	movw	r30, r26
	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the path */
     5ce:	81 91       	ld	r24, Z+
     5d0:	81 32       	cpi	r24, 0x21	; 33
     5d2:	18 f0       	brcs	.+6      	; 0x5da <get_ldnumber+0x1e>
     5d4:	8a 33       	cpi	r24, 0x3A	; 58
     5d6:	d9 f7       	brne	.-10     	; 0x5ce <get_ldnumber+0x12>
     5d8:	05 c0       	rjmp	.+10     	; 0x5e4 <get_ldnumber+0x28>

	if (tc == ':') {	/* DOS/Windows style volume ID? */
     5da:	8a 33       	cpi	r24, 0x3A	; 58
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <get_ldnumber+0x28>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	30 c0       	rjmp	.+96     	; 0x644 <get_ldnumber+0x88>
		i = FF_VOLUMES;
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
     5e4:	2c 91       	ld	r18, X
     5e6:	82 2f       	mov	r24, r18
     5e8:	80 53       	subi	r24, 0x30	; 48
     5ea:	8a 30       	cpi	r24, 0x0A	; 10
     5ec:	60 f4       	brcc	.+24     	; 0x606 <get_ldnumber+0x4a>
     5ee:	cd 01       	movw	r24, r26
     5f0:	02 96       	adiw	r24, 0x02	; 2
     5f2:	e8 17       	cp	r30, r24
     5f4:	f9 07       	cpc	r31, r25
     5f6:	39 f4       	brne	.+14     	; 0x606 <get_ldnumber+0x4a>
			i = (int)*tp - '0';	/* Get the LD number */
     5f8:	82 2f       	mov	r24, r18
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	c0 97       	sbiw	r24, 0x30	; 48
					if (IsLower(tc)) tc -= 0x20;
				} while (c && (TCHAR)c == tc);
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
     5fe:	18 16       	cp	r1, r24
     600:	19 06       	cpc	r1, r25
     602:	cc f4       	brge	.+50     	; 0x636 <get_ldnumber+0x7a>
     604:	1d c0       	rjmp	.+58     	; 0x640 <get_ldnumber+0x84>
		}
#if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
		else {
			i = 0;
			do {
				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
     606:	c0 e0       	ldi	r28, 0x00	; 0
     608:	d1 e0       	ldi	r29, 0x01	; 1
				do {	/* Compare the volume ID with path name */
					c = *sp++; tc = *tp++;
     60a:	99 91       	ld	r25, Y+
     60c:	2d 91       	ld	r18, X+
					if (IsLower(c)) c -= 0x20;
     60e:	89 2f       	mov	r24, r25
     610:	81 56       	subi	r24, 0x61	; 97
     612:	8a 31       	cpi	r24, 0x1A	; 26
     614:	08 f4       	brcc	.+2      	; 0x618 <get_ldnumber+0x5c>
     616:	90 52       	subi	r25, 0x20	; 32
					if (IsLower(tc)) tc -= 0x20;
     618:	82 2f       	mov	r24, r18
     61a:	81 56       	subi	r24, 0x61	; 97
     61c:	8a 31       	cpi	r24, 0x1A	; 26
     61e:	08 f4       	brcc	.+2      	; 0x622 <get_ldnumber+0x66>
     620:	20 52       	subi	r18, 0x20	; 32
				} while (c && (TCHAR)c == tc);
     622:	99 23       	and	r25, r25
     624:	19 f0       	breq	.+6      	; 0x62c <get_ldnumber+0x70>
     626:	92 17       	cp	r25, r18
     628:	81 f3       	breq	.-32     	; 0x60a <get_ldnumber+0x4e>
     62a:	0a c0       	rjmp	.+20     	; 0x640 <get_ldnumber+0x84>
			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
     62c:	ae 17       	cp	r26, r30
     62e:	bf 07       	cpc	r27, r31
     630:	39 f4       	brne	.+14     	; 0x640 <get_ldnumber+0x84>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
		}
#endif
		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
			vol = i;		/* Drive number */
			*path = tt;		/* Snip the drive prefix off */
     636:	da 01       	movw	r26, r20
     638:	ed 93       	st	X+, r30
     63a:	fc 93       	st	X, r31
     63c:	9c 01       	movw	r18, r24
     63e:	02 c0       	rjmp	.+4      	; 0x644 <get_ldnumber+0x88>
     640:	2f ef       	ldi	r18, 0xFF	; 255
     642:	3f ef       	ldi	r19, 0xFF	; 255
	vol = CurrVol;	/* Default drive is current drive */
#else
	vol = 0;		/* Default drive is 0 */
#endif
	return vol;		/* Return the default drive */
}
     644:	82 2f       	mov	r24, r18
     646:	93 2f       	mov	r25, r19
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ec 01       	movw	r28, r24
     658:	8b 01       	movw	r16, r22
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
     65a:	00 97       	sbiw	r24, 0x00	; 0
     65c:	99 f0       	breq	.+38     	; 0x684 <validate+0x36>
     65e:	e8 81       	ld	r30, Y
     660:	f9 81       	ldd	r31, Y+1	; 0x01
     662:	30 97       	sbiw	r30, 0x00	; 0
     664:	79 f0       	breq	.+30     	; 0x684 <validate+0x36>
     666:	80 81       	ld	r24, Z
     668:	88 23       	and	r24, r24
     66a:	61 f0       	breq	.+24     	; 0x684 <validate+0x36>
     66c:	2a 81       	ldd	r18, Y+2	; 0x02
     66e:	3b 81       	ldd	r19, Y+3	; 0x03
     670:	85 81       	ldd	r24, Z+5	; 0x05
     672:	96 81       	ldd	r25, Z+6	; 0x06
     674:	28 17       	cp	r18, r24
     676:	39 07       	cpc	r19, r25
     678:	29 f4       	brne	.+10     	; 0x684 <validate+0x36>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
     67a:	81 81       	ldd	r24, Z+1	; 0x01
     67c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <disk_status>
     680:	80 ff       	sbrs	r24, 0
     682:	0c c0       	rjmp	.+24     	; 0x69c <validate+0x4e>
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	29 e0       	ldi	r18, 0x09	; 9
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     68a:	f8 01       	movw	r30, r16
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	80 83       	st	Z, r24
	return res;
}
     690:	82 2f       	mov	r24, r18
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	08 95       	ret
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
     69c:	88 81       	ld	r24, Y
     69e:	99 81       	ldd	r25, Y+1	; 0x01
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	f3 cf       	rjmp	.-26     	; 0x68a <validate+0x3c>

000006a4 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
     6a4:	8f 92       	push	r8
     6a6:	9f 92       	push	r9
     6a8:	af 92       	push	r10
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	ec 01       	movw	r28, r24
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Is the disk access window dirty */
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	88 23       	and	r24, r24
     6c2:	e1 f1       	breq	.+120    	; 0x73c <sync_window+0x98>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write back the window */
     6c4:	0f 2e       	mov	r0, r31
     6c6:	ff e2       	ldi	r31, 0x2F	; 47
     6c8:	cf 2e       	mov	r12, r31
     6ca:	dd 24       	eor	r13, r13
     6cc:	f0 2d       	mov	r31, r0
     6ce:	cc 0e       	add	r12, r28
     6d0:	dd 1e       	adc	r13, r29
     6d2:	2b a5       	ldd	r18, Y+43	; 0x2b
     6d4:	3c a5       	ldd	r19, Y+44	; 0x2c
     6d6:	4d a5       	ldd	r20, Y+45	; 0x2d
     6d8:	5e a5       	ldd	r21, Y+46	; 0x2e
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	b6 01       	movw	r22, r12
     6de:	01 e0       	ldi	r16, 0x01	; 1
     6e0:	10 e0       	ldi	r17, 0x00	; 0
     6e2:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
     6e6:	88 23       	and	r24, r24
     6e8:	11 f0       	breq	.+4      	; 0x6ee <sync_window+0x4a>
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	28 c0       	rjmp	.+80     	; 0x73e <sync_window+0x9a>
			fs->wflag = 0;	/* Clear window dirty flag */
     6ee:	1b 82       	std	Y+3, r1	; 0x03
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
     6f0:	eb a4       	ldd	r14, Y+43	; 0x2b
     6f2:	fc a4       	ldd	r15, Y+44	; 0x2c
     6f4:	0d a5       	ldd	r16, Y+45	; 0x2d
     6f6:	1e a5       	ldd	r17, Y+46	; 0x2e
     6f8:	2f 89       	ldd	r18, Y+23	; 0x17
     6fa:	38 8d       	ldd	r19, Y+24	; 0x18
     6fc:	49 8d       	ldd	r20, Y+25	; 0x19
     6fe:	5a 8d       	ldd	r21, Y+26	; 0x1a
     700:	8f 8d       	ldd	r24, Y+31	; 0x1f
     702:	98 a1       	ldd	r25, Y+32	; 0x20
     704:	a9 a1       	ldd	r26, Y+33	; 0x21
     706:	ba a1       	ldd	r27, Y+34	; 0x22
     708:	47 01       	movw	r8, r14
     70a:	58 01       	movw	r10, r16
     70c:	88 1a       	sub	r8, r24
     70e:	99 0a       	sbc	r9, r25
     710:	aa 0a       	sbc	r10, r26
     712:	bb 0a       	sbc	r11, r27
     714:	82 16       	cp	r8, r18
     716:	93 06       	cpc	r9, r19
     718:	a4 06       	cpc	r10, r20
     71a:	b5 06       	cpc	r11, r21
     71c:	78 f4       	brcc	.+30     	; 0x73c <sync_window+0x98>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	82 30       	cpi	r24, 0x02	; 2
     722:	61 f4       	brne	.+24     	; 0x73c <sync_window+0x98>
     724:	2e 0d       	add	r18, r14
     726:	3f 1d       	adc	r19, r15
     728:	40 1f       	adc	r20, r16
     72a:	51 1f       	adc	r21, r17
     72c:	89 81       	ldd	r24, Y+1	; 0x01
     72e:	b6 01       	movw	r22, r12
     730:	01 e0       	ldi	r16, 0x01	; 1
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	01 c0       	rjmp	.+2      	; 0x73e <sync_window+0x9a>
     73c:	80 e0       	ldi	r24, 0x00	; 0
		} else {
			res = FR_DISK_ERR;
		}
	}
	return res;
}
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	bf 90       	pop	r11
     750:	af 90       	pop	r10
     752:	9f 90       	pop	r9
     754:	8f 90       	pop	r8
     756:	08 95       	ret

00000758 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,			/* Filesystem object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
     76c:	6a 01       	movw	r12, r20
     76e:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
     770:	8b a5       	ldd	r24, Y+43	; 0x2b
     772:	9c a5       	ldd	r25, Y+44	; 0x2c
     774:	ad a5       	ldd	r26, Y+45	; 0x2d
     776:	be a5       	ldd	r27, Y+46	; 0x2e
     778:	84 17       	cp	r24, r20
     77a:	95 07       	cpc	r25, r21
     77c:	a6 07       	cpc	r26, r22
     77e:	b7 07       	cpc	r27, r23
     780:	11 f4       	brne	.+4      	; 0x786 <move_window+0x2e>
     782:	bb 24       	eor	r11, r11
     784:	1c c0       	rjmp	.+56     	; 0x7be <move_window+0x66>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
     786:	ce 01       	movw	r24, r28
     788:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sync_window>
     78c:	b8 2e       	mov	r11, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     78e:	88 23       	and	r24, r24
     790:	b1 f4       	brne	.+44     	; 0x7be <move_window+0x66>
			if (disk_read(fs->pdrv, fs->win, sector, 1) != RES_OK) {
     792:	be 01       	movw	r22, r28
     794:	61 5d       	subi	r22, 0xD1	; 209
     796:	7f 4f       	sbci	r23, 0xFF	; 255
     798:	89 81       	ldd	r24, Y+1	; 0x01
     79a:	a7 01       	movw	r20, r14
     79c:	96 01       	movw	r18, r12
     79e:	01 e0       	ldi	r16, 0x01	; 1
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <disk_read>
     7a6:	88 23       	and	r24, r24
     7a8:	31 f0       	breq	.+12     	; 0x7b6 <move_window+0x5e>
     7aa:	cc 24       	eor	r12, r12
     7ac:	ca 94       	dec	r12
     7ae:	dc 2c       	mov	r13, r12
     7b0:	76 01       	movw	r14, r12
     7b2:	bb 24       	eor	r11, r11
     7b4:	b3 94       	inc	r11
				sector = 0xFFFFFFFF;	/* Invalidate window if read data is not valid */
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
     7b6:	cb a6       	std	Y+43, r12	; 0x2b
     7b8:	dc a6       	std	Y+44, r13	; 0x2c
     7ba:	ed a6       	std	Y+45, r14	; 0x2d
     7bc:	fe a6       	std	Y+46, r15	; 0x2e
		}
	}
	return res;
}
     7be:	8b 2d       	mov	r24, r11
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	bf 90       	pop	r11
     7d2:	08 95       	ret

000007d4 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	fc 01       	movw	r30, r24
     7e8:	7a 01       	movw	r14, r20
     7ea:	8b 01       	movw	r16, r22
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
     7ec:	c0 81       	ld	r28, Z
     7ee:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
     7f0:	42 30       	cpi	r20, 0x02	; 2
     7f2:	51 05       	cpc	r21, r1
     7f4:	61 05       	cpc	r22, r1
     7f6:	71 05       	cpc	r23, r1
     7f8:	08 f4       	brcc	.+2      	; 0x7fc <get_fat+0x28>
     7fa:	ba c0       	rjmp	.+372    	; 0x970 <__stack+0x71>
     7fc:	8b 89       	ldd	r24, Y+19	; 0x13
     7fe:	9c 89       	ldd	r25, Y+20	; 0x14
     800:	ad 89       	ldd	r26, Y+21	; 0x15
     802:	be 89       	ldd	r27, Y+22	; 0x16
     804:	48 17       	cp	r20, r24
     806:	59 07       	cpc	r21, r25
     808:	6a 07       	cpc	r22, r26
     80a:	7b 07       	cpc	r23, r27
     80c:	08 f0       	brcs	.+2      	; 0x810 <get_fat+0x3c>
     80e:	b0 c0       	rjmp	.+352    	; 0x970 <__stack+0x71>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
     810:	88 81       	ld	r24, Y
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	09 f4       	brne	.+2      	; 0x818 <get_fat+0x44>
     816:	61 c0       	rjmp	.+194    	; 0x8da <get_fat+0x106>
     818:	83 30       	cpi	r24, 0x03	; 3
     81a:	09 f4       	brne	.+2      	; 0x81e <get_fat+0x4a>
     81c:	80 c0       	rjmp	.+256    	; 0x91e <__stack+0x1f>
     81e:	81 30       	cpi	r24, 0x01	; 1
     820:	09 f0       	breq	.+2      	; 0x824 <get_fat+0x50>
     822:	a6 c0       	rjmp	.+332    	; 0x970 <__stack+0x71>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
     824:	ca 01       	movw	r24, r20
     826:	96 95       	lsr	r25
     828:	87 95       	ror	r24
     82a:	6c 01       	movw	r12, r24
     82c:	c4 0e       	add	r12, r20
     82e:	d5 1e       	adc	r13, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     830:	a6 01       	movw	r20, r12
     832:	45 2f       	mov	r20, r21
     834:	55 27       	eor	r21, r21
     836:	46 95       	lsr	r20
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     83e:	98 a1       	ldd	r25, Y+32	; 0x20
     840:	a9 a1       	ldd	r26, Y+33	; 0x21
     842:	ba a1       	ldd	r27, Y+34	; 0x22
     844:	48 0f       	add	r20, r24
     846:	59 1f       	adc	r21, r25
     848:	6a 1f       	adc	r22, r26
     84a:	7b 1f       	adc	r23, r27
     84c:	ce 01       	movw	r24, r28
     84e:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     852:	88 23       	and	r24, r24
     854:	09 f0       	breq	.+2      	; 0x858 <get_fat+0x84>
     856:	91 c0       	rjmp	.+290    	; 0x97a <__stack+0x7b>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     858:	c6 01       	movw	r24, r12
     85a:	91 70       	andi	r25, 0x01	; 1
     85c:	fe 01       	movw	r30, r28
     85e:	e8 0f       	add	r30, r24
     860:	f9 1f       	adc	r31, r25
     862:	b7 a4       	ldd	r11, Z+47	; 0x2f
     864:	08 94       	sec
     866:	c1 1c       	adc	r12, r1
     868:	d1 1c       	adc	r13, r1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
     86a:	a6 01       	movw	r20, r12
     86c:	45 2f       	mov	r20, r21
     86e:	55 27       	eor	r21, r21
     870:	46 95       	lsr	r20
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	8f 8d       	ldd	r24, Y+31	; 0x1f
     878:	98 a1       	ldd	r25, Y+32	; 0x20
     87a:	a9 a1       	ldd	r26, Y+33	; 0x21
     87c:	ba a1       	ldd	r27, Y+34	; 0x22
     87e:	48 0f       	add	r20, r24
     880:	59 1f       	adc	r21, r25
     882:	6a 1f       	adc	r22, r26
     884:	7b 1f       	adc	r23, r27
     886:	ce 01       	movw	r24, r28
     888:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     88c:	88 23       	and	r24, r24
     88e:	09 f0       	breq	.+2      	; 0x892 <get_fat+0xbe>
     890:	74 c0       	rjmp	.+232    	; 0x97a <__stack+0x7b>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
     892:	2b 2d       	mov	r18, r11
     894:	30 e0       	ldi	r19, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
     896:	c6 01       	movw	r24, r12
     898:	91 70       	andi	r25, 0x01	; 1
     89a:	fe 01       	movw	r30, r28
     89c:	e8 0f       	add	r30, r24
     89e:	f9 1f       	adc	r31, r25
     8a0:	97 a5       	ldd	r25, Z+47	; 0x2f
     8a2:	80 e0       	ldi	r24, 0x00	; 0
     8a4:	28 2b       	or	r18, r24
     8a6:	39 2b       	or	r19, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
     8a8:	c7 01       	movw	r24, r14
     8aa:	81 70       	andi	r24, 0x01	; 1
     8ac:	90 70       	andi	r25, 0x00	; 0
     8ae:	89 2b       	or	r24, r25
     8b0:	59 f0       	breq	.+22     	; 0x8c8 <get_fat+0xf4>
     8b2:	c9 01       	movw	r24, r18
     8b4:	92 95       	swap	r25
     8b6:	82 95       	swap	r24
     8b8:	8f 70       	andi	r24, 0x0F	; 15
     8ba:	89 27       	eor	r24, r25
     8bc:	9f 70       	andi	r25, 0x0F	; 15
     8be:	89 27       	eor	r24, r25
     8c0:	9c 01       	movw	r18, r24
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	50 e0       	ldi	r21, 0x00	; 0
     8c6:	5d c0       	rjmp	.+186    	; 0x982 <__stack+0x83>
     8c8:	c9 01       	movw	r24, r18
     8ca:	a0 e0       	ldi	r26, 0x00	; 0
     8cc:	b0 e0       	ldi	r27, 0x00	; 0
     8ce:	9c 01       	movw	r18, r24
     8d0:	ad 01       	movw	r20, r26
     8d2:	3f 70       	andi	r19, 0x0F	; 15
     8d4:	40 70       	andi	r20, 0x00	; 0
     8d6:	50 70       	andi	r21, 0x00	; 0
     8d8:	54 c0       	rjmp	.+168    	; 0x982 <__stack+0x83>
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
     8da:	45 2f       	mov	r20, r21
     8dc:	56 2f       	mov	r21, r22
     8de:	67 2f       	mov	r22, r23
     8e0:	77 27       	eor	r23, r23
     8e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8e4:	98 a1       	ldd	r25, Y+32	; 0x20
     8e6:	a9 a1       	ldd	r26, Y+33	; 0x21
     8e8:	ba a1       	ldd	r27, Y+34	; 0x22
     8ea:	48 0f       	add	r20, r24
     8ec:	59 1f       	adc	r21, r25
     8ee:	6a 1f       	adc	r22, r26
     8f0:	7b 1f       	adc	r23, r27
     8f2:	ce 01       	movw	r24, r28
     8f4:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     8f8:	88 23       	and	r24, r24
     8fa:	09 f0       	breq	.+2      	; 0x8fe <get_fat+0x12a>
     8fc:	3e c0       	rjmp	.+124    	; 0x97a <__stack+0x7b>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
     8fe:	d8 01       	movw	r26, r16
     900:	c7 01       	movw	r24, r14
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	aa 1f       	adc	r26, r26
     908:	bb 1f       	adc	r27, r27
     90a:	91 70       	andi	r25, 0x01	; 1
     90c:	8f 96       	adiw	r24, 0x2f	; 47
     90e:	8c 0f       	add	r24, r28
     910:	9d 1f       	adc	r25, r29
     912:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
     916:	9c 01       	movw	r18, r24
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	32 c0       	rjmp	.+100    	; 0x982 <__stack+0x83>
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
     91e:	68 94       	set
     920:	16 f8       	bld	r1, 6
     922:	76 95       	lsr	r23
     924:	67 95       	ror	r22
     926:	57 95       	ror	r21
     928:	47 95       	ror	r20
     92a:	16 94       	lsr	r1
     92c:	d1 f7       	brne	.-12     	; 0x922 <__stack+0x23>
     92e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     930:	98 a1       	ldd	r25, Y+32	; 0x20
     932:	a9 a1       	ldd	r26, Y+33	; 0x21
     934:	ba a1       	ldd	r27, Y+34	; 0x22
     936:	48 0f       	add	r20, r24
     938:	59 1f       	adc	r21, r25
     93a:	6a 1f       	adc	r22, r26
     93c:	7b 1f       	adc	r23, r27
     93e:	ce 01       	movw	r24, r28
     940:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     944:	88 23       	and	r24, r24
     946:	c9 f4       	brne	.+50     	; 0x97a <__stack+0x7b>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
     948:	d8 01       	movw	r26, r16
     94a:	c7 01       	movw	r24, r14
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	aa 1f       	adc	r26, r26
     952:	bb 1f       	adc	r27, r27
     954:	88 0f       	add	r24, r24
     956:	99 1f       	adc	r25, r25
     958:	aa 1f       	adc	r26, r26
     95a:	bb 1f       	adc	r27, r27
     95c:	91 70       	andi	r25, 0x01	; 1
     95e:	8f 96       	adiw	r24, 0x2f	; 47
     960:	8c 0f       	add	r24, r28
     962:	9d 1f       	adc	r25, r29
     964:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	5f 70       	andi	r21, 0x0F	; 15
     96e:	09 c0       	rjmp	.+18     	; 0x982 <__stack+0x83>
			break;
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	40 e0       	ldi	r20, 0x00	; 0
     976:	50 e0       	ldi	r21, 0x00	; 0
     978:	04 c0       	rjmp	.+8      	; 0x982 <__stack+0x83>
     97a:	2f ef       	ldi	r18, 0xFF	; 255
     97c:	3f ef       	ldi	r19, 0xFF	; 255
     97e:	4f ef       	ldi	r20, 0xFF	; 255
     980:	5f ef       	ldi	r21, 0xFF	; 255
			val = 1;	/* Internal error */
		}
	}

	return val;
}
     982:	62 2f       	mov	r22, r18
     984:	73 2f       	mov	r23, r19
     986:	84 2f       	mov	r24, r20
     988:	95 2f       	mov	r25, r21
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	1f 91       	pop	r17
     990:	0f 91       	pop	r16
     992:	ff 90       	pop	r15
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	bf 90       	pop	r11
     99c:	08 95       	ret

0000099e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
     99e:	2f 92       	push	r2
     9a0:	3f 92       	push	r3
     9a2:	4f 92       	push	r4
     9a4:	5f 92       	push	r5
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	df 93       	push	r29
     9c0:	cf 93       	push	r28
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <dir_sdi+0x26>
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <dir_sdi+0x28>
     9c6:	00 d0       	rcall	.+0      	; 0x9c8 <dir_sdi+0x2a>
     9c8:	cd b7       	in	r28, 0x3d	; 61
     9ca:	de b7       	in	r29, 0x3e	; 62
     9cc:	9e 83       	std	Y+6, r25	; 0x06
     9ce:	8d 83       	std	Y+5, r24	; 0x05
     9d0:	5a 01       	movw	r10, r20
     9d2:	6b 01       	movw	r12, r22
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
     9d4:	dc 01       	movw	r26, r24
     9d6:	4d 90       	ld	r4, X+
     9d8:	5c 90       	ld	r5, X


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
     9da:	40 30       	cpi	r20, 0x00	; 0
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	5b 07       	cpc	r21, r27
     9e0:	b0 e2       	ldi	r27, 0x20	; 32
     9e2:	6b 07       	cpc	r22, r27
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	7b 07       	cpc	r23, r27
     9e8:	08 f0       	brcs	.+2      	; 0x9ec <dir_sdi+0x4e>
     9ea:	eb c0       	rjmp	.+470    	; 0xbc2 <dir_sdi+0x224>
     9ec:	db 01       	movw	r26, r22
     9ee:	ca 01       	movw	r24, r20
     9f0:	8f 71       	andi	r24, 0x1F	; 31
     9f2:	90 70       	andi	r25, 0x00	; 0
     9f4:	a0 70       	andi	r26, 0x00	; 0
     9f6:	b0 70       	andi	r27, 0x00	; 0
     9f8:	00 97       	sbiw	r24, 0x00	; 0
     9fa:	a1 05       	cpc	r26, r1
     9fc:	b1 05       	cpc	r27, r1
     9fe:	09 f0       	breq	.+2      	; 0xa02 <dir_sdi+0x64>
     a00:	e0 c0       	rjmp	.+448    	; 0xbc2 <dir_sdi+0x224>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
     a02:	ed 81       	ldd	r30, Y+5	; 0x05
     a04:	fe 81       	ldd	r31, Y+6	; 0x06
     a06:	46 87       	std	Z+14, r20	; 0x0e
     a08:	57 87       	std	Z+15, r21	; 0x0f
     a0a:	60 8b       	std	Z+16, r22	; 0x10
     a0c:	71 8b       	std	Z+17, r23	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
     a0e:	66 80       	ldd	r6, Z+6	; 0x06
     a10:	77 80       	ldd	r7, Z+7	; 0x07
     a12:	80 84       	ldd	r8, Z+8	; 0x08
     a14:	91 84       	ldd	r9, Z+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
     a16:	61 14       	cp	r6, r1
     a18:	71 04       	cpc	r7, r1
     a1a:	81 04       	cpc	r8, r1
     a1c:	91 04       	cpc	r9, r1
     a1e:	89 f5       	brne	.+98     	; 0xa82 <dir_sdi+0xe4>
     a20:	d2 01       	movw	r26, r4
     a22:	8c 91       	ld	r24, X
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	58 f0       	brcs	.+22     	; 0xa3e <dir_sdi+0xa0>
		clst = fs->dirbase;
     a28:	93 96       	adiw	r26, 0x23	; 35
     a2a:	ed 90       	ld	r14, X+
     a2c:	fd 90       	ld	r15, X+
     a2e:	0d 91       	ld	r16, X+
     a30:	1c 91       	ld	r17, X
     a32:	96 97       	sbiw	r26, 0x26	; 38
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
     a34:	e1 14       	cp	r14, r1
     a36:	f1 04       	cpc	r15, r1
     a38:	01 05       	cpc	r16, r1
     a3a:	11 05       	cpc	r17, r1
     a3c:	21 f5       	brne	.+72     	; 0xa86 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
     a3e:	a6 01       	movw	r20, r12
     a40:	95 01       	movw	r18, r10
     a42:	68 94       	set
     a44:	14 f8       	bld	r1, 4
     a46:	56 95       	lsr	r21
     a48:	47 95       	ror	r20
     a4a:	37 95       	ror	r19
     a4c:	27 95       	ror	r18
     a4e:	16 94       	lsr	r1
     a50:	d1 f7       	brne	.-12     	; 0xa46 <dir_sdi+0xa8>
     a52:	f2 01       	movw	r30, r4
     a54:	87 81       	ldd	r24, Z+7	; 0x07
     a56:	90 85       	ldd	r25, Z+8	; 0x08
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	28 17       	cp	r18, r24
     a5e:	39 07       	cpc	r19, r25
     a60:	4a 07       	cpc	r20, r26
     a62:	5b 07       	cpc	r21, r27
     a64:	08 f0       	brcs	.+2      	; 0xa68 <dir_sdi+0xca>
     a66:	ad c0       	rjmp	.+346    	; 0xbc2 <dir_sdi+0x224>
		dp->sect = fs->dirbase;
     a68:	83 a1       	ldd	r24, Z+35	; 0x23
     a6a:	94 a1       	ldd	r25, Z+36	; 0x24
     a6c:	a5 a1       	ldd	r26, Z+37	; 0x25
     a6e:	b6 a1       	ldd	r27, Z+38	; 0x26
     a70:	ed 81       	ldd	r30, Y+5	; 0x05
     a72:	fe 81       	ldd	r31, Y+6	; 0x06
     a74:	86 8b       	std	Z+22, r24	; 0x16
     a76:	97 8b       	std	Z+23, r25	; 0x17
     a78:	a0 8f       	std	Z+24, r26	; 0x18
     a7a:	b1 8f       	std	Z+25, r27	; 0x19
     a7c:	84 01       	movw	r16, r8
     a7e:	73 01       	movw	r14, r6
     a80:	73 c0       	rjmp	.+230    	; 0xb68 <dir_sdi+0x1ca>
     a82:	84 01       	movw	r16, r8
     a84:	73 01       	movw	r14, r6

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
     a86:	d2 01       	movw	r26, r4
     a88:	19 96       	adiw	r26, 0x09	; 9
     a8a:	8d 91       	ld	r24, X+
     a8c:	9c 91       	ld	r25, X
     a8e:	1a 97       	sbiw	r26, 0x0a	; 10
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	3c 01       	movw	r6, r24
     a96:	4d 01       	movw	r8, r26
     a98:	05 2e       	mov	r0, r21
     a9a:	59 e0       	ldi	r21, 0x09	; 9
     a9c:	66 0c       	add	r6, r6
     a9e:	77 1c       	adc	r7, r7
     aa0:	88 1c       	adc	r8, r8
     aa2:	99 1c       	adc	r9, r9
     aa4:	5a 95       	dec	r21
     aa6:	d1 f7       	brne	.-12     	; 0xa9c <dir_sdi+0xfe>
     aa8:	50 2d       	mov	r21, r0
		while (ofs >= csz) {				/* Follow cluster chain */
     aaa:	a6 14       	cp	r10, r6
     aac:	b7 04       	cpc	r11, r7
     aae:	c8 04       	cpc	r12, r8
     ab0:	d9 04       	cpc	r13, r9
     ab2:	08 f4       	brcc	.+2      	; 0xab6 <dir_sdi+0x118>
     ab4:	4c c0       	rjmp	.+152    	; 0xb4e <dir_sdi+0x1b0>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
     ab6:	2d 80       	ldd	r2, Y+5	; 0x05
     ab8:	3e 80       	ldd	r3, Y+6	; 0x06
     aba:	88 27       	eor	r24, r24
     abc:	99 27       	eor	r25, r25
     abe:	dc 01       	movw	r26, r24
     ac0:	86 19       	sub	r24, r6
     ac2:	97 09       	sbc	r25, r7
     ac4:	a8 09       	sbc	r26, r8
     ac6:	b9 09       	sbc	r27, r9
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	ab 83       	std	Y+3, r26	; 0x03
     ace:	bc 83       	std	Y+4, r27	; 0x04
     ad0:	a6 18       	sub	r10, r6
     ad2:	b7 08       	sbc	r11, r7
     ad4:	c8 08       	sbc	r12, r8
     ad6:	d9 08       	sbc	r13, r9
     ad8:	82 2d       	mov	r24, r2
     ada:	93 2d       	mov	r25, r3
     adc:	b8 01       	movw	r22, r16
     ade:	a7 01       	movw	r20, r14
     ae0:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
     ae4:	7b 01       	movw	r14, r22
     ae6:	8c 01       	movw	r16, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
     ae8:	9f ef       	ldi	r25, 0xFF	; 255
     aea:	e9 16       	cp	r14, r25
     aec:	9f ef       	ldi	r25, 0xFF	; 255
     aee:	f9 06       	cpc	r15, r25
     af0:	9f ef       	ldi	r25, 0xFF	; 255
     af2:	09 07       	cpc	r16, r25
     af4:	9f ef       	ldi	r25, 0xFF	; 255
     af6:	19 07       	cpc	r17, r25
     af8:	11 f4       	brne	.+4      	; 0xafe <dir_sdi+0x160>
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	63 c0       	rjmp	.+198    	; 0xbc4 <dir_sdi+0x226>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
     afe:	a2 e0       	ldi	r26, 0x02	; 2
     b00:	ea 16       	cp	r14, r26
     b02:	f1 04       	cpc	r15, r1
     b04:	01 05       	cpc	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	08 f4       	brcc	.+2      	; 0xb0c <dir_sdi+0x16e>
     b0a:	5b c0       	rjmp	.+182    	; 0xbc2 <dir_sdi+0x224>
     b0c:	f2 01       	movw	r30, r4
     b0e:	83 89       	ldd	r24, Z+19	; 0x13
     b10:	94 89       	ldd	r25, Z+20	; 0x14
     b12:	a5 89       	ldd	r26, Z+21	; 0x15
     b14:	b6 89       	ldd	r27, Z+22	; 0x16
     b16:	e8 16       	cp	r14, r24
     b18:	f9 06       	cpc	r15, r25
     b1a:	0a 07       	cpc	r16, r26
     b1c:	1b 07       	cpc	r17, r27
     b1e:	08 f0       	brcs	.+2      	; 0xb22 <dir_sdi+0x184>
     b20:	50 c0       	rjmp	.+160    	; 0xbc2 <dir_sdi+0x224>
     b22:	29 81       	ldd	r18, Y+1	; 0x01
     b24:	3a 81       	ldd	r19, Y+2	; 0x02
     b26:	4b 81       	ldd	r20, Y+3	; 0x03
     b28:	5c 81       	ldd	r21, Y+4	; 0x04
     b2a:	2a 0d       	add	r18, r10
     b2c:	3b 1d       	adc	r19, r11
     b2e:	4c 1d       	adc	r20, r12
     b30:	5d 1d       	adc	r21, r13
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
     b32:	da 01       	movw	r26, r20
     b34:	c9 01       	movw	r24, r18
     b36:	86 0d       	add	r24, r6
     b38:	97 1d       	adc	r25, r7
     b3a:	a8 1d       	adc	r26, r8
     b3c:	b9 1d       	adc	r27, r9
     b3e:	86 15       	cp	r24, r6
     b40:	97 05       	cpc	r25, r7
     b42:	a8 05       	cpc	r26, r8
     b44:	b9 05       	cpc	r27, r9
     b46:	18 f0       	brcs	.+6      	; 0xb4e <dir_sdi+0x1b0>
     b48:	59 01       	movw	r10, r18
     b4a:	6a 01       	movw	r12, r20
     b4c:	c5 cf       	rjmp	.-118    	; 0xad8 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clst2sect(fs, clst);
     b4e:	c2 01       	movw	r24, r4
     b50:	b8 01       	movw	r22, r16
     b52:	a7 01       	movw	r20, r14
     b54:	0e 94 48 02 	call	0x490	; 0x490 <clst2sect>
     b58:	ad 81       	ldd	r26, Y+5	; 0x05
     b5a:	be 81       	ldd	r27, Y+6	; 0x06
     b5c:	56 96       	adiw	r26, 0x16	; 22
     b5e:	6d 93       	st	X+, r22
     b60:	7d 93       	st	X+, r23
     b62:	8d 93       	st	X+, r24
     b64:	9c 93       	st	X, r25
     b66:	59 97       	sbiw	r26, 0x19	; 25
	}
	dp->clust = clst;					/* Current cluster# */
     b68:	ed 81       	ldd	r30, Y+5	; 0x05
     b6a:	fe 81       	ldd	r31, Y+6	; 0x06
     b6c:	e2 8a       	std	Z+18, r14	; 0x12
     b6e:	f3 8a       	std	Z+19, r15	; 0x13
     b70:	04 8b       	std	Z+20, r16	; 0x14
     b72:	15 8b       	std	Z+21, r17	; 0x15
	if (dp->sect == 0) return FR_INT_ERR;
     b74:	26 89       	ldd	r18, Z+22	; 0x16
     b76:	37 89       	ldd	r19, Z+23	; 0x17
     b78:	40 8d       	ldd	r20, Z+24	; 0x18
     b7a:	51 8d       	ldd	r21, Z+25	; 0x19
     b7c:	21 15       	cp	r18, r1
     b7e:	31 05       	cpc	r19, r1
     b80:	41 05       	cpc	r20, r1
     b82:	51 05       	cpc	r21, r1
     b84:	f1 f0       	breq	.+60     	; 0xbc2 <dir_sdi+0x224>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
     b86:	d6 01       	movw	r26, r12
     b88:	c5 01       	movw	r24, r10
     b8a:	07 2e       	mov	r0, r23
     b8c:	79 e0       	ldi	r23, 0x09	; 9
     b8e:	b6 95       	lsr	r27
     b90:	a7 95       	ror	r26
     b92:	97 95       	ror	r25
     b94:	87 95       	ror	r24
     b96:	7a 95       	dec	r23
     b98:	d1 f7       	brne	.-12     	; 0xb8e <dir_sdi+0x1f0>
     b9a:	70 2d       	mov	r23, r0
     b9c:	82 0f       	add	r24, r18
     b9e:	93 1f       	adc	r25, r19
     ba0:	a4 1f       	adc	r26, r20
     ba2:	b5 1f       	adc	r27, r21
     ba4:	ed 81       	ldd	r30, Y+5	; 0x05
     ba6:	fe 81       	ldd	r31, Y+6	; 0x06
     ba8:	86 8b       	std	Z+22, r24	; 0x16
     baa:	97 8b       	std	Z+23, r25	; 0x17
     bac:	a0 8f       	std	Z+24, r26	; 0x18
     bae:	b1 8f       	std	Z+25, r27	; 0x19
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
     bb0:	c5 01       	movw	r24, r10
     bb2:	91 70       	andi	r25, 0x01	; 1
     bb4:	8f 96       	adiw	r24, 0x2f	; 47
     bb6:	84 0d       	add	r24, r4
     bb8:	95 1d       	adc	r25, r5
     bba:	93 8f       	std	Z+27, r25	; 0x1b
     bbc:	82 8f       	std	Z+26, r24	; 0x1a
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <dir_sdi+0x226>

	return FR_OK;
     bc2:	82 e0       	ldi	r24, 0x02	; 2
}
     bc4:	26 96       	adiw	r28, 0x06	; 6
     bc6:	0f b6       	in	r0, 0x3f	; 63
     bc8:	f8 94       	cli
     bca:	de bf       	out	0x3e, r29	; 62
     bcc:	0f be       	out	0x3f, r0	; 63
     bce:	cd bf       	out	0x3d, r28	; 61
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	bf 90       	pop	r11
     be2:	af 90       	pop	r10
     be4:	9f 90       	pop	r9
     be6:	8f 90       	pop	r8
     be8:	7f 90       	pop	r7
     bea:	6f 90       	pop	r6
     bec:	5f 90       	pop	r5
     bee:	4f 90       	pop	r4
     bf0:	3f 90       	pop	r3
     bf2:	2f 90       	pop	r2
     bf4:	08 95       	ret

00000bf6 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
     bf6:	4f 92       	push	r4
     bf8:	5f 92       	push	r5
     bfa:	6f 92       	push	r6
     bfc:	7f 92       	push	r7
     bfe:	9f 92       	push	r9
     c00:	af 92       	push	r10
     c02:	bf 92       	push	r11
     c04:	cf 92       	push	r12
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	ec 01       	movw	r28, r24
     c16:	5a 01       	movw	r10, r20
     c18:	6b 01       	movw	r12, r22
     c1a:	28 01       	movw	r4, r16
     c1c:	39 01       	movw	r6, r18
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
     c1e:	42 30       	cpi	r20, 0x02	; 2
     c20:	51 05       	cpc	r21, r1
     c22:	61 05       	cpc	r22, r1
     c24:	71 05       	cpc	r23, r1
     c26:	08 f4       	brcc	.+2      	; 0xc2a <put_fat+0x34>
     c28:	ed c0       	rjmp	.+474    	; 0xe04 <put_fat+0x20e>
     c2a:	8b 89       	ldd	r24, Y+19	; 0x13
     c2c:	9c 89       	ldd	r25, Y+20	; 0x14
     c2e:	ad 89       	ldd	r26, Y+21	; 0x15
     c30:	be 89       	ldd	r27, Y+22	; 0x16
     c32:	48 17       	cp	r20, r24
     c34:	59 07       	cpc	r21, r25
     c36:	6a 07       	cpc	r22, r26
     c38:	7b 07       	cpc	r23, r27
     c3a:	08 f0       	brcs	.+2      	; 0xc3e <put_fat+0x48>
     c3c:	e3 c0       	rjmp	.+454    	; 0xe04 <put_fat+0x20e>
		switch (fs->fs_type) {
     c3e:	88 81       	ld	r24, Y
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	09 f4       	brne	.+2      	; 0xc46 <put_fat+0x50>
     c44:	76 c0       	rjmp	.+236    	; 0xd32 <put_fat+0x13c>
     c46:	83 30       	cpi	r24, 0x03	; 3
     c48:	09 f4       	brne	.+2      	; 0xc4c <put_fat+0x56>
     c4a:	96 c0       	rjmp	.+300    	; 0xd78 <put_fat+0x182>
     c4c:	81 30       	cpi	r24, 0x01	; 1
     c4e:	09 f0       	breq	.+2      	; 0xc52 <put_fat+0x5c>
     c50:	d9 c0       	rjmp	.+434    	; 0xe04 <put_fat+0x20e>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
     c52:	ca 01       	movw	r24, r20
     c54:	96 95       	lsr	r25
     c56:	87 95       	ror	r24
     c58:	8c 01       	movw	r16, r24
     c5a:	04 0f       	add	r16, r20
     c5c:	15 1f       	adc	r17, r21
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     c5e:	a8 01       	movw	r20, r16
     c60:	45 2f       	mov	r20, r21
     c62:	55 27       	eor	r21, r21
     c64:	46 95       	lsr	r20
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c6c:	98 a1       	ldd	r25, Y+32	; 0x20
     c6e:	a9 a1       	ldd	r26, Y+33	; 0x21
     c70:	ba a1       	ldd	r27, Y+34	; 0x22
     c72:	48 0f       	add	r20, r24
     c74:	59 1f       	adc	r21, r25
     c76:	6a 1f       	adc	r22, r26
     c78:	7b 1f       	adc	r23, r27
     c7a:	ce 01       	movw	r24, r28
     c7c:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     c80:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
     c82:	88 23       	and	r24, r24
     c84:	09 f0       	breq	.+2      	; 0xc88 <put_fat+0x92>
     c86:	c1 c0       	rjmp	.+386    	; 0xe0a <put_fat+0x214>
			p = fs->win + bc++ % SS(fs);
     c88:	98 01       	movw	r18, r16
     c8a:	31 70       	andi	r19, 0x01	; 1
     c8c:	0f 5f       	subi	r16, 0xFF	; 255
     c8e:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Put 1st byte */
     c90:	cc 24       	eor	r12, r12
     c92:	dd 24       	eor	r13, r13
     c94:	c3 94       	inc	r12
     c96:	ca 20       	and	r12, r10
     c98:	db 20       	and	r13, r11
     c9a:	c1 14       	cp	r12, r1
     c9c:	d1 04       	cpc	r13, r1
     c9e:	51 f0       	breq	.+20     	; 0xcb4 <put_fat+0xbe>
     ca0:	fe 01       	movw	r30, r28
     ca2:	e2 0f       	add	r30, r18
     ca4:	f3 1f       	adc	r31, r19
     ca6:	87 a5       	ldd	r24, Z+47	; 0x2f
     ca8:	8f 70       	andi	r24, 0x0F	; 15
     caa:	94 2d       	mov	r25, r4
     cac:	92 95       	swap	r25
     cae:	90 7f       	andi	r25, 0xF0	; 240
     cb0:	98 2b       	or	r25, r24
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <put_fat+0xc0>
     cb4:	94 2d       	mov	r25, r4
     cb6:	fe 01       	movw	r30, r28
     cb8:	e2 0f       	add	r30, r18
     cba:	f3 1f       	adc	r31, r19
     cbc:	97 a7       	std	Z+47, r25	; 0x2f
			fs->wflag = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	8b 83       	std	Y+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
     cc2:	a8 01       	movw	r20, r16
     cc4:	45 2f       	mov	r20, r21
     cc6:	55 27       	eor	r21, r21
     cc8:	46 95       	lsr	r20
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	70 e0       	ldi	r23, 0x00	; 0
     cce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cd0:	98 a1       	ldd	r25, Y+32	; 0x20
     cd2:	a9 a1       	ldd	r26, Y+33	; 0x21
     cd4:	ba a1       	ldd	r27, Y+34	; 0x22
     cd6:	48 0f       	add	r20, r24
     cd8:	59 1f       	adc	r21, r25
     cda:	6a 1f       	adc	r22, r26
     cdc:	7b 1f       	adc	r23, r27
     cde:	ce 01       	movw	r24, r28
     ce0:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     ce4:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
     ce6:	88 23       	and	r24, r24
     ce8:	09 f0       	breq	.+2      	; 0xcec <put_fat+0xf6>
     cea:	8f c0       	rjmp	.+286    	; 0xe0a <put_fat+0x214>
			p = fs->win + bc % SS(fs);
     cec:	a8 01       	movw	r20, r16
     cee:	51 70       	andi	r21, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Put 2nd byte */
     cf0:	cd 28       	or	r12, r13
     cf2:	61 f0       	breq	.+24     	; 0xd0c <put_fat+0x116>
     cf4:	d3 01       	movw	r26, r6
     cf6:	c2 01       	movw	r24, r4
     cf8:	68 94       	set
     cfa:	13 f8       	bld	r1, 3
     cfc:	b6 95       	lsr	r27
     cfe:	a7 95       	ror	r26
     d00:	97 95       	ror	r25
     d02:	87 95       	ror	r24
     d04:	16 94       	lsr	r1
     d06:	d1 f7       	brne	.-12     	; 0xcfc <put_fat+0x106>
     d08:	e8 2e       	mov	r14, r24
     d0a:	0c c0       	rjmp	.+24     	; 0xd24 <put_fat+0x12e>
     d0c:	fe 01       	movw	r30, r28
     d0e:	e4 0f       	add	r30, r20
     d10:	f5 1f       	adc	r31, r21
     d12:	27 a5       	ldd	r18, Z+47	; 0x2f
     d14:	20 7f       	andi	r18, 0xF0	; 240
     d16:	bb 27       	eor	r27, r27
     d18:	a7 2d       	mov	r26, r7
     d1a:	96 2d       	mov	r25, r6
     d1c:	85 2d       	mov	r24, r5
     d1e:	8f 70       	andi	r24, 0x0F	; 15
     d20:	e2 2e       	mov	r14, r18
     d22:	e8 2a       	or	r14, r24
     d24:	fe 01       	movw	r30, r28
     d26:	e4 0f       	add	r30, r20
     d28:	f5 1f       	adc	r31, r21
     d2a:	e7 a6       	std	Z+47, r14	; 0x2f
			fs->wflag = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	8b 83       	std	Y+3, r24	; 0x03
     d30:	6c c0       	rjmp	.+216    	; 0xe0a <put_fat+0x214>
			break;

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
     d32:	45 2f       	mov	r20, r21
     d34:	56 2f       	mov	r21, r22
     d36:	67 2f       	mov	r22, r23
     d38:	77 27       	eor	r23, r23
     d3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d3c:	98 a1       	ldd	r25, Y+32	; 0x20
     d3e:	a9 a1       	ldd	r26, Y+33	; 0x21
     d40:	ba a1       	ldd	r27, Y+34	; 0x22
     d42:	48 0f       	add	r20, r24
     d44:	59 1f       	adc	r21, r25
     d46:	6a 1f       	adc	r22, r26
     d48:	7b 1f       	adc	r23, r27
     d4a:	ce 01       	movw	r24, r28
     d4c:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     d50:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
     d52:	88 23       	and	r24, r24
     d54:	09 f0       	breq	.+2      	; 0xd58 <put_fat+0x162>
     d56:	59 c0       	rjmp	.+178    	; 0xe0a <put_fat+0x214>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
     d58:	d6 01       	movw	r26, r12
     d5a:	c5 01       	movw	r24, r10
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	aa 1f       	adc	r26, r26
     d62:	bb 1f       	adc	r27, r27
     d64:	91 70       	andi	r25, 0x01	; 1
     d66:	8f 96       	adiw	r24, 0x2f	; 47
     d68:	8c 0f       	add	r24, r28
     d6a:	9d 1f       	adc	r25, r29
     d6c:	b2 01       	movw	r22, r4
     d6e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <st_word>
			fs->wflag = 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	8b 83       	std	Y+3, r24	; 0x03
     d76:	49 c0       	rjmp	.+146    	; 0xe0a <put_fat+0x214>

		case FS_FAT32 :
#if FF_FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
     d78:	68 94       	set
     d7a:	16 f8       	bld	r1, 6
     d7c:	76 95       	lsr	r23
     d7e:	67 95       	ror	r22
     d80:	57 95       	ror	r21
     d82:	47 95       	ror	r20
     d84:	16 94       	lsr	r1
     d86:	d1 f7       	brne	.-12     	; 0xd7c <put_fat+0x186>
     d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d8a:	98 a1       	ldd	r25, Y+32	; 0x20
     d8c:	a9 a1       	ldd	r26, Y+33	; 0x21
     d8e:	ba a1       	ldd	r27, Y+34	; 0x22
     d90:	48 0f       	add	r20, r24
     d92:	59 1f       	adc	r21, r25
     d94:	6a 1f       	adc	r22, r26
     d96:	7b 1f       	adc	r23, r27
     d98:	ce 01       	movw	r24, r28
     d9a:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
     d9e:	98 2e       	mov	r9, r24
			if (res != FR_OK) break;
     da0:	88 23       	and	r24, r24
     da2:	99 f5       	brne	.+102    	; 0xe0a <put_fat+0x214>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
     da4:	0f 2e       	mov	r0, r31
     da6:	ff ef       	ldi	r31, 0xFF	; 255
     da8:	ef 2e       	mov	r14, r31
     daa:	ff ef       	ldi	r31, 0xFF	; 255
     dac:	ff 2e       	mov	r15, r31
     dae:	ff ef       	ldi	r31, 0xFF	; 255
     db0:	0f 2f       	mov	r16, r31
     db2:	ff e0       	ldi	r31, 0x0F	; 15
     db4:	1f 2f       	mov	r17, r31
     db6:	f0 2d       	mov	r31, r0
     db8:	e4 20       	and	r14, r4
     dba:	f5 20       	and	r15, r5
     dbc:	06 21       	and	r16, r6
     dbe:	17 21       	and	r17, r7
     dc0:	d6 01       	movw	r26, r12
     dc2:	c5 01       	movw	r24, r10
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	aa 1f       	adc	r26, r26
     dca:	bb 1f       	adc	r27, r27
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	aa 1f       	adc	r26, r26
     dd2:	bb 1f       	adc	r27, r27
     dd4:	91 70       	andi	r25, 0x01	; 1
     dd6:	8f 96       	adiw	r24, 0x2f	; 47
     dd8:	6e 01       	movw	r12, r28
     dda:	c8 0e       	add	r12, r24
     ddc:	d9 1e       	adc	r13, r25
     dde:	c6 01       	movw	r24, r12
     de0:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
     de4:	60 70       	andi	r22, 0x00	; 0
     de6:	70 70       	andi	r23, 0x00	; 0
     de8:	80 70       	andi	r24, 0x00	; 0
     dea:	90 7f       	andi	r25, 0xF0	; 240
     dec:	e6 2a       	or	r14, r22
     dee:	f7 2a       	or	r15, r23
     df0:	08 2b       	or	r16, r24
     df2:	19 2b       	or	r17, r25
     df4:	c6 01       	movw	r24, r12
     df6:	b8 01       	movw	r22, r16
     df8:	a7 01       	movw	r20, r14
     dfa:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
			fs->wflag = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	8b 83       	std	Y+3, r24	; 0x03
     e02:	03 c0       	rjmp	.+6      	; 0xe0a <put_fat+0x214>
     e04:	99 24       	eor	r9, r9
     e06:	68 94       	set
     e08:	91 f8       	bld	r9, 1
			break;
		}
	}
	return res;
}
     e0a:	89 2d       	mov	r24, r9
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	ff 90       	pop	r15
     e16:	ef 90       	pop	r14
     e18:	df 90       	pop	r13
     e1a:	cf 90       	pop	r12
     e1c:	bf 90       	pop	r11
     e1e:	af 90       	pop	r10
     e20:	9f 90       	pop	r9
     e22:	7f 90       	pop	r7
     e24:	6f 90       	pop	r6
     e26:	5f 90       	pop	r5
     e28:	4f 90       	pop	r4
     e2a:	08 95       	ret

00000e2c <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
     e2c:	4f 92       	push	r4
     e2e:	5f 92       	push	r5
     e30:	6f 92       	push	r6
     e32:	7f 92       	push	r7
     e34:	8f 92       	push	r8
     e36:	9f 92       	push	r9
     e38:	af 92       	push	r10
     e3a:	bf 92       	push	r11
     e3c:	cf 92       	push	r12
     e3e:	df 92       	push	r13
     e40:	ef 92       	push	r14
     e42:	ff 92       	push	r15
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	8c 01       	movw	r16, r24
     e4e:	2a 01       	movw	r4, r20
     e50:	3b 01       	movw	r6, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
     e52:	fc 01       	movw	r30, r24
     e54:	c0 81       	ld	r28, Z
     e56:	d1 81       	ldd	r29, Z+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
     e58:	41 15       	cp	r20, r1
     e5a:	51 05       	cpc	r21, r1
     e5c:	61 05       	cpc	r22, r1
     e5e:	71 05       	cpc	r23, r1
     e60:	99 f4       	brne	.+38     	; 0xe88 <create_chain+0x5c>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
     e62:	8b 84       	ldd	r8, Y+11	; 0x0b
     e64:	9c 84       	ldd	r9, Y+12	; 0x0c
     e66:	ad 84       	ldd	r10, Y+13	; 0x0d
     e68:	be 84       	ldd	r11, Y+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
     e6a:	81 14       	cp	r8, r1
     e6c:	91 04       	cpc	r9, r1
     e6e:	a1 04       	cpc	r10, r1
     e70:	b1 04       	cpc	r11, r1
     e72:	71 f1       	breq	.+92     	; 0xed0 <create_chain+0xa4>
     e74:	8b 89       	ldd	r24, Y+19	; 0x13
     e76:	9c 89       	ldd	r25, Y+20	; 0x14
     e78:	ad 89       	ldd	r26, Y+21	; 0x15
     e7a:	be 89       	ldd	r27, Y+22	; 0x16
     e7c:	88 16       	cp	r8, r24
     e7e:	99 06       	cpc	r9, r25
     e80:	aa 06       	cpc	r10, r26
     e82:	bb 06       	cpc	r11, r27
     e84:	28 f5       	brcc	.+74     	; 0xed0 <create_chain+0xa4>
     e86:	28 c0       	rjmp	.+80     	; 0xed8 <create_chain+0xac>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
     e88:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
		if (cs < 2) return 1;				/* Test for insanity */
     e90:	62 30       	cpi	r22, 0x02	; 2
     e92:	71 05       	cpc	r23, r1
     e94:	81 05       	cpc	r24, r1
     e96:	91 05       	cpc	r25, r1
     e98:	28 f4       	brcc	.+10     	; 0xea4 <create_chain+0x78>
     e9a:	21 e0       	ldi	r18, 0x01	; 1
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	fb c0       	rjmp	.+502    	; 0x109a <create_chain+0x26e>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
     ea4:	6f 3f       	cpi	r22, 0xFF	; 255
     ea6:	ff ef       	ldi	r31, 0xFF	; 255
     ea8:	7f 07       	cpc	r23, r31
     eaa:	ff ef       	ldi	r31, 0xFF	; 255
     eac:	8f 07       	cpc	r24, r31
     eae:	ff ef       	ldi	r31, 0xFF	; 255
     eb0:	9f 07       	cpc	r25, r31
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <create_chain+0x8a>
     eb4:	f2 c0       	rjmp	.+484    	; 0x109a <create_chain+0x26e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
     eb6:	8b 89       	ldd	r24, Y+19	; 0x13
     eb8:	9c 89       	ldd	r25, Y+20	; 0x14
     eba:	ad 89       	ldd	r26, Y+21	; 0x15
     ebc:	be 89       	ldd	r27, Y+22	; 0x16
     ebe:	28 17       	cp	r18, r24
     ec0:	39 07       	cpc	r19, r25
     ec2:	4a 07       	cpc	r20, r26
     ec4:	5b 07       	cpc	r21, r27
     ec6:	08 f4       	brcc	.+2      	; 0xeca <create_chain+0x9e>
     ec8:	e8 c0       	rjmp	.+464    	; 0x109a <create_chain+0x26e>
     eca:	53 01       	movw	r10, r6
     ecc:	42 01       	movw	r8, r4
     ece:	04 c0       	rjmp	.+8      	; 0xed8 <create_chain+0xac>
     ed0:	88 24       	eor	r8, r8
     ed2:	99 24       	eor	r9, r9
     ed4:	54 01       	movw	r10, r8
     ed6:	83 94       	inc	r8
		scl = clst;							/* Cluster to start to find */
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
     ed8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eda:	98 89       	ldd	r25, Y+16	; 0x10
     edc:	a9 89       	ldd	r26, Y+17	; 0x11
     ede:	ba 89       	ldd	r27, Y+18	; 0x12
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	a1 05       	cpc	r26, r1
     ee4:	b1 05       	cpc	r27, r1
     ee6:	09 f4       	brne	.+2      	; 0xeea <create_chain+0xbe>
     ee8:	d4 c0       	rjmp	.+424    	; 0x1092 <create_chain+0x266>
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
		if (scl == clst) {						/* Stretching an existing chain? */
     eea:	84 14       	cp	r8, r4
     eec:	95 04       	cpc	r9, r5
     eee:	a6 04       	cpc	r10, r6
     ef0:	b7 04       	cpc	r11, r7
     ef2:	09 f0       	breq	.+2      	; 0xef6 <create_chain+0xca>
     ef4:	49 c0       	rjmp	.+146    	; 0xf88 <create_chain+0x15c>
			ncl = scl + 1;						/* Test if next cluster is free */
     ef6:	75 01       	movw	r14, r10
     ef8:	64 01       	movw	r12, r8
     efa:	08 94       	sec
     efc:	c1 1c       	adc	r12, r1
     efe:	d1 1c       	adc	r13, r1
     f00:	e1 1c       	adc	r14, r1
     f02:	f1 1c       	adc	r15, r1
			if (ncl >= fs->n_fatent) ncl = 2;
     f04:	8b 89       	ldd	r24, Y+19	; 0x13
     f06:	9c 89       	ldd	r25, Y+20	; 0x14
     f08:	ad 89       	ldd	r26, Y+21	; 0x15
     f0a:	be 89       	ldd	r27, Y+22	; 0x16
     f0c:	c8 16       	cp	r12, r24
     f0e:	d9 06       	cpc	r13, r25
     f10:	ea 06       	cpc	r14, r26
     f12:	fb 06       	cpc	r15, r27
     f14:	28 f0       	brcs	.+10     	; 0xf20 <create_chain+0xf4>
     f16:	cc 24       	eor	r12, r12
     f18:	dd 24       	eor	r13, r13
     f1a:	76 01       	movw	r14, r12
     f1c:	68 94       	set
     f1e:	c1 f8       	bld	r12, 1
			cs = get_fat(obj, ncl);				/* Get next cluster status */
     f20:	c8 01       	movw	r24, r16
     f22:	b7 01       	movw	r22, r14
     f24:	a6 01       	movw	r20, r12
     f26:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
     f2a:	9b 01       	movw	r18, r22
     f2c:	ac 01       	movw	r20, r24
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     f2e:	61 30       	cpi	r22, 0x01	; 1
     f30:	71 05       	cpc	r23, r1
     f32:	81 05       	cpc	r24, r1
     f34:	91 05       	cpc	r25, r1
     f36:	09 f4       	brne	.+2      	; 0xf3a <create_chain+0x10e>
     f38:	b0 c0       	rjmp	.+352    	; 0x109a <create_chain+0x26e>
     f3a:	2f 3f       	cpi	r18, 0xFF	; 255
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	38 07       	cpc	r19, r24
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	48 07       	cpc	r20, r24
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	58 07       	cpc	r21, r24
     f48:	09 f4       	brne	.+2      	; 0xf4c <create_chain+0x120>
     f4a:	a7 c0       	rjmp	.+334    	; 0x109a <create_chain+0x26e>
			if (cs != 0) {						/* Not free? */
     f4c:	21 15       	cp	r18, r1
     f4e:	31 05       	cpc	r19, r1
     f50:	41 05       	cpc	r20, r1
     f52:	51 05       	cpc	r21, r1
     f54:	a1 f0       	breq	.+40     	; 0xf7e <create_chain+0x152>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
     f56:	2b 85       	ldd	r18, Y+11	; 0x0b
     f58:	3c 85       	ldd	r19, Y+12	; 0x0c
     f5a:	4d 85       	ldd	r20, Y+13	; 0x0d
     f5c:	5e 85       	ldd	r21, Y+14	; 0x0e
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
     f5e:	22 30       	cpi	r18, 0x02	; 2
     f60:	31 05       	cpc	r19, r1
     f62:	41 05       	cpc	r20, r1
     f64:	51 05       	cpc	r21, r1
     f66:	80 f0       	brcs	.+32     	; 0xf88 <create_chain+0x15c>
     f68:	8b 89       	ldd	r24, Y+19	; 0x13
     f6a:	9c 89       	ldd	r25, Y+20	; 0x14
     f6c:	ad 89       	ldd	r26, Y+21	; 0x15
     f6e:	be 89       	ldd	r27, Y+22	; 0x16
     f70:	28 17       	cp	r18, r24
     f72:	39 07       	cpc	r19, r25
     f74:	4a 07       	cpc	r20, r26
     f76:	5b 07       	cpc	r21, r27
     f78:	08 f4       	brcc	.+2      	; 0xf7c <create_chain+0x150>
     f7a:	a4 c0       	rjmp	.+328    	; 0x10c4 <create_chain+0x298>
     f7c:	05 c0       	rjmp	.+10     	; 0xf88 <create_chain+0x15c>
				ncl = 0;
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
     f7e:	c1 14       	cp	r12, r1
     f80:	d1 04       	cpc	r13, r1
     f82:	e1 04       	cpc	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	e9 f5       	brne	.+122    	; 0x1002 <create_chain+0x1d6>
     f88:	75 01       	movw	r14, r10
     f8a:	64 01       	movw	r12, r8
			ncl = scl;	/* Start cluster */
			for (;;) {
				ncl++;							/* Next cluster */
     f8c:	08 94       	sec
     f8e:	c1 1c       	adc	r12, r1
     f90:	d1 1c       	adc	r13, r1
     f92:	e1 1c       	adc	r14, r1
     f94:	f1 1c       	adc	r15, r1
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
     f96:	8b 89       	ldd	r24, Y+19	; 0x13
     f98:	9c 89       	ldd	r25, Y+20	; 0x14
     f9a:	ad 89       	ldd	r26, Y+21	; 0x15
     f9c:	be 89       	ldd	r27, Y+22	; 0x16
     f9e:	c8 16       	cp	r12, r24
     fa0:	d9 06       	cpc	r13, r25
     fa2:	ea 06       	cpc	r14, r26
     fa4:	fb 06       	cpc	r15, r27
     fa6:	60 f0       	brcs	.+24     	; 0xfc0 <create_chain+0x194>
					ncl = 2;
					if (ncl > scl) return 0;	/* No free cluster found? */
     fa8:	e2 e0       	ldi	r30, 0x02	; 2
     faa:	8e 16       	cp	r8, r30
     fac:	91 04       	cpc	r9, r1
     fae:	a1 04       	cpc	r10, r1
     fb0:	b1 04       	cpc	r11, r1
     fb2:	08 f4       	brcc	.+2      	; 0xfb6 <create_chain+0x18a>
     fb4:	6e c0       	rjmp	.+220    	; 0x1092 <create_chain+0x266>
     fb6:	cc 24       	eor	r12, r12
     fb8:	dd 24       	eor	r13, r13
     fba:	76 01       	movw	r14, r12
     fbc:	68 94       	set
     fbe:	c1 f8       	bld	r12, 1
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
     fc0:	c8 01       	movw	r24, r16
     fc2:	b7 01       	movw	r22, r14
     fc4:	a6 01       	movw	r20, r12
     fc6:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
				if (cs == 0) break;				/* Found a free cluster? */
     fce:	61 15       	cp	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	81 05       	cpc	r24, r1
     fd4:	91 05       	cpc	r25, r1
     fd6:	a9 f0       	breq	.+42     	; 0x1002 <create_chain+0x1d6>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
     fd8:	61 30       	cpi	r22, 0x01	; 1
     fda:	71 05       	cpc	r23, r1
     fdc:	81 05       	cpc	r24, r1
     fde:	91 05       	cpc	r25, r1
     fe0:	09 f4       	brne	.+2      	; 0xfe4 <create_chain+0x1b8>
     fe2:	5b c0       	rjmp	.+182    	; 0x109a <create_chain+0x26e>
     fe4:	6f 3f       	cpi	r22, 0xFF	; 255
     fe6:	ff ef       	ldi	r31, 0xFF	; 255
     fe8:	7f 07       	cpc	r23, r31
     fea:	ff ef       	ldi	r31, 0xFF	; 255
     fec:	8f 07       	cpc	r24, r31
     fee:	ff ef       	ldi	r31, 0xFF	; 255
     ff0:	9f 07       	cpc	r25, r31
     ff2:	09 f4       	brne	.+2      	; 0xff6 <create_chain+0x1ca>
     ff4:	52 c0       	rjmp	.+164    	; 0x109a <create_chain+0x26e>
				if (ncl == scl) return 0;		/* No free cluster found? */
     ff6:	8c 14       	cp	r8, r12
     ff8:	9d 04       	cpc	r9, r13
     ffa:	ae 04       	cpc	r10, r14
     ffc:	bf 04       	cpc	r11, r15
     ffe:	31 f6       	brne	.-116    	; 0xf8c <create_chain+0x160>
    1000:	48 c0       	rjmp	.+144    	; 0x1092 <create_chain+0x266>
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
    1002:	ce 01       	movw	r24, r28
    1004:	b7 01       	movw	r22, r14
    1006:	a6 01       	movw	r20, r12
    1008:	0f ef       	ldi	r16, 0xFF	; 255
    100a:	1f ef       	ldi	r17, 0xFF	; 255
    100c:	2f ef       	ldi	r18, 0xFF	; 255
    100e:	3f ef       	ldi	r19, 0xFF	; 255
    1010:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <put_fat>
		if (res == FR_OK && clst != 0) {
    1014:	88 23       	and	r24, r24
    1016:	89 f5       	brne	.+98     	; 0x107a <create_chain+0x24e>
    1018:	41 14       	cp	r4, r1
    101a:	51 04       	cpc	r5, r1
    101c:	61 04       	cpc	r6, r1
    101e:	71 04       	cpc	r7, r1
    1020:	49 f0       	breq	.+18     	; 0x1034 <create_chain+0x208>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
    1022:	ce 01       	movw	r24, r28
    1024:	b3 01       	movw	r22, r6
    1026:	a2 01       	movw	r20, r4
    1028:	97 01       	movw	r18, r14
    102a:	86 01       	movw	r16, r12
    102c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    1030:	88 23       	and	r24, r24
    1032:	19 f5       	brne	.+70     	; 0x107a <create_chain+0x24e>
		fs->last_clst = ncl;
    1034:	cb 86       	std	Y+11, r12	; 0x0b
    1036:	dc 86       	std	Y+12, r13	; 0x0c
    1038:	ed 86       	std	Y+13, r14	; 0x0d
    103a:	fe 86       	std	Y+14, r15	; 0x0e
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
    103c:	2f 85       	ldd	r18, Y+15	; 0x0f
    103e:	38 89       	ldd	r19, Y+16	; 0x10
    1040:	49 89       	ldd	r20, Y+17	; 0x11
    1042:	5a 89       	ldd	r21, Y+18	; 0x12
    1044:	8b 89       	ldd	r24, Y+19	; 0x13
    1046:	9c 89       	ldd	r25, Y+20	; 0x14
    1048:	ad 89       	ldd	r26, Y+21	; 0x15
    104a:	be 89       	ldd	r27, Y+22	; 0x16
    104c:	02 97       	sbiw	r24, 0x02	; 2
    104e:	a1 09       	sbc	r26, r1
    1050:	b1 09       	sbc	r27, r1
    1052:	82 17       	cp	r24, r18
    1054:	93 07       	cpc	r25, r19
    1056:	a4 07       	cpc	r26, r20
    1058:	b5 07       	cpc	r27, r21
    105a:	48 f0       	brcs	.+18     	; 0x106e <create_chain+0x242>
    105c:	da 01       	movw	r26, r20
    105e:	c9 01       	movw	r24, r18
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	a1 09       	sbc	r26, r1
    1064:	b1 09       	sbc	r27, r1
    1066:	8f 87       	std	Y+15, r24	; 0x0f
    1068:	98 8b       	std	Y+16, r25	; 0x10
    106a:	a9 8b       	std	Y+17, r26	; 0x11
    106c:	ba 8b       	std	Y+18, r27	; 0x12
		fs->fsi_flag |= 1;
    106e:	8c 81       	ldd	r24, Y+4	; 0x04
    1070:	81 60       	ori	r24, 0x01	; 1
    1072:	8c 83       	std	Y+4, r24	; 0x04
    1074:	a7 01       	movw	r20, r14
    1076:	96 01       	movw	r18, r12
    1078:	10 c0       	rjmp	.+32     	; 0x109a <create_chain+0x26e>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    107a:	81 30       	cpi	r24, 0x01	; 1
    107c:	29 f0       	breq	.+10     	; 0x1088 <create_chain+0x25c>
    107e:	21 e0       	ldi	r18, 0x01	; 1
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	09 c0       	rjmp	.+18     	; 0x109a <create_chain+0x26e>
    1088:	2f ef       	ldi	r18, 0xFF	; 255
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f ef       	ldi	r20, 0xFF	; 255
    108e:	5f ef       	ldi	r21, 0xFF	; 255
    1090:	04 c0       	rjmp	.+8      	; 0x109a <create_chain+0x26e>
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
	}

	return ncl;		/* Return new cluster number or error status */
}
    109a:	62 2f       	mov	r22, r18
    109c:	73 2f       	mov	r23, r19
    109e:	84 2f       	mov	r24, r20
    10a0:	95 2f       	mov	r25, r21
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	1f 91       	pop	r17
    10a8:	0f 91       	pop	r16
    10aa:	ff 90       	pop	r15
    10ac:	ef 90       	pop	r14
    10ae:	df 90       	pop	r13
    10b0:	cf 90       	pop	r12
    10b2:	bf 90       	pop	r11
    10b4:	af 90       	pop	r10
    10b6:	9f 90       	pop	r9
    10b8:	8f 90       	pop	r8
    10ba:	7f 90       	pop	r7
    10bc:	6f 90       	pop	r6
    10be:	5f 90       	pop	r5
    10c0:	4f 90       	pop	r4
    10c2:	08 95       	ret
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
    10c4:	49 01       	movw	r8, r18
    10c6:	5a 01       	movw	r10, r20
    10c8:	5f cf       	rjmp	.-322    	; 0xf88 <create_chain+0x15c>

000010ca <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    10ca:	2f 92       	push	r2
    10cc:	3f 92       	push	r3
    10ce:	4f 92       	push	r4
    10d0:	5f 92       	push	r5
    10d2:	6f 92       	push	r6
    10d4:	7f 92       	push	r7
    10d6:	8f 92       	push	r8
    10d8:	9f 92       	push	r9
    10da:	af 92       	push	r10
    10dc:	bf 92       	push	r11
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	cd b7       	in	r28, 0x3d	; 61
    10f0:	de b7       	in	r29, 0x3e	; 62
    10f2:	28 97       	sbiw	r28, 0x08	; 8
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	98 87       	std	Y+8, r25	; 0x08
    1100:	8f 83       	std	Y+7, r24	; 0x07
    1102:	3b 01       	movw	r6, r22
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    1104:	dc 01       	movw	r26, r24
    1106:	8d 90       	ld	r8, X+
    1108:	9c 90       	ld	r9, X
    110a:	11 97       	sbiw	r26, 0x01	; 1


	ofs = dp->dptr + SZDIRE;	/* Next entry */
    110c:	1e 96       	adiw	r26, 0x0e	; 14
    110e:	2d 91       	ld	r18, X+
    1110:	3d 91       	ld	r19, X+
    1112:	4d 91       	ld	r20, X+
    1114:	5c 91       	ld	r21, X
    1116:	51 97       	sbiw	r26, 0x11	; 17
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    1118:	56 96       	adiw	r26, 0x16	; 22
    111a:	ed 90       	ld	r14, X+
    111c:	fd 90       	ld	r15, X+
    111e:	0d 91       	ld	r16, X+
    1120:	1c 91       	ld	r17, X
    1122:	59 97       	sbiw	r26, 0x19	; 25
    1124:	e1 14       	cp	r14, r1
    1126:	f1 04       	cpc	r15, r1
    1128:	01 05       	cpc	r16, r1
    112a:	11 05       	cpc	r17, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <dir_next+0x66>
    112e:	3a c1       	rjmp	.+628    	; 0x13a4 <dir_next+0x2da>
{
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;


	ofs = dp->dptr + SZDIRE;	/* Next entry */
    1130:	aa 24       	eor	r10, r10
    1132:	bb 24       	eor	r11, r11
    1134:	65 01       	movw	r12, r10
    1136:	68 94       	set
    1138:	a5 f8       	bld	r10, 5
    113a:	a2 0e       	add	r10, r18
    113c:	b3 1e       	adc	r11, r19
    113e:	c4 1e       	adc	r12, r20
    1140:	d5 1e       	adc	r13, r21
	if (dp->sect == 0 || ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	ab 16       	cp	r10, r27
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	bb 06       	cpc	r11, r27
    114a:	b0 e2       	ldi	r27, 0x20	; 32
    114c:	cb 06       	cpc	r12, r27
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	db 06       	cpc	r13, r27
    1152:	08 f0       	brcs	.+2      	; 0x1156 <dir_next+0x8c>
    1154:	27 c1       	rjmp	.+590    	; 0x13a4 <dir_next+0x2da>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    1156:	d6 01       	movw	r26, r12
    1158:	c5 01       	movw	r24, r10
    115a:	91 70       	andi	r25, 0x01	; 1
    115c:	a0 70       	andi	r26, 0x00	; 0
    115e:	b0 70       	andi	r27, 0x00	; 0
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	a1 05       	cpc	r26, r1
    1164:	b1 05       	cpc	r27, r1
    1166:	09 f0       	breq	.+2      	; 0x116a <dir_next+0xa0>
    1168:	0a c1       	rjmp	.+532    	; 0x137e <dir_next+0x2b4>
		dp->sect++;				/* Next sector */
    116a:	d8 01       	movw	r26, r16
    116c:	c7 01       	movw	r24, r14
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	a1 1d       	adc	r26, r1
    1172:	b1 1d       	adc	r27, r1
    1174:	ef 81       	ldd	r30, Y+7	; 0x07
    1176:	f8 85       	ldd	r31, Y+8	; 0x08
    1178:	86 8b       	std	Z+22, r24	; 0x16
    117a:	97 8b       	std	Z+23, r25	; 0x17
    117c:	a0 8f       	std	Z+24, r26	; 0x18
    117e:	b1 8f       	std	Z+25, r27	; 0x19

		if (dp->clust == 0) {	/* Static table */
    1180:	e2 88       	ldd	r14, Z+18	; 0x12
    1182:	f3 88       	ldd	r15, Z+19	; 0x13
    1184:	04 89       	ldd	r16, Z+20	; 0x14
    1186:	15 89       	ldd	r17, Z+21	; 0x15
    1188:	e1 14       	cp	r14, r1
    118a:	f1 04       	cpc	r15, r1
    118c:	01 05       	cpc	r16, r1
    118e:	11 05       	cpc	r17, r1
    1190:	f9 f4       	brne	.+62     	; 0x11d0 <dir_next+0x106>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    1192:	a6 01       	movw	r20, r12
    1194:	95 01       	movw	r18, r10
    1196:	68 94       	set
    1198:	14 f8       	bld	r1, 4
    119a:	56 95       	lsr	r21
    119c:	47 95       	ror	r20
    119e:	37 95       	ror	r19
    11a0:	27 95       	ror	r18
    11a2:	16 94       	lsr	r1
    11a4:	d1 f7       	brne	.-12     	; 0x119a <dir_next+0xd0>
    11a6:	d4 01       	movw	r26, r8
    11a8:	17 96       	adiw	r26, 0x07	; 7
    11aa:	8d 91       	ld	r24, X+
    11ac:	9c 91       	ld	r25, X
    11ae:	18 97       	sbiw	r26, 0x08	; 8
    11b0:	a0 e0       	ldi	r26, 0x00	; 0
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	28 17       	cp	r18, r24
    11b6:	39 07       	cpc	r19, r25
    11b8:	4a 07       	cpc	r20, r26
    11ba:	5b 07       	cpc	r21, r27
    11bc:	08 f4       	brcc	.+2      	; 0x11c0 <dir_next+0xf6>
    11be:	df c0       	rjmp	.+446    	; 0x137e <dir_next+0x2b4>
				dp->sect = 0; return FR_NO_FILE;
    11c0:	ef 81       	ldd	r30, Y+7	; 0x07
    11c2:	f8 85       	ldd	r31, Y+8	; 0x08
    11c4:	16 8a       	std	Z+22, r1	; 0x16
    11c6:	17 8a       	std	Z+23, r1	; 0x17
    11c8:	10 8e       	std	Z+24, r1	; 0x18
    11ca:	11 8e       	std	Z+25, r1	; 0x19
    11cc:	84 e0       	ldi	r24, 0x04	; 4
    11ce:	ef c0       	rjmp	.+478    	; 0x13ae <dir_next+0x2e4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
    11d0:	d4 01       	movw	r26, r8
    11d2:	19 96       	adiw	r26, 0x09	; 9
    11d4:	8d 91       	ld	r24, X+
    11d6:	9c 91       	ld	r25, X
    11d8:	1a 97       	sbiw	r26, 0x0a	; 10
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	a0 e0       	ldi	r26, 0x00	; 0
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	a6 01       	movw	r20, r12
    11e2:	95 01       	movw	r18, r10
    11e4:	01 2e       	mov	r0, r17
    11e6:	19 e0       	ldi	r17, 0x09	; 9
    11e8:	56 95       	lsr	r21
    11ea:	47 95       	ror	r20
    11ec:	37 95       	ror	r19
    11ee:	27 95       	ror	r18
    11f0:	1a 95       	dec	r17
    11f2:	d1 f7       	brne	.-12     	; 0x11e8 <dir_next+0x11e>
    11f4:	10 2d       	mov	r17, r0
    11f6:	82 23       	and	r24, r18
    11f8:	93 23       	and	r25, r19
    11fa:	a4 23       	and	r26, r20
    11fc:	b5 23       	and	r27, r21
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	a1 05       	cpc	r26, r1
    1202:	b1 05       	cpc	r27, r1
    1204:	09 f0       	breq	.+2      	; 0x1208 <dir_next+0x13e>
    1206:	bb c0       	rjmp	.+374    	; 0x137e <dir_next+0x2b4>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
    1208:	bf 81       	ldd	r27, Y+7	; 0x07
    120a:	bd 83       	std	Y+5, r27	; 0x05
    120c:	e8 85       	ldd	r30, Y+8	; 0x08
    120e:	ee 83       	std	Y+6, r30	; 0x06
    1210:	8b 2f       	mov	r24, r27
    1212:	9e 2f       	mov	r25, r30
    1214:	b8 01       	movw	r22, r16
    1216:	a7 01       	movw	r20, r14
    1218:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
    121c:	1b 01       	movw	r2, r22
    121e:	2c 01       	movw	r4, r24
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
    1220:	62 30       	cpi	r22, 0x02	; 2
    1222:	71 05       	cpc	r23, r1
    1224:	81 05       	cpc	r24, r1
    1226:	91 05       	cpc	r25, r1
    1228:	08 f4       	brcc	.+2      	; 0x122c <dir_next+0x162>
    122a:	be c0       	rjmp	.+380    	; 0x13a8 <dir_next+0x2de>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	28 16       	cp	r2, r24
    1230:	8f ef       	ldi	r24, 0xFF	; 255
    1232:	38 06       	cpc	r3, r24
    1234:	8f ef       	ldi	r24, 0xFF	; 255
    1236:	48 06       	cpc	r4, r24
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	58 06       	cpc	r5, r24
    123c:	09 f4       	brne	.+2      	; 0x1240 <dir_next+0x176>
    123e:	b6 c0       	rjmp	.+364    	; 0x13ac <dir_next+0x2e2>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
    1240:	f4 01       	movw	r30, r8
    1242:	83 89       	ldd	r24, Z+19	; 0x13
    1244:	94 89       	ldd	r25, Z+20	; 0x14
    1246:	a5 89       	ldd	r26, Z+21	; 0x15
    1248:	b6 89       	ldd	r27, Z+22	; 0x16
    124a:	28 16       	cp	r2, r24
    124c:	39 06       	cpc	r3, r25
    124e:	4a 06       	cpc	r4, r26
    1250:	5b 06       	cpc	r5, r27
    1252:	08 f4       	brcc	.+2      	; 0x1256 <dir_next+0x18c>
    1254:	81 c0       	rjmp	.+258    	; 0x1358 <dir_next+0x28e>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    1256:	67 28       	or	r6, r7
    1258:	51 f4       	brne	.+20     	; 0x126e <dir_next+0x1a4>
						dp->sect = 0; return FR_NO_FILE;
    125a:	af 81       	ldd	r26, Y+7	; 0x07
    125c:	b8 85       	ldd	r27, Y+8	; 0x08
    125e:	56 96       	adiw	r26, 0x16	; 22
    1260:	1d 92       	st	X+, r1
    1262:	1d 92       	st	X+, r1
    1264:	1d 92       	st	X+, r1
    1266:	1c 92       	st	X, r1
    1268:	59 97       	sbiw	r26, 0x19	; 25
    126a:	84 e0       	ldi	r24, 0x04	; 4
    126c:	a0 c0       	rjmp	.+320    	; 0x13ae <dir_next+0x2e4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    126e:	ef 81       	ldd	r30, Y+7	; 0x07
    1270:	f8 85       	ldd	r31, Y+8	; 0x08
    1272:	42 89       	ldd	r20, Z+18	; 0x12
    1274:	53 89       	ldd	r21, Z+19	; 0x13
    1276:	64 89       	ldd	r22, Z+20	; 0x14
    1278:	75 89       	ldd	r23, Z+21	; 0x15
    127a:	8d 81       	ldd	r24, Y+5	; 0x05
    127c:	9e 81       	ldd	r25, Y+6	; 0x06
    127e:	0e 94 16 07 	call	0xe2c	; 0xe2c <create_chain>
    1282:	1b 01       	movw	r2, r22
    1284:	2c 01       	movw	r4, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1286:	61 15       	cp	r22, r1
    1288:	71 05       	cpc	r23, r1
    128a:	81 05       	cpc	r24, r1
    128c:	91 05       	cpc	r25, r1
    128e:	11 f4       	brne	.+4      	; 0x1294 <dir_next+0x1ca>
    1290:	87 e0       	ldi	r24, 0x07	; 7
    1292:	8d c0       	rjmp	.+282    	; 0x13ae <dir_next+0x2e4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    1294:	61 30       	cpi	r22, 0x01	; 1
    1296:	71 05       	cpc	r23, r1
    1298:	81 05       	cpc	r24, r1
    129a:	91 05       	cpc	r25, r1
    129c:	09 f4       	brne	.+2      	; 0x12a0 <dir_next+0x1d6>
    129e:	84 c0       	rjmp	.+264    	; 0x13a8 <dir_next+0x2de>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    12a0:	8f ef       	ldi	r24, 0xFF	; 255
    12a2:	28 16       	cp	r2, r24
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	38 06       	cpc	r3, r24
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	48 06       	cpc	r4, r24
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	58 06       	cpc	r5, r24
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <dir_next+0x1ea>
    12b2:	7c c0       	rjmp	.+248    	; 0x13ac <dir_next+0x2e2>
	DWORD sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    12b4:	c4 01       	movw	r24, r8
    12b6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sync_window>
    12ba:	88 23       	and	r24, r24
    12bc:	09 f0       	breq	.+2      	; 0x12c0 <dir_next+0x1f6>
    12be:	76 c0       	rjmp	.+236    	; 0x13ac <dir_next+0x2e2>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
    12c0:	c4 01       	movw	r24, r8
    12c2:	b2 01       	movw	r22, r4
    12c4:	a1 01       	movw	r20, r2
    12c6:	0e 94 48 02 	call	0x490	; 0x490 <clst2sect>
    12ca:	69 83       	std	Y+1, r22	; 0x01
    12cc:	7a 83       	std	Y+2, r23	; 0x02
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	9c 83       	std	Y+4, r25	; 0x04
	fs->winsect = sect;				/* Set window to top of the cluster */
    12d2:	d4 01       	movw	r26, r8
    12d4:	9b 96       	adiw	r26, 0x2b	; 43
    12d6:	6d 93       	st	X+, r22
    12d8:	7d 93       	st	X+, r23
    12da:	8d 93       	st	X+, r24
    12dc:	9c 93       	st	X, r25
    12de:	9e 97       	sbiw	r26, 0x2e	; 46
	mem_set(fs->win, 0, SS(fs));	/* Clear window buffer */
    12e0:	0f 2e       	mov	r0, r31
    12e2:	ff e2       	ldi	r31, 0x2F	; 47
    12e4:	6f 2e       	mov	r6, r31
    12e6:	77 24       	eor	r7, r7
    12e8:	f0 2d       	mov	r31, r0
    12ea:	68 0c       	add	r6, r8
    12ec:	79 1c       	adc	r7, r9
    12ee:	c3 01       	movw	r24, r6
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	52 e0       	ldi	r21, 0x02	; 2
    12f8:	0e 94 25 02 	call	0x44a	; 0x44a <mem_set>
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
    12fc:	f4 01       	movw	r30, r8
    12fe:	81 85       	ldd	r24, Z+9	; 0x09
    1300:	92 85       	ldd	r25, Z+10	; 0x0a
    1302:	89 2b       	or	r24, r25
    1304:	49 f1       	breq	.+82     	; 0x1358 <dir_next+0x28e>
    1306:	ee 24       	eor	r14, r14
    1308:	ff 24       	eor	r15, r15
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <dir_next+0x258>
    130c:	08 94       	sec
    130e:	e1 1c       	adc	r14, r1
    1310:	f1 1c       	adc	r15, r1
    1312:	d4 01       	movw	r26, r8
    1314:	19 96       	adiw	r26, 0x09	; 9
    1316:	8d 91       	ld	r24, X+
    1318:	9c 91       	ld	r25, X
    131a:	1a 97       	sbiw	r26, 0x0a	; 10
    131c:	e8 16       	cp	r14, r24
    131e:	f9 06       	cpc	r15, r25
    1320:	a8 f4       	brcc	.+42     	; 0x134c <dir_next+0x282>
    1322:	97 01       	movw	r18, r14
    1324:	40 e0       	ldi	r20, 0x00	; 0
    1326:	50 e0       	ldi	r21, 0x00	; 0
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	ab 81       	ldd	r26, Y+3	; 0x03
    132e:	bc 81       	ldd	r27, Y+4	; 0x04
    1330:	28 0f       	add	r18, r24
    1332:	39 1f       	adc	r19, r25
    1334:	4a 1f       	adc	r20, r26
    1336:	5b 1f       	adc	r21, r27
    1338:	d4 01       	movw	r26, r8
    133a:	11 96       	adiw	r26, 0x01	; 1
    133c:	8c 91       	ld	r24, X
    133e:	b3 01       	movw	r22, r6
    1340:	01 e0       	ldi	r16, 0x01	; 1
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
    1348:	88 23       	and	r24, r24
    134a:	01 f3       	breq	.-64     	; 0x130c <dir_next+0x242>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
    134c:	f4 01       	movw	r30, r8
    134e:	81 85       	ldd	r24, Z+9	; 0x09
    1350:	92 85       	ldd	r25, Z+10	; 0x0a
    1352:	e8 16       	cp	r14, r24
    1354:	f9 06       	cpc	r15, r25
    1356:	51 f5       	brne	.+84     	; 0x13ac <dir_next+0x2e2>
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    1358:	af 81       	ldd	r26, Y+7	; 0x07
    135a:	b8 85       	ldd	r27, Y+8	; 0x08
    135c:	52 96       	adiw	r26, 0x12	; 18
    135e:	2d 92       	st	X+, r2
    1360:	3d 92       	st	X+, r3
    1362:	4d 92       	st	X+, r4
    1364:	5c 92       	st	X, r5
    1366:	55 97       	sbiw	r26, 0x15	; 21
				dp->sect = clst2sect(fs, clst);
    1368:	c4 01       	movw	r24, r8
    136a:	b2 01       	movw	r22, r4
    136c:	a1 01       	movw	r20, r2
    136e:	0e 94 48 02 	call	0x490	; 0x490 <clst2sect>
    1372:	ef 81       	ldd	r30, Y+7	; 0x07
    1374:	f8 85       	ldd	r31, Y+8	; 0x08
    1376:	66 8b       	std	Z+22, r22	; 0x16
    1378:	77 8b       	std	Z+23, r23	; 0x17
    137a:	80 8f       	std	Z+24, r24	; 0x18
    137c:	91 8f       	std	Z+25, r25	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    137e:	af 81       	ldd	r26, Y+7	; 0x07
    1380:	b8 85       	ldd	r27, Y+8	; 0x08
    1382:	1e 96       	adiw	r26, 0x0e	; 14
    1384:	ad 92       	st	X+, r10
    1386:	bd 92       	st	X+, r11
    1388:	cd 92       	st	X+, r12
    138a:	dc 92       	st	X, r13
    138c:	51 97       	sbiw	r26, 0x11	; 17
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    138e:	c5 01       	movw	r24, r10
    1390:	91 70       	andi	r25, 0x01	; 1
    1392:	8f 96       	adiw	r24, 0x2f	; 47
    1394:	88 0d       	add	r24, r8
    1396:	99 1d       	adc	r25, r9
    1398:	5b 96       	adiw	r26, 0x1b	; 27
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	5a 97       	sbiw	r26, 0x1a	; 26
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	05 c0       	rjmp	.+10     	; 0x13ae <dir_next+0x2e4>

	return FR_OK;
    13a4:	84 e0       	ldi	r24, 0x04	; 4
    13a6:	03 c0       	rjmp	.+6      	; 0x13ae <dir_next+0x2e4>
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	01 c0       	rjmp	.+2      	; 0x13ae <dir_next+0x2e4>
    13ac:	81 e0       	ldi	r24, 0x01	; 1
}
    13ae:	28 96       	adiw	r28, 0x08	; 8
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	de bf       	out	0x3e, r29	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	cd bf       	out	0x3d, r28	; 61
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	9f 90       	pop	r9
    13d0:	8f 90       	pop	r8
    13d2:	7f 90       	pop	r7
    13d4:	6f 90       	pop	r6
    13d6:	5f 90       	pop	r5
    13d8:	4f 90       	pop	r4
    13da:	3f 90       	pop	r3
    13dc:	2f 90       	pop	r2
    13de:	08 95       	ret

000013e0 <check_fs>:

static BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	DWORD sect			/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    13e6:	1b 82       	std	Y+3, r1	; 0x03
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	af ef       	ldi	r26, 0xFF	; 255
    13ee:	bf ef       	ldi	r27, 0xFF	; 255
    13f0:	8b a7       	std	Y+43, r24	; 0x2b
    13f2:	9c a7       	std	Y+44, r25	; 0x2c
    13f4:	ad a7       	std	Y+45, r26	; 0x2d
    13f6:	be a7       	std	Y+46, r27	; 0x2e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
    13f8:	ce 01       	movw	r24, r28
    13fa:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    13fe:	88 23       	and	r24, r24
    1400:	11 f0       	breq	.+4      	; 0x1406 <check_fs+0x26>
    1402:	84 e0       	ldi	r24, 0x04	; 4
    1404:	2a c0       	rjmp	.+84     	; 0x145a <check_fs+0x7a>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always here regardless of the sector size) */
    1406:	ce 01       	movw	r24, r28
    1408:	83 5d       	subi	r24, 0xD3	; 211
    140a:	9d 4f       	sbci	r25, 0xFD	; 253
    140c:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1410:	85 55       	subi	r24, 0x55	; 85
    1412:	9a 4a       	sbci	r25, 0xAA	; 170
    1414:	11 f0       	breq	.+4      	; 0x141a <check_fs+0x3a>
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	20 c0       	rjmp	.+64     	; 0x145a <check_fs+0x7a>

#if FF_FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* Check if exFAT VBR */
#endif
	if (fs->win[BS_JmpBoot] == 0xE9 || fs->win[BS_JmpBoot] == 0xEB || fs->win[BS_JmpBoot] == 0xE8) {	/* Valid JumpBoot code? */
    141a:	8f a5       	ldd	r24, Y+47	; 0x2f
    141c:	89 3e       	cpi	r24, 0xE9	; 233
    141e:	21 f0       	breq	.+8      	; 0x1428 <check_fs+0x48>
    1420:	8b 3e       	cpi	r24, 0xEB	; 235
    1422:	11 f0       	breq	.+4      	; 0x1428 <check_fs+0x48>
    1424:	88 3e       	cpi	r24, 0xE8	; 232
    1426:	c1 f4       	brne	.+48     	; 0x1458 <check_fs+0x78>
		if (!mem_cmp(fs->win + BS_FilSysType, "FAT", 3)) return 0;		/* Is it an FAT VBR? */
    1428:	ce 01       	movw	r24, r28
    142a:	8b 59       	subi	r24, 0x9B	; 155
    142c:	9f 4f       	sbci	r25, 0xFF	; 255
    142e:	64 e0       	ldi	r22, 0x04	; 4
    1430:	71 e0       	ldi	r23, 0x01	; 1
    1432:	43 e0       	ldi	r20, 0x03	; 3
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	0e 94 2b 02 	call	0x456	; 0x456 <mem_cmp>
    143a:	89 2b       	or	r24, r25
    143c:	59 f0       	breq	.+22     	; 0x1454 <check_fs+0x74>
		if (!mem_cmp(fs->win + BS_FilSysType32, "FAT32", 5)) return 0;	/* Is it an FAT32 VBR? */
    143e:	ce 01       	movw	r24, r28
    1440:	8f 57       	subi	r24, 0x7F	; 127
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	68 e0       	ldi	r22, 0x08	; 8
    1446:	71 e0       	ldi	r23, 0x01	; 1
    1448:	45 e0       	ldi	r20, 0x05	; 5
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	0e 94 2b 02 	call	0x456	; 0x456 <mem_cmp>
    1450:	89 2b       	or	r24, r25
    1452:	11 f4       	brne	.+4      	; 0x1458 <check_fs+0x78>
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	01 c0       	rjmp	.+2      	; 0x145a <check_fs+0x7a>
    1458:	82 e0       	ldi	r24, 0x02	; 2
	}
	return 2;	/* Valid BS but not FAT */
}
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    1460:	2f 92       	push	r2
    1462:	3f 92       	push	r3
    1464:	4f 92       	push	r4
    1466:	5f 92       	push	r5
    1468:	6f 92       	push	r6
    146a:	7f 92       	push	r7
    146c:	8f 92       	push	r8
    146e:	9f 92       	push	r9
    1470:	af 92       	push	r10
    1472:	bf 92       	push	r11
    1474:	cf 92       	push	r12
    1476:	df 92       	push	r13
    1478:	ef 92       	push	r14
    147a:	ff 92       	push	r15
    147c:	0f 93       	push	r16
    147e:	1f 93       	push	r17
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	29 97       	sbiw	r28, 0x09	; 9
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	6c 01       	movw	r12, r24
    1496:	16 2f       	mov	r17, r22
    1498:	07 2f       	mov	r16, r23
    149a:	3a 01       	movw	r6, r20
    149c:	3f 83       	std	Y+7, r19	; 0x07
    149e:	2e 83       	std	Y+6, r18	; 0x06
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    14a0:	d9 01       	movw	r26, r18
    14a2:	1d 92       	st	X+, r1
    14a4:	1c 92       	st	X, r1
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
    14a6:	88 87       	std	Y+8, r24	; 0x08
    14a8:	d9 86       	std	Y+9, r13	; 0x09
    14aa:	9d 2d       	mov	r25, r13
    14ac:	be 01       	movw	r22, r28
    14ae:	6f 5f       	subi	r22, 0xFF	; 255
    14b0:	7f 4f       	sbci	r23, 0xFF	; 255
    14b2:	0e 94 27 03 	call	0x64e	; 0x64e <validate>
    14b6:	8b 83       	std	Y+3, r24	; 0x03
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <f_write+0x5e>
    14bc:	a0 c1       	rjmp	.+832    	; 0x17fe <f_write+0x39e>
    14be:	f6 01       	movw	r30, r12
    14c0:	f7 85       	ldd	r31, Z+15	; 0x0f
    14c2:	fb 83       	std	Y+3, r31	; 0x03
    14c4:	ff 23       	and	r31, r31
    14c6:	09 f0       	breq	.+2      	; 0x14ca <f_write+0x6a>
    14c8:	9a c1       	rjmp	.+820    	; 0x17fe <f_write+0x39e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    14ca:	d6 01       	movw	r26, r12
    14cc:	1e 96       	adiw	r26, 0x0e	; 14
    14ce:	8c 91       	ld	r24, X
    14d0:	81 fd       	sbrc	r24, 1
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <f_write+0x7a>
    14d4:	b7 e0       	ldi	r27, 0x07	; 7
    14d6:	bb 83       	std	Y+3, r27	; 0x03
    14d8:	92 c1       	rjmp	.+804    	; 0x17fe <f_write+0x39e>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    14da:	f6 01       	movw	r30, r12
    14dc:	20 89       	ldd	r18, Z+16	; 0x10
    14de:	31 89       	ldd	r19, Z+17	; 0x11
    14e0:	42 89       	ldd	r20, Z+18	; 0x12
    14e2:	53 89       	ldd	r21, Z+19	; 0x13
    14e4:	c3 01       	movw	r24, r6
    14e6:	a0 e0       	ldi	r26, 0x00	; 0
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	a4 1f       	adc	r26, r20
    14f0:	b5 1f       	adc	r27, r21
    14f2:	82 17       	cp	r24, r18
    14f4:	93 07       	cpc	r25, r19
    14f6:	a4 07       	cpc	r26, r20
    14f8:	b5 07       	cpc	r27, r21
    14fa:	18 f4       	brcc	.+6      	; 0x1502 <f_write+0xa2>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    14fc:	39 01       	movw	r6, r18
    14fe:	60 94       	com	r6
    1500:	70 94       	com	r7
	}

	for ( ;  btw;							/* Repeat until all data written */
    1502:	61 14       	cp	r6, r1
    1504:	71 04       	cpc	r7, r1
    1506:	09 f4       	brne	.+2      	; 0x150a <f_write+0xaa>
    1508:	73 c1       	rjmp	.+742    	; 0x17f0 <f_write+0x390>
{
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
    150a:	21 2f       	mov	r18, r17
    150c:	30 2f       	mov	r19, r16
    150e:	19 01       	movw	r2, r18
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1510:	b6 01       	movw	r22, r12
    1512:	6e 5d       	subi	r22, 0xDE	; 222
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	7d 83       	std	Y+5, r23	; 0x05
    1518:	6c 83       	std	Y+4, r22	; 0x04
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    151a:	d6 01       	movw	r26, r12
    151c:	50 96       	adiw	r26, 0x10	; 16
    151e:	ed 90       	ld	r14, X+
    1520:	fd 90       	ld	r15, X+
    1522:	0d 91       	ld	r16, X+
    1524:	1c 91       	ld	r17, X
    1526:	53 97       	sbiw	r26, 0x13	; 19
    1528:	d8 01       	movw	r26, r16
    152a:	c7 01       	movw	r24, r14
    152c:	91 70       	andi	r25, 0x01	; 1
    152e:	a0 70       	andi	r26, 0x00	; 0
    1530:	b0 70       	andi	r27, 0x00	; 0
    1532:	00 97       	sbiw	r24, 0x00	; 0
    1534:	a1 05       	cpc	r26, r1
    1536:	b1 05       	cpc	r27, r1
    1538:	09 f0       	breq	.+2      	; 0x153c <f_write+0xdc>
    153a:	0a c1       	rjmp	.+532    	; 0x1750 <f_write+0x2f0>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    153c:	a8 01       	movw	r20, r16
    153e:	97 01       	movw	r18, r14
    1540:	01 2e       	mov	r0, r17
    1542:	19 e0       	ldi	r17, 0x09	; 9
    1544:	56 95       	lsr	r21
    1546:	47 95       	ror	r20
    1548:	37 95       	ror	r19
    154a:	27 95       	ror	r18
    154c:	1a 95       	dec	r17
    154e:	d1 f7       	brne	.-12     	; 0x1544 <f_write+0xe4>
    1550:	10 2d       	mov	r17, r0
    1552:	e9 81       	ldd	r30, Y+1	; 0x01
    1554:	fa 81       	ldd	r31, Y+2	; 0x02
    1556:	81 85       	ldd	r24, Z+9	; 0x09
    1558:	92 85       	ldd	r25, Z+10	; 0x0a
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	2c 01       	movw	r4, r24
    155e:	42 22       	and	r4, r18
    1560:	53 22       	and	r5, r19
			if (csect == 0) {				/* On the cluster boundary? */
    1562:	41 14       	cp	r4, r1
    1564:	51 04       	cpc	r5, r1
    1566:	09 f0       	breq	.+2      	; 0x156a <f_write+0x10a>
    1568:	59 c0       	rjmp	.+178    	; 0x161c <f_write+0x1bc>
				if (fp->fptr == 0) {		/* On the top of the file? */
    156a:	e1 14       	cp	r14, r1
    156c:	f1 04       	cpc	r15, r1
    156e:	01 05       	cpc	r16, r1
    1570:	11 05       	cpc	r17, r1
    1572:	a9 f4       	brne	.+42     	; 0x159e <f_write+0x13e>
					clst = fp->obj.sclust;	/* Follow from the origin */
    1574:	f6 01       	movw	r30, r12
    1576:	26 81       	ldd	r18, Z+6	; 0x06
    1578:	37 81       	ldd	r19, Z+7	; 0x07
    157a:	40 85       	ldd	r20, Z+8	; 0x08
    157c:	51 85       	ldd	r21, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    157e:	21 15       	cp	r18, r1
    1580:	31 05       	cpc	r19, r1
    1582:	41 05       	cpc	r20, r1
    1584:	51 05       	cpc	r21, r1
    1586:	f1 f4       	brne	.+60     	; 0x15c4 <f_write+0x164>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    1588:	88 85       	ldd	r24, Y+8	; 0x08
    158a:	99 85       	ldd	r25, Y+9	; 0x09
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	0e 94 16 07 	call	0xe2c	; 0xe2c <create_chain>
    1598:	9b 01       	movw	r18, r22
    159a:	ac 01       	movw	r20, r24
    159c:	0d c0       	rjmp	.+26     	; 0x15b8 <f_write+0x158>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    159e:	d6 01       	movw	r26, r12
    15a0:	54 96       	adiw	r26, 0x14	; 20
    15a2:	4d 91       	ld	r20, X+
    15a4:	5d 91       	ld	r21, X+
    15a6:	6d 91       	ld	r22, X+
    15a8:	7c 91       	ld	r23, X
    15aa:	57 97       	sbiw	r26, 0x17	; 23
    15ac:	88 85       	ldd	r24, Y+8	; 0x08
    15ae:	99 85       	ldd	r25, Y+9	; 0x09
    15b0:	0e 94 16 07 	call	0xe2c	; 0xe2c <create_chain>
    15b4:	9b 01       	movw	r18, r22
    15b6:	ac 01       	movw	r20, r24
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    15b8:	21 15       	cp	r18, r1
    15ba:	31 05       	cpc	r19, r1
    15bc:	41 05       	cpc	r20, r1
    15be:	51 05       	cpc	r21, r1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <f_write+0x164>
    15c2:	16 c1       	rjmp	.+556    	; 0x17f0 <f_write+0x390>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    15c4:	21 30       	cpi	r18, 0x01	; 1
    15c6:	31 05       	cpc	r19, r1
    15c8:	41 05       	cpc	r20, r1
    15ca:	51 05       	cpc	r21, r1
    15cc:	29 f4       	brne	.+10     	; 0x15d8 <f_write+0x178>
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	f6 01       	movw	r30, r12
    15d2:	87 87       	std	Z+15, r24	; 0x0f
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	13 c1       	rjmp	.+550    	; 0x17fe <f_write+0x39e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    15d8:	2f 3f       	cpi	r18, 0xFF	; 255
    15da:	ff ef       	ldi	r31, 0xFF	; 255
    15dc:	3f 07       	cpc	r19, r31
    15de:	ff ef       	ldi	r31, 0xFF	; 255
    15e0:	4f 07       	cpc	r20, r31
    15e2:	ff ef       	ldi	r31, 0xFF	; 255
    15e4:	5f 07       	cpc	r21, r31
    15e6:	31 f4       	brne	.+12     	; 0x15f4 <f_write+0x194>
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	d6 01       	movw	r26, r12
    15ec:	1f 96       	adiw	r26, 0x0f	; 15
    15ee:	8c 93       	st	X, r24
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	05 c1       	rjmp	.+522    	; 0x17fe <f_write+0x39e>
				fp->clust = clst;			/* Update current cluster */
    15f4:	f6 01       	movw	r30, r12
    15f6:	24 8b       	std	Z+20, r18	; 0x14
    15f8:	35 8b       	std	Z+21, r19	; 0x15
    15fa:	46 8b       	std	Z+22, r20	; 0x16
    15fc:	57 8b       	std	Z+23, r21	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    15fe:	86 81       	ldd	r24, Z+6	; 0x06
    1600:	97 81       	ldd	r25, Z+7	; 0x07
    1602:	a0 85       	ldd	r26, Z+8	; 0x08
    1604:	b1 85       	ldd	r27, Z+9	; 0x09
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	a1 05       	cpc	r26, r1
    160a:	b1 05       	cpc	r27, r1
    160c:	39 f4       	brne	.+14     	; 0x161c <f_write+0x1bc>
    160e:	d6 01       	movw	r26, r12
    1610:	16 96       	adiw	r26, 0x06	; 6
    1612:	2d 93       	st	X+, r18
    1614:	3d 93       	st	X+, r19
    1616:	4d 93       	st	X+, r20
    1618:	5c 93       	st	X, r21
    161a:	19 97       	sbiw	r26, 0x09	; 9
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    161c:	f6 01       	movw	r30, r12
    161e:	86 85       	ldd	r24, Z+14	; 0x0e
    1620:	88 23       	and	r24, r24
    1622:	f4 f4       	brge	.+60     	; 0x1660 <f_write+0x200>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    1624:	e9 81       	ldd	r30, Y+1	; 0x01
    1626:	fa 81       	ldd	r31, Y+2	; 0x02
    1628:	d6 01       	movw	r26, r12
    162a:	58 96       	adiw	r26, 0x18	; 24
    162c:	2d 91       	ld	r18, X+
    162e:	3d 91       	ld	r19, X+
    1630:	4d 91       	ld	r20, X+
    1632:	5c 91       	ld	r21, X
    1634:	5b 97       	sbiw	r26, 0x1b	; 27
    1636:	81 81       	ldd	r24, Z+1	; 0x01
    1638:	6c 81       	ldd	r22, Y+4	; 0x04
    163a:	7d 81       	ldd	r23, Y+5	; 0x05
    163c:	01 e0       	ldi	r16, 0x01	; 1
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
    1644:	88 23       	and	r24, r24
    1646:	29 f0       	breq	.+10     	; 0x1652 <f_write+0x1f2>
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	f6 01       	movw	r30, r12
    164c:	87 87       	std	Z+15, r24	; 0x0f
    164e:	8b 83       	std	Y+3, r24	; 0x03
    1650:	d6 c0       	rjmp	.+428    	; 0x17fe <f_write+0x39e>
				fp->flag &= (BYTE)~FA_DIRTY;
    1652:	d6 01       	movw	r26, r12
    1654:	1e 96       	adiw	r26, 0x0e	; 14
    1656:	8c 91       	ld	r24, X
    1658:	1e 97       	sbiw	r26, 0x0e	; 14
    165a:	8f 77       	andi	r24, 0x7F	; 127
    165c:	1e 96       	adiw	r26, 0x0e	; 14
    165e:	8c 93       	st	X, r24
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
    1660:	09 81       	ldd	r16, Y+1	; 0x01
    1662:	1a 81       	ldd	r17, Y+2	; 0x02
    1664:	f6 01       	movw	r30, r12
    1666:	44 89       	ldd	r20, Z+20	; 0x14
    1668:	55 89       	ldd	r21, Z+21	; 0x15
    166a:	66 89       	ldd	r22, Z+22	; 0x16
    166c:	77 89       	ldd	r23, Z+23	; 0x17
    166e:	c8 01       	movw	r24, r16
    1670:	0e 94 48 02 	call	0x490	; 0x490 <clst2sect>
    1674:	9b 01       	movw	r18, r22
    1676:	ac 01       	movw	r20, r24
			if (sect == 0) ABORT(fs, FR_INT_ERR);
    1678:	61 15       	cp	r22, r1
    167a:	71 05       	cpc	r23, r1
    167c:	81 05       	cpc	r24, r1
    167e:	91 05       	cpc	r25, r1
    1680:	31 f4       	brne	.+12     	; 0x168e <f_write+0x22e>
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	d6 01       	movw	r26, r12
    1686:	1f 96       	adiw	r26, 0x0f	; 15
    1688:	8c 93       	st	X, r24
    168a:	8b 83       	std	Y+3, r24	; 0x03
    168c:	b8 c0       	rjmp	.+368    	; 0x17fe <f_write+0x39e>
			sect += csect;
    168e:	c2 01       	movw	r24, r4
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	4c 01       	movw	r8, r24
    1696:	5d 01       	movw	r10, r26
    1698:	82 0e       	add	r8, r18
    169a:	93 1e       	adc	r9, r19
    169c:	a4 1e       	adc	r10, r20
    169e:	b5 1e       	adc	r11, r21
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    16a0:	73 01       	movw	r14, r6
    16a2:	ef 2c       	mov	r14, r15
    16a4:	ff 24       	eor	r15, r15
    16a6:	e6 94       	lsr	r14
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
    16a8:	e1 14       	cp	r14, r1
    16aa:	f1 04       	cpc	r15, r1
    16ac:	09 f1       	breq	.+66     	; 0x16f0 <f_write+0x290>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    16ae:	f8 01       	movw	r30, r16
    16b0:	21 85       	ldd	r18, Z+9	; 0x09
    16b2:	32 85       	ldd	r19, Z+10	; 0x0a
    16b4:	c7 01       	movw	r24, r14
    16b6:	84 0d       	add	r24, r4
    16b8:	95 1d       	adc	r25, r5
    16ba:	28 17       	cp	r18, r24
    16bc:	39 07       	cpc	r19, r25
    16be:	18 f4       	brcc	.+6      	; 0x16c6 <f_write+0x266>
					cc = fs->csize - csect;
    16c0:	79 01       	movw	r14, r18
    16c2:	e4 18       	sub	r14, r4
    16c4:	f5 08       	sbc	r15, r5
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    16c6:	d8 01       	movw	r26, r16
    16c8:	11 96       	adiw	r26, 0x01	; 1
    16ca:	8c 91       	ld	r24, X
    16cc:	b1 01       	movw	r22, r2
    16ce:	a5 01       	movw	r20, r10
    16d0:	94 01       	movw	r18, r8
    16d2:	87 01       	movw	r16, r14
    16d4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
    16d8:	88 23       	and	r24, r24
    16da:	29 f0       	breq	.+10     	; 0x16e6 <f_write+0x286>
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	f6 01       	movw	r30, r12
    16e0:	87 87       	std	Z+15, r24	; 0x0f
    16e2:	8b 83       	std	Y+3, r24	; 0x03
    16e4:	8c c0       	rjmp	.+280    	; 0x17fe <f_write+0x39e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= (BYTE)~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    16e6:	87 01       	movw	r16, r14
    16e8:	10 2f       	mov	r17, r16
    16ea:	00 27       	eor	r16, r16
    16ec:	11 0f       	add	r17, r17
    16ee:	50 c0       	rjmp	.+160    	; 0x1790 <f_write+0x330>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    16f0:	f6 01       	movw	r30, r12
    16f2:	80 8d       	ldd	r24, Z+24	; 0x18
    16f4:	91 8d       	ldd	r25, Z+25	; 0x19
    16f6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    16f8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    16fa:	88 15       	cp	r24, r8
    16fc:	99 05       	cpc	r25, r9
    16fe:	aa 05       	cpc	r26, r10
    1700:	bb 05       	cpc	r27, r11
    1702:	f9 f0       	breq	.+62     	; 0x1742 <f_write+0x2e2>
    1704:	20 89       	ldd	r18, Z+16	; 0x10
    1706:	31 89       	ldd	r19, Z+17	; 0x11
    1708:	42 89       	ldd	r20, Z+18	; 0x12
    170a:	53 89       	ldd	r21, Z+19	; 0x13
    170c:	82 85       	ldd	r24, Z+10	; 0x0a
    170e:	93 85       	ldd	r25, Z+11	; 0x0b
    1710:	a4 85       	ldd	r26, Z+12	; 0x0c
    1712:	b5 85       	ldd	r27, Z+13	; 0x0d
    1714:	28 17       	cp	r18, r24
    1716:	39 07       	cpc	r19, r25
    1718:	4a 07       	cpc	r20, r26
    171a:	5b 07       	cpc	r21, r27
    171c:	90 f4       	brcc	.+36     	; 0x1742 <f_write+0x2e2>
    171e:	d8 01       	movw	r26, r16
    1720:	11 96       	adiw	r26, 0x01	; 1
    1722:	8c 91       	ld	r24, X
    1724:	6c 81       	ldd	r22, Y+4	; 0x04
    1726:	7d 81       	ldd	r23, Y+5	; 0x05
    1728:	a5 01       	movw	r20, r10
    172a:	94 01       	movw	r18, r8
    172c:	01 e0       	ldi	r16, 0x01	; 1
    172e:	10 e0       	ldi	r17, 0x00	; 0
    1730:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <disk_read>
    1734:	88 23       	and	r24, r24
    1736:	29 f0       	breq	.+10     	; 0x1742 <f_write+0x2e2>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	f6 01       	movw	r30, r12
    173c:	87 87       	std	Z+15, r24	; 0x0f
    173e:	8b 83       	std	Y+3, r24	; 0x03
    1740:	5e c0       	rjmp	.+188    	; 0x17fe <f_write+0x39e>
			}
#endif
			fp->sect = sect;
    1742:	d6 01       	movw	r26, r12
    1744:	58 96       	adiw	r26, 0x18	; 24
    1746:	8d 92       	st	X+, r8
    1748:	9d 92       	st	X+, r9
    174a:	ad 92       	st	X+, r10
    174c:	bc 92       	st	X, r11
    174e:	5b 97       	sbiw	r26, 0x1b	; 27
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    1750:	f6 01       	movw	r30, r12
    1752:	20 89       	ldd	r18, Z+16	; 0x10
    1754:	31 89       	ldd	r19, Z+17	; 0x11
    1756:	42 89       	ldd	r20, Z+18	; 0x12
    1758:	53 89       	ldd	r21, Z+19	; 0x13
    175a:	c9 01       	movw	r24, r18
    175c:	91 70       	andi	r25, 0x01	; 1
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	72 e0       	ldi	r23, 0x02	; 2
    1762:	68 1b       	sub	r22, r24
    1764:	79 0b       	sbc	r23, r25
    1766:	83 01       	movw	r16, r6
    1768:	66 15       	cp	r22, r6
    176a:	77 05       	cpc	r23, r7
    176c:	08 f4       	brcc	.+2      	; 0x1770 <f_write+0x310>
    176e:	8b 01       	movw	r16, r22
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    1770:	c9 01       	movw	r24, r18
    1772:	91 70       	andi	r25, 0x01	; 1
    1774:	82 96       	adiw	r24, 0x22	; 34
    1776:	8c 0d       	add	r24, r12
    1778:	9d 1d       	adc	r25, r13
    177a:	b1 01       	movw	r22, r2
    177c:	a8 01       	movw	r20, r16
    177e:	0e 94 0d 02 	call	0x41a	; 0x41a <mem_cpy>
		fp->flag |= FA_DIRTY;
    1782:	d6 01       	movw	r26, r12
    1784:	1e 96       	adiw	r26, 0x0e	; 14
    1786:	8c 91       	ld	r24, X
    1788:	1e 97       	sbiw	r26, 0x0e	; 14
    178a:	80 68       	ori	r24, 0x80	; 128
    178c:	1e 96       	adiw	r26, 0x0e	; 14
    178e:	8c 93       	st	X, r24
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    1790:	60 1a       	sub	r6, r16
    1792:	71 0a       	sbc	r7, r17
    1794:	ee 81       	ldd	r30, Y+6	; 0x06
    1796:	ff 81       	ldd	r31, Y+7	; 0x07
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	80 0f       	add	r24, r16
    179e:	91 1f       	adc	r25, r17
    17a0:	91 83       	std	Z+1, r25	; 0x01
    17a2:	80 83       	st	Z, r24
    17a4:	c8 01       	movw	r24, r16
    17a6:	a0 e0       	ldi	r26, 0x00	; 0
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	f6 01       	movw	r30, r12
    17ac:	20 89       	ldd	r18, Z+16	; 0x10
    17ae:	31 89       	ldd	r19, Z+17	; 0x11
    17b0:	42 89       	ldd	r20, Z+18	; 0x12
    17b2:	53 89       	ldd	r21, Z+19	; 0x13
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	a4 1f       	adc	r26, r20
    17ba:	b5 1f       	adc	r27, r21
    17bc:	80 8b       	std	Z+16, r24	; 0x10
    17be:	91 8b       	std	Z+17, r25	; 0x11
    17c0:	a2 8b       	std	Z+18, r26	; 0x12
    17c2:	b3 8b       	std	Z+19, r27	; 0x13
    17c4:	22 85       	ldd	r18, Z+10	; 0x0a
    17c6:	33 85       	ldd	r19, Z+11	; 0x0b
    17c8:	44 85       	ldd	r20, Z+12	; 0x0c
    17ca:	55 85       	ldd	r21, Z+13	; 0x0d
    17cc:	82 17       	cp	r24, r18
    17ce:	93 07       	cpc	r25, r19
    17d0:	a4 07       	cpc	r26, r20
    17d2:	b5 07       	cpc	r27, r21
    17d4:	10 f4       	brcc	.+4      	; 0x17da <f_write+0x37a>
    17d6:	da 01       	movw	r26, r20
    17d8:	c9 01       	movw	r24, r18
    17da:	f6 01       	movw	r30, r12
    17dc:	82 87       	std	Z+10, r24	; 0x0a
    17de:	93 87       	std	Z+11, r25	; 0x0b
    17e0:	a4 87       	std	Z+12, r26	; 0x0c
    17e2:	b5 87       	std	Z+13, r27	; 0x0d
	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    17e4:	61 14       	cp	r6, r1
    17e6:	71 04       	cpc	r7, r1
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <f_write+0x390>
		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
    17ea:	20 0e       	add	r2, r16
    17ec:	31 1e       	adc	r3, r17
    17ee:	95 ce       	rjmp	.-726    	; 0x151a <f_write+0xba>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
    17f0:	d6 01       	movw	r26, r12
    17f2:	1e 96       	adiw	r26, 0x0e	; 14
    17f4:	8c 91       	ld	r24, X
    17f6:	1e 97       	sbiw	r26, 0x0e	; 14
    17f8:	80 64       	ori	r24, 0x40	; 64
    17fa:	1e 96       	adiw	r26, 0x0e	; 14
    17fc:	8c 93       	st	X, r24

	LEAVE_FF(fs, FR_OK);
}
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	29 96       	adiw	r28, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	bf 90       	pop	r11
    181e:	af 90       	pop	r10
    1820:	9f 90       	pop	r9
    1822:	8f 90       	pop	r8
    1824:	7f 90       	pop	r7
    1826:	6f 90       	pop	r6
    1828:	5f 90       	pop	r5
    182a:	4f 90       	pop	r4
    182c:	3f 90       	pop	r3
    182e:	2f 90       	pop	r2
    1830:	08 95       	ret

00001832 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    1832:	af 92       	push	r10
    1834:	bf 92       	push	r11
    1836:	df 92       	push	r13
    1838:	ef 92       	push	r14
    183a:	ff 92       	push	r15
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <f_sync+0x14>
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	7c 01       	movw	r14, r24
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
    184c:	be 01       	movw	r22, r28
    184e:	6f 5f       	subi	r22, 0xFF	; 255
    1850:	7f 4f       	sbci	r23, 0xFF	; 255
    1852:	0e 94 27 03 	call	0x64e	; 0x64e <validate>
    1856:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    1858:	88 23       	and	r24, r24
    185a:	09 f0       	breq	.+2      	; 0x185e <f_sync+0x2c>
    185c:	d2 c0       	rjmp	.+420    	; 0x1a02 <f_sync+0x1d0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    185e:	d7 01       	movw	r26, r14
    1860:	1e 96       	adiw	r26, 0x0e	; 14
    1862:	8c 91       	ld	r24, X
    1864:	1e 97       	sbiw	r26, 0x0e	; 14
    1866:	86 ff       	sbrs	r24, 6
    1868:	cc c0       	rjmp	.+408    	; 0x1a02 <f_sync+0x1d0>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    186a:	88 23       	and	r24, r24
    186c:	cc f4       	brge	.+50     	; 0x18a0 <f_sync+0x6e>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	b7 01       	movw	r22, r14
    1874:	6e 5d       	subi	r22, 0xDE	; 222
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	58 96       	adiw	r26, 0x18	; 24
    187a:	2d 91       	ld	r18, X+
    187c:	3d 91       	ld	r19, X+
    187e:	4d 91       	ld	r20, X+
    1880:	5c 91       	ld	r21, X
    1882:	5b 97       	sbiw	r26, 0x1b	; 27
    1884:	81 81       	ldd	r24, Z+1	; 0x01
    1886:	01 e0       	ldi	r16, 0x01	; 1
    1888:	10 e0       	ldi	r17, 0x00	; 0
    188a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
    188e:	88 23       	and	r24, r24
    1890:	19 f0       	breq	.+6      	; 0x1898 <f_sync+0x66>
    1892:	dd 24       	eor	r13, r13
    1894:	d3 94       	inc	r13
    1896:	b5 c0       	rjmp	.+362    	; 0x1a02 <f_sync+0x1d0>
				fp->flag &= (BYTE)~FA_DIRTY;
    1898:	f7 01       	movw	r30, r14
    189a:	86 85       	ldd	r24, Z+14	; 0x0e
    189c:	8f 77       	andi	r24, 0x7F	; 127
    189e:	86 87       	std	Z+14, r24	; 0x0e
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    18a0:	d7 01       	movw	r26, r14
    18a2:	5c 96       	adiw	r26, 0x1c	; 28
    18a4:	4d 91       	ld	r20, X+
    18a6:	5d 91       	ld	r21, X+
    18a8:	6d 91       	ld	r22, X+
    18aa:	7c 91       	ld	r23, X
    18ac:	5f 97       	sbiw	r26, 0x1f	; 31
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	9a 81       	ldd	r25, Y+2	; 0x02
    18b2:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    18b6:	d8 2e       	mov	r13, r24
				if (res == FR_OK) {
    18b8:	88 23       	and	r24, r24
    18ba:	09 f0       	breq	.+2      	; 0x18be <f_sync+0x8c>
    18bc:	a2 c0       	rjmp	.+324    	; 0x1a02 <f_sync+0x1d0>
					dir = fp->dir_ptr;
    18be:	f7 01       	movw	r30, r14
    18c0:	00 a1       	ldd	r16, Z+32	; 0x20
    18c2:	11 a1       	ldd	r17, Z+33	; 0x21
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
    18c4:	f8 01       	movw	r30, r16
    18c6:	3b 96       	adiw	r30, 0x0b	; 11
    18c8:	80 81       	ld	r24, Z
    18ca:	80 62       	ori	r24, 0x20	; 32
    18cc:	80 83       	st	Z, r24
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
    18ce:	d7 01       	movw	r26, r14
    18d0:	16 96       	adiw	r26, 0x06	; 6
    18d2:	2d 91       	ld	r18, X+
    18d4:	3d 91       	ld	r19, X+
    18d6:	4d 91       	ld	r20, X+
    18d8:	5c 91       	ld	r21, X
    18da:	19 97       	sbiw	r26, 0x09	; 9
    18dc:	8d 91       	ld	r24, X+
    18de:	9c 91       	ld	r25, X
    18e0:	b8 01       	movw	r22, r16
    18e2:	0e 94 b8 02 	call	0x570	; 0x570 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    18e6:	f7 01       	movw	r30, r14
    18e8:	42 85       	ldd	r20, Z+10	; 0x0a
    18ea:	53 85       	ldd	r21, Z+11	; 0x0b
    18ec:	64 85       	ldd	r22, Z+12	; 0x0c
    18ee:	75 85       	ldd	r23, Z+13	; 0x0d
    18f0:	c8 01       	movw	r24, r16
    18f2:	4c 96       	adiw	r24, 0x1c	; 28
    18f4:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
    18f8:	c8 01       	movw	r24, r16
    18fa:	46 96       	adiw	r24, 0x16	; 22
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	61 e2       	ldi	r22, 0x21	; 33
    1902:	7c e4       	ldi	r23, 0x4C	; 76
    1904:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
    1908:	c8 01       	movw	r24, r16
    190a:	42 96       	adiw	r24, 0x12	; 18
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <st_word>
					fs->wflag = 1;
    1914:	e9 81       	ldd	r30, Y+1	; 0x01
    1916:	fa 81       	ldd	r31, Y+2	; 0x02
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	83 83       	std	Z+3, r24	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    191c:	a9 80       	ldd	r10, Y+1	; 0x01
    191e:	ba 80       	ldd	r11, Y+2	; 0x02
)
{
	FRESULT res;


	res = sync_window(fs);
    1920:	c5 01       	movw	r24, r10
    1922:	0e 94 52 03 	call	0x6a4	; 0x6a4 <sync_window>
    1926:	d8 2e       	mov	r13, r24
	if (res == FR_OK) {
    1928:	88 23       	and	r24, r24
    192a:	09 f0       	breq	.+2      	; 0x192e <f_sync+0xfc>
    192c:	66 c0       	rjmp	.+204    	; 0x19fa <f_sync+0x1c8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
    192e:	d5 01       	movw	r26, r10
    1930:	8c 91       	ld	r24, X
    1932:	83 30       	cpi	r24, 0x03	; 3
    1934:	09 f0       	breq	.+2      	; 0x1938 <f_sync+0x106>
    1936:	55 c0       	rjmp	.+170    	; 0x19e2 <f_sync+0x1b0>
    1938:	14 96       	adiw	r26, 0x04	; 4
    193a:	8c 91       	ld	r24, X
    193c:	81 30       	cpi	r24, 0x01	; 1
    193e:	09 f0       	breq	.+2      	; 0x1942 <f_sync+0x110>
    1940:	50 c0       	rjmp	.+160    	; 0x19e2 <f_sync+0x1b0>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    1942:	85 01       	movw	r16, r10
    1944:	01 5d       	subi	r16, 0xD1	; 209
    1946:	1f 4f       	sbci	r17, 0xFF	; 255
    1948:	c8 01       	movw	r24, r16
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	70 e0       	ldi	r23, 0x00	; 0
    194e:	40 e0       	ldi	r20, 0x00	; 0
    1950:	52 e0       	ldi	r21, 0x02	; 2
    1952:	0e 94 25 02 	call	0x44a	; 0x44a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
    1956:	c5 01       	movw	r24, r10
    1958:	83 5d       	subi	r24, 0xD3	; 211
    195a:	9d 4f       	sbci	r25, 0xFD	; 253
    195c:	65 e5       	ldi	r22, 0x55	; 85
    195e:	7a ea       	ldi	r23, 0xAA	; 170
    1960:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
    1964:	c8 01       	movw	r24, r16
    1966:	42 e5       	ldi	r20, 0x52	; 82
    1968:	52 e5       	ldi	r21, 0x52	; 82
    196a:	61 e6       	ldi	r22, 0x61	; 97
    196c:	71 e4       	ldi	r23, 0x41	; 65
    196e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
    1972:	c5 01       	movw	r24, r10
    1974:	8d 5e       	subi	r24, 0xED	; 237
    1976:	9d 4f       	sbci	r25, 0xFD	; 253
    1978:	42 e7       	ldi	r20, 0x72	; 114
    197a:	52 e7       	ldi	r21, 0x72	; 114
    197c:	61 e4       	ldi	r22, 0x41	; 65
    197e:	71 e6       	ldi	r23, 0x61	; 97
    1980:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    1984:	f5 01       	movw	r30, r10
    1986:	47 85       	ldd	r20, Z+15	; 0x0f
    1988:	50 89       	ldd	r21, Z+16	; 0x10
    198a:	61 89       	ldd	r22, Z+17	; 0x11
    198c:	72 89       	ldd	r23, Z+18	; 0x12
    198e:	c5 01       	movw	r24, r10
    1990:	89 5e       	subi	r24, 0xE9	; 233
    1992:	9d 4f       	sbci	r25, 0xFD	; 253
    1994:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    1998:	d5 01       	movw	r26, r10
    199a:	1b 96       	adiw	r26, 0x0b	; 11
    199c:	4d 91       	ld	r20, X+
    199e:	5d 91       	ld	r21, X+
    19a0:	6d 91       	ld	r22, X+
    19a2:	7c 91       	ld	r23, X
    19a4:	1e 97       	sbiw	r26, 0x0e	; 14
    19a6:	c5 01       	movw	r24, r10
    19a8:	85 5e       	subi	r24, 0xE5	; 229
    19aa:	9d 4f       	sbci	r25, 0xFD	; 253
    19ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    19b0:	f5 01       	movw	r30, r10
    19b2:	23 8d       	ldd	r18, Z+27	; 0x1b
    19b4:	34 8d       	ldd	r19, Z+28	; 0x1c
    19b6:	45 8d       	ldd	r20, Z+29	; 0x1d
    19b8:	56 8d       	ldd	r21, Z+30	; 0x1e
    19ba:	2f 5f       	subi	r18, 0xFF	; 255
    19bc:	3f 4f       	sbci	r19, 0xFF	; 255
    19be:	4f 4f       	sbci	r20, 0xFF	; 255
    19c0:	5f 4f       	sbci	r21, 0xFF	; 255
    19c2:	d5 01       	movw	r26, r10
    19c4:	9b 96       	adiw	r26, 0x2b	; 43
    19c6:	2d 93       	st	X+, r18
    19c8:	3d 93       	st	X+, r19
    19ca:	4d 93       	st	X+, r20
    19cc:	5c 93       	st	X, r21
    19ce:	9e 97       	sbiw	r26, 0x2e	; 46
			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
    19d0:	11 96       	adiw	r26, 0x01	; 1
    19d2:	8c 91       	ld	r24, X
    19d4:	b8 01       	movw	r22, r16
    19d6:	01 e0       	ldi	r16, 0x01	; 1
    19d8:	10 e0       	ldi	r17, 0x00	; 0
    19da:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <disk_write>
			fs->fsi_flag = 0;
    19de:	f5 01       	movw	r30, r10
    19e0:	14 82       	std	Z+4, r1	; 0x04
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    19e2:	d5 01       	movw	r26, r10
    19e4:	11 96       	adiw	r26, 0x01	; 1
    19e6:	8c 91       	ld	r24, X
    19e8:	60 e0       	ldi	r22, 0x00	; 0
    19ea:	40 e0       	ldi	r20, 0x00	; 0
    19ec:	50 e0       	ldi	r21, 0x00	; 0
    19ee:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <disk_ioctl>
    19f2:	88 23       	and	r24, r24
    19f4:	11 f0       	breq	.+4      	; 0x19fa <f_sync+0x1c8>
    19f6:	dd 24       	eor	r13, r13
    19f8:	d3 94       	inc	r13
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
					res = sync_fs(fs);					/* Restore it to the directory */
					fp->flag &= (BYTE)~FA_MODIFIED;
    19fa:	f7 01       	movw	r30, r14
    19fc:	86 85       	ldd	r24, Z+14	; 0x0e
    19fe:	8f 7b       	andi	r24, 0xBF	; 191
    1a00:	86 87       	std	Z+14, r24	; 0x0e
			}
		}
	}

	LEAVE_FF(fs, res);
}
    1a02:	8d 2d       	mov	r24, r13
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	08 95       	ret

00001a1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <f_close+0xa>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    1a2c:	0e 94 19 0c 	call	0x1832	; 0x1832 <f_sync>
	if (res == FR_OK)
    1a30:	88 23       	and	r24, r24
    1a32:	59 f4       	brne	.+22     	; 0x1a4a <f_close+0x2e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
    1a34:	c8 01       	movw	r24, r16
    1a36:	be 01       	movw	r22, r28
    1a38:	6f 5f       	subi	r22, 0xFF	; 255
    1a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3c:	0e 94 27 03 	call	0x64e	; 0x64e <validate>
		if (res == FR_OK) {
    1a40:	88 23       	and	r24, r24
    1a42:	19 f4       	brne	.+6      	; 0x1a4a <f_close+0x2e>
#if FF_FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
    1a44:	f8 01       	movw	r30, r16
    1a46:	11 82       	std	Z+1, r1	; 0x01
    1a48:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    1a4a:	0f 90       	pop	r0
    1a4c:	0f 90       	pop	r0
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	1f 91       	pop	r17
    1a54:	0f 91       	pop	r16
    1a56:	08 95       	ret

00001a58 <find_volume>:
static FRESULT find_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* !=0: Check write protection for write access */
)
{
    1a58:	2f 92       	push	r2
    1a5a:	3f 92       	push	r3
    1a5c:	4f 92       	push	r4
    1a5e:	5f 92       	push	r5
    1a60:	6f 92       	push	r6
    1a62:	7f 92       	push	r7
    1a64:	8f 92       	push	r8
    1a66:	9f 92       	push	r9
    1a68:	af 92       	push	r10
    1a6a:	bf 92       	push	r11
    1a6c:	cf 92       	push	r12
    1a6e:	df 92       	push	r13
    1a70:	ef 92       	push	r14
    1a72:	ff 92       	push	r15
    1a74:	0f 93       	push	r16
    1a76:	1f 93       	push	r17
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	6c 97       	sbiw	r28, 0x1c	; 28
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	f8 94       	cli
    1a86:	de bf       	out	0x3e, r29	; 62
    1a88:	0f be       	out	0x3f, r0	; 63
    1a8a:	cd bf       	out	0x3d, r28	; 61
    1a8c:	7b 01       	movw	r14, r22
    1a8e:	b4 2e       	mov	r11, r20
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
    1a90:	db 01       	movw	r26, r22
    1a92:	1d 92       	st	X+, r1
    1a94:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    1a96:	0e 94 de 02 	call	0x5bc	; 0x5bc <get_ldnumber>
    1a9a:	8c 01       	movw	r16, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    1a9c:	99 23       	and	r25, r25
    1a9e:	14 f4       	brge	.+4      	; 0x1aa4 <find_volume+0x4c>
    1aa0:	8b e0       	ldi	r24, 0x0B	; 11
    1aa2:	85 c2       	rjmp	.+1290   	; 0x1fae <find_volume+0x556>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	e4 59       	subi	r30, 0x94	; 148
    1aac:	fd 4f       	sbci	r31, 0xFD	; 253
    1aae:	c0 80       	ld	r12, Z
    1ab0:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
    1ab2:	c1 14       	cp	r12, r1
    1ab4:	d1 04       	cpc	r13, r1
    1ab6:	11 f4       	brne	.+4      	; 0x1abc <find_volume+0x64>
    1ab8:	8c e0       	ldi	r24, 0x0C	; 12
    1aba:	79 c2       	rjmp	.+1266   	; 0x1fae <find_volume+0x556>
#if FF_FS_REENTRANT
	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
    1abc:	f7 01       	movw	r30, r14
    1abe:	d1 82       	std	Z+1, r13	; 0x01
    1ac0:	c0 82       	st	Z, r12

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
    1ac2:	0f 2e       	mov	r0, r31
    1ac4:	fe ef       	ldi	r31, 0xFE	; 254
    1ac6:	ff 2e       	mov	r15, r31
    1ac8:	f0 2d       	mov	r31, r0
    1aca:	fb 20       	and	r15, r11
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
    1acc:	d6 01       	movw	r26, r12
    1ace:	8c 91       	ld	r24, X
    1ad0:	88 23       	and	r24, r24
    1ad2:	61 f0       	breq	.+24     	; 0x1aec <find_volume+0x94>
		stat = disk_status(fs->pdrv);
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	8c 91       	ld	r24, X
    1ad8:	0e 94 57 1c 	call	0x38ae	; 0x38ae <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    1adc:	80 fd       	sbrc	r24, 0
    1ade:	06 c0       	rjmp	.+12     	; 0x1aec <find_volume+0x94>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    1ae0:	ff 20       	and	r15, r15
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <find_volume+0x8e>
    1ae4:	61 c2       	rjmp	.+1218   	; 0x1fa8 <find_volume+0x550>
    1ae6:	82 fd       	sbrc	r24, 2
    1ae8:	5d c2       	rjmp	.+1210   	; 0x1fa4 <find_volume+0x54c>
    1aea:	5e c2       	rjmp	.+1212   	; 0x1fa8 <find_volume+0x550>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Clear the filesystem object */
    1aec:	f6 01       	movw	r30, r12
    1aee:	10 82       	st	Z, r1
	fs->pdrv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1af0:	01 83       	std	Z+1, r16	; 0x01
	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
    1af2:	80 2f       	mov	r24, r16
    1af4:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
    1af8:	80 ff       	sbrs	r24, 0
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <find_volume+0xa8>
    1afc:	83 e0       	ldi	r24, 0x03	; 3
    1afe:	57 c2       	rjmp	.+1198   	; 0x1fae <find_volume+0x556>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    1b00:	ff 20       	and	r15, r15
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <find_volume+0xb0>
    1b04:	82 fd       	sbrc	r24, 2
    1b06:	4e c2       	rjmp	.+1180   	; 0x1fa4 <find_volume+0x54c>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    1b08:	c6 01       	movw	r24, r12
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    1b16:	82 30       	cpi	r24, 0x02	; 2
    1b18:	21 f0       	breq	.+8      	; 0x1b22 <find_volume+0xca>
    1b1a:	88 24       	eor	r8, r8
    1b1c:	99 24       	eor	r9, r9
    1b1e:	54 01       	movw	r10, r8
    1b20:	46 c0       	rjmp	.+140    	; 0x1bae <find_volume+0x156>
    1b22:	7e 01       	movw	r14, r28
    1b24:	08 94       	sec
    1b26:	e1 1c       	adc	r14, r1
    1b28:	f1 1c       	adc	r15, r1
    1b2a:	57 01       	movw	r10, r14
    1b2c:	0e eb       	ldi	r16, 0xBE	; 190
    1b2e:	11 e0       	ldi	r17, 0x01	; 1
		for (i = 0; i < 4; i++) {		/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1b30:	66 24       	eor	r6, r6
    1b32:	77 24       	eor	r7, r7
    1b34:	43 01       	movw	r8, r6
	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {		/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
    1b36:	c8 01       	movw	r24, r16
    1b38:	8f 96       	adiw	r24, 0x2f	; 47
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	e8 0f       	add	r30, r24
    1b3e:	f9 1f       	adc	r31, r25
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1b40:	84 81       	ldd	r24, Z+4	; 0x04
    1b42:	88 23       	and	r24, r24
    1b44:	19 f4       	brne	.+6      	; 0x1b4c <find_volume+0xf4>
    1b46:	c4 01       	movw	r24, r8
    1b48:	b3 01       	movw	r22, r6
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <find_volume+0xfc>
    1b4c:	cf 01       	movw	r24, r30
    1b4e:	08 96       	adiw	r24, 0x08	; 8
    1b50:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1b54:	d5 01       	movw	r26, r10
    1b56:	6d 93       	st	X+, r22
    1b58:	7d 93       	st	X+, r23
    1b5a:	8d 93       	st	X+, r24
    1b5c:	9d 93       	st	X+, r25
    1b5e:	5d 01       	movw	r10, r26
    1b60:	00 5f       	subi	r16, 0xF0	; 240
    1b62:	1f 4f       	sbci	r17, 0xFF	; 255

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {		/* Get partition offset */
    1b64:	b1 e0       	ldi	r27, 0x01	; 1
    1b66:	0e 3f       	cpi	r16, 0xFE	; 254
    1b68:	1b 07       	cpc	r17, r27
    1b6a:	29 f7       	brne	.-54     	; 0x1b36 <find_volume+0xde>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
		if (i != 0) i--;
		do {							/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1b6c:	0f 2e       	mov	r0, r31
    1b6e:	f3 e0       	ldi	r31, 0x03	; 3
    1b70:	7f 2e       	mov	r7, r31
    1b72:	f0 2d       	mov	r31, r0
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    1b74:	8e 01       	movw	r16, r28
    1b76:	0f 5e       	subi	r16, 0xEF	; 239
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
		if (i != 0) i--;
		do {							/* Find an FAT volume */
			bsect = br[i];
    1b7a:	f7 01       	movw	r30, r14
    1b7c:	80 80       	ld	r8, Z
    1b7e:	91 80       	ldd	r9, Z+1	; 0x01
    1b80:	a2 80       	ldd	r10, Z+2	; 0x02
    1b82:	b3 80       	ldd	r11, Z+3	; 0x03
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1b84:	81 14       	cp	r8, r1
    1b86:	91 04       	cpc	r9, r1
    1b88:	a1 04       	cpc	r10, r1
    1b8a:	b1 04       	cpc	r11, r1
    1b8c:	11 f4       	brne	.+4      	; 0x1b92 <find_volume+0x13a>
    1b8e:	87 2d       	mov	r24, r7
    1b90:	07 c0       	rjmp	.+14     	; 0x1ba0 <find_volume+0x148>
    1b92:	c6 01       	movw	r24, r12
    1b94:	b5 01       	movw	r22, r10
    1b96:	a4 01       	movw	r20, r8
    1b98:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
    1b9c:	82 30       	cpi	r24, 0x02	; 2
    1b9e:	38 f0       	brcs	.+14     	; 0x1bae <find_volume+0x156>
    1ba0:	24 e0       	ldi	r18, 0x04	; 4
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	e2 0e       	add	r14, r18
    1ba6:	f3 1e       	adc	r15, r19
    1ba8:	e0 16       	cp	r14, r16
    1baa:	f1 06       	cpc	r15, r17
    1bac:	31 f7       	brne	.-52     	; 0x1b7a <find_volume+0x122>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1bae:	84 30       	cpi	r24, 0x04	; 4
    1bb0:	11 f4       	brne	.+4      	; 0x1bb6 <find_volume+0x15e>
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	fc c1       	rjmp	.+1016   	; 0x1fae <find_volume+0x556>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <find_volume+0x164>
    1bba:	f8 c1       	rjmp	.+1008   	; 0x1fac <find_volume+0x554>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1bbc:	c6 01       	movw	r24, r12
    1bbe:	ca 96       	adiw	r24, 0x3a	; 58
    1bc0:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1bc4:	80 50       	subi	r24, 0x00	; 0
    1bc6:	92 40       	sbci	r25, 0x02	; 2
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <find_volume+0x174>
    1bca:	f0 c1       	rjmp	.+992    	; 0x1fac <find_volume+0x554>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
    1bcc:	c6 01       	movw	r24, r12
    1bce:	8b 5b       	subi	r24, 0xBB	; 187
    1bd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd2:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1bd6:	7c 01       	movw	r14, r24
    1bd8:	00 e0       	ldi	r16, 0x00	; 0
    1bda:	10 e0       	ldi	r17, 0x00	; 0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1bdc:	e1 14       	cp	r14, r1
    1bde:	f1 04       	cpc	r15, r1
    1be0:	01 05       	cpc	r16, r1
    1be2:	11 05       	cpc	r17, r1
    1be4:	39 f4       	brne	.+14     	; 0x1bf4 <find_volume+0x19c>
    1be6:	c6 01       	movw	r24, r12
    1be8:	8d 5a       	subi	r24, 0xAD	; 173
    1bea:	9f 4f       	sbci	r25, 0xFF	; 255
    1bec:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1bf0:	7b 01       	movw	r14, r22
    1bf2:	8c 01       	movw	r16, r24
		fs->fsize = fasize;
    1bf4:	d6 01       	movw	r26, r12
    1bf6:	57 96       	adiw	r26, 0x17	; 23
    1bf8:	ed 92       	st	X+, r14
    1bfa:	fd 92       	st	X+, r15
    1bfc:	0d 93       	st	X+, r16
    1bfe:	1c 93       	st	X, r17
    1c00:	5a 97       	sbiw	r26, 0x1a	; 26

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
    1c02:	df 96       	adiw	r26, 0x3f	; 63
    1c04:	7c 90       	ld	r7, X
    1c06:	df 97       	sbiw	r26, 0x3f	; 63
    1c08:	12 96       	adiw	r26, 0x02	; 2
    1c0a:	7c 92       	st	X, r7
    1c0c:	12 97       	sbiw	r26, 0x02	; 2
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    1c0e:	87 2d       	mov	r24, r7
    1c10:	81 50       	subi	r24, 0x01	; 1
    1c12:	82 30       	cpi	r24, 0x02	; 2
    1c14:	08 f0       	brcs	.+2      	; 0x1c18 <find_volume+0x1c0>
    1c16:	ca c1       	rjmp	.+916    	; 0x1fac <find_volume+0x554>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
    1c18:	dc 96       	adiw	r26, 0x3c	; 60
    1c1a:	8c 91       	ld	r24, X
    1c1c:	dc 97       	sbiw	r26, 0x3c	; 60
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	1a 96       	adiw	r26, 0x0a	; 10
    1c24:	3c 93       	st	X, r19
    1c26:	2e 93       	st	-X, r18
    1c28:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1c2a:	21 15       	cp	r18, r1
    1c2c:	31 05       	cpc	r19, r1
    1c2e:	09 f4       	brne	.+2      	; 0x1c32 <find_volume+0x1da>
    1c30:	bd c1       	rjmp	.+890    	; 0x1fac <find_volume+0x554>
    1c32:	c9 01       	movw	r24, r18
    1c34:	01 97       	sbiw	r24, 0x01	; 1
    1c36:	82 23       	and	r24, r18
    1c38:	93 23       	and	r25, r19
    1c3a:	89 2b       	or	r24, r25
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <find_volume+0x1e8>
    1c3e:	b6 c1       	rjmp	.+876    	; 0x1fac <find_volume+0x554>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1c40:	c6 01       	movw	r24, r12
    1c42:	80 5c       	subi	r24, 0xC0	; 192
    1c44:	9f 4f       	sbci	r25, 0xFF	; 255
    1c46:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1c4a:	9c 8f       	std	Y+28, r25	; 0x1c
    1c4c:	8b 8f       	std	Y+27, r24	; 0x1b
    1c4e:	f6 01       	movw	r30, r12
    1c50:	90 87       	std	Z+8, r25	; 0x08
    1c52:	87 83       	std	Z+7, r24	; 0x07
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1c54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c58:	8f 70       	andi	r24, 0x0F	; 15
    1c5a:	90 70       	andi	r25, 0x00	; 0
    1c5c:	89 2b       	or	r24, r25
    1c5e:	09 f0       	breq	.+2      	; 0x1c62 <find_volume+0x20a>
    1c60:	a5 c1       	rjmp	.+842    	; 0x1fac <find_volume+0x554>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
    1c62:	c6 01       	movw	r24, r12
    1c64:	8e 5b       	subi	r24, 0xBE	; 190
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1c6c:	1c 01       	movw	r2, r24
    1c6e:	44 24       	eor	r4, r4
    1c70:	55 24       	eor	r5, r5
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1c72:	21 14       	cp	r2, r1
    1c74:	31 04       	cpc	r3, r1
    1c76:	41 04       	cpc	r4, r1
    1c78:	51 04       	cpc	r5, r1
    1c7a:	39 f4       	brne	.+14     	; 0x1c8a <find_volume+0x232>
    1c7c:	c6 01       	movw	r24, r12
    1c7e:	81 5b       	subi	r24, 0xB1	; 177
    1c80:	9f 4f       	sbci	r25, 0xFF	; 255
    1c82:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1c86:	1b 01       	movw	r2, r22
    1c88:	2c 01       	movw	r4, r24

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
    1c8a:	c6 01       	movw	r24, r12
    1c8c:	cd 96       	adiw	r24, 0x3d	; 61
    1c8e:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1c92:	9e 8b       	std	Y+22, r25	; 0x16
    1c94:	8d 8b       	std	Y+21, r24	; 0x15
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
    1c96:	89 2b       	or	r24, r25
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <find_volume+0x244>
    1c9a:	88 c1       	rjmp	.+784    	; 0x1fac <find_volume+0x554>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
    1c9c:	27 2d       	mov	r18, r7
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	50 e0       	ldi	r21, 0x00	; 0
    1ca4:	c8 01       	movw	r24, r16
    1ca6:	b7 01       	movw	r22, r14
    1ca8:	0e 94 b8 20 	call	0x4170	; 0x4170 <__mulsi3>
    1cac:	69 8b       	std	Y+17, r22	; 0x11
    1cae:	7a 8b       	std	Y+18, r23	; 0x12
    1cb0:	8b 8b       	std	Y+19, r24	; 0x13
    1cb2:	9c 8b       	std	Y+20, r25	; 0x14

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    1cb4:	4d 89       	ldd	r20, Y+21	; 0x15
    1cb6:	5e 89       	ldd	r21, Y+22	; 0x16
    1cb8:	9a 01       	movw	r18, r20
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	2f 8b       	std	Y+23, r18	; 0x17
    1cc0:	38 8f       	std	Y+24, r19	; 0x18
    1cc2:	49 8f       	std	Y+25, r20	; 0x19
    1cc4:	5a 8f       	std	Y+26, r21	; 0x1a
    1cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cca:	92 95       	swap	r25
    1ccc:	82 95       	swap	r24
    1cce:	8f 70       	andi	r24, 0x0F	; 15
    1cd0:	89 27       	eor	r24, r25
    1cd2:	9f 70       	andi	r25, 0x0F	; 15
    1cd4:	89 27       	eor	r24, r25
    1cd6:	a0 e0       	ldi	r26, 0x00	; 0
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	82 0f       	add	r24, r18
    1cdc:	93 1f       	adc	r25, r19
    1cde:	a4 1f       	adc	r26, r20
    1ce0:	b5 1f       	adc	r27, r21
    1ce2:	e9 88       	ldd	r14, Y+17	; 0x11
    1ce4:	fa 88       	ldd	r15, Y+18	; 0x12
    1ce6:	0b 89       	ldd	r16, Y+19	; 0x13
    1ce8:	1c 89       	ldd	r17, Y+20	; 0x14
    1cea:	e8 0e       	add	r14, r24
    1cec:	f9 1e       	adc	r15, r25
    1cee:	0a 1f       	adc	r16, r26
    1cf0:	1b 1f       	adc	r17, r27
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
    1cf2:	2e 14       	cp	r2, r14
    1cf4:	3f 04       	cpc	r3, r15
    1cf6:	40 06       	cpc	r4, r16
    1cf8:	51 06       	cpc	r5, r17
    1cfa:	08 f4       	brcc	.+2      	; 0x1cfe <find_volume+0x2a6>
    1cfc:	57 c1       	rjmp	.+686    	; 0x1fac <find_volume+0x554>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
    1cfe:	c2 01       	movw	r24, r4
    1d00:	b1 01       	movw	r22, r2
    1d02:	6e 19       	sub	r22, r14
    1d04:	7f 09       	sbc	r23, r15
    1d06:	80 0b       	sbc	r24, r16
    1d08:	91 0b       	sbc	r25, r17
    1d0a:	d6 01       	movw	r26, r12
    1d0c:	19 96       	adiw	r26, 0x09	; 9
    1d0e:	2d 91       	ld	r18, X+
    1d10:	3c 91       	ld	r19, X
    1d12:	1a 97       	sbiw	r26, 0x0a	; 10
    1d14:	40 e0       	ldi	r20, 0x00	; 0
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	0e 94 d7 20 	call	0x41ae	; 0x41ae <__udivmodsi4>
    1d1c:	82 2f       	mov	r24, r18
    1d1e:	93 2f       	mov	r25, r19
    1d20:	a4 2f       	mov	r26, r20
    1d22:	b5 2f       	mov	r27, r21
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	a1 05       	cpc	r26, r1
    1d28:	b1 05       	cpc	r27, r1
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <find_volume+0x2d6>
    1d2c:	3f c1       	rjmp	.+638    	; 0x1fac <find_volume+0x554>
		fmt = 0;
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
    1d2e:	86 3f       	cpi	r24, 0xF6	; 246
    1d30:	ef ef       	ldi	r30, 0xFF	; 255
    1d32:	9e 07       	cpc	r25, r30
    1d34:	ef ef       	ldi	r30, 0xFF	; 255
    1d36:	ae 07       	cpc	r26, r30
    1d38:	ef e0       	ldi	r30, 0x0F	; 15
    1d3a:	be 07       	cpc	r27, r30
    1d3c:	28 f4       	brcc	.+10     	; 0x1d48 <find_volume+0x2f0>
    1d3e:	0f 2e       	mov	r0, r31
    1d40:	f3 e0       	ldi	r31, 0x03	; 3
    1d42:	7f 2e       	mov	r7, r31
    1d44:	f0 2d       	mov	r31, r0
    1d46:	01 c0       	rjmp	.+2      	; 0x1d4a <find_volume+0x2f2>
    1d48:	77 24       	eor	r7, r7
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1d4a:	86 3f       	cpi	r24, 0xF6	; 246
    1d4c:	ff ef       	ldi	r31, 0xFF	; 255
    1d4e:	9f 07       	cpc	r25, r31
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	af 07       	cpc	r26, r31
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	bf 07       	cpc	r27, r31
    1d58:	18 f4       	brcc	.+6      	; 0x1d60 <find_volume+0x308>
    1d5a:	77 24       	eor	r7, r7
    1d5c:	68 94       	set
    1d5e:	71 f8       	bld	r7, 1
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1d60:	86 3f       	cpi	r24, 0xF6	; 246
    1d62:	2f e0       	ldi	r18, 0x0F	; 15
    1d64:	92 07       	cpc	r25, r18
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	a2 07       	cpc	r26, r18
    1d6a:	20 e0       	ldi	r18, 0x00	; 0
    1d6c:	b2 07       	cpc	r27, r18
    1d6e:	08 f4       	brcc	.+2      	; 0x1d72 <find_volume+0x31a>
    1d70:	37 c1       	rjmp	.+622    	; 0x1fe0 <find_volume+0x588>
		if (fmt == 0) return FR_NO_FILESYSTEM;
    1d72:	77 20       	and	r7, r7
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <find_volume+0x320>
    1d76:	1a c1       	rjmp	.+564    	; 0x1fac <find_volume+0x554>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    1d78:	02 96       	adiw	r24, 0x02	; 2
    1d7a:	a1 1d       	adc	r26, r1
    1d7c:	b1 1d       	adc	r27, r1
    1d7e:	f6 01       	movw	r30, r12
    1d80:	83 8b       	std	Z+19, r24	; 0x13
    1d82:	94 8b       	std	Z+20, r25	; 0x14
    1d84:	a5 8b       	std	Z+21, r26	; 0x15
    1d86:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;							/* Volume start sector */
    1d88:	d6 01       	movw	r26, r12
    1d8a:	5b 96       	adiw	r26, 0x1b	; 27
    1d8c:	8d 92       	st	X+, r8
    1d8e:	9d 92       	st	X+, r9
    1d90:	ad 92       	st	X+, r10
    1d92:	bc 92       	st	X, r11
    1d94:	5e 97       	sbiw	r26, 0x1e	; 30
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    1d96:	8f 89       	ldd	r24, Y+23	; 0x17
    1d98:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1d9c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1d9e:	88 0d       	add	r24, r8
    1da0:	99 1d       	adc	r25, r9
    1da2:	aa 1d       	adc	r26, r10
    1da4:	bb 1d       	adc	r27, r11
    1da6:	87 8f       	std	Z+31, r24	; 0x1f
    1da8:	90 a3       	std	Z+32, r25	; 0x20
    1daa:	a1 a3       	std	Z+33, r26	; 0x21
    1dac:	b2 a3       	std	Z+34, r27	; 0x22
		fs->database = bsect + sysect;					/* Data start sector */
    1dae:	d8 01       	movw	r26, r16
    1db0:	c7 01       	movw	r24, r14
    1db2:	88 0d       	add	r24, r8
    1db4:	99 1d       	adc	r25, r9
    1db6:	aa 1d       	adc	r26, r10
    1db8:	bb 1d       	adc	r27, r11
    1dba:	87 a3       	std	Z+39, r24	; 0x27
    1dbc:	90 a7       	std	Z+40, r25	; 0x28
    1dbe:	a1 a7       	std	Z+41, r26	; 0x29
    1dc0:	b2 a7       	std	Z+42, r27	; 0x2a
		if (fmt == FS_FAT32) {
    1dc2:	f3 e0       	ldi	r31, 0x03	; 3
    1dc4:	7f 16       	cp	r7, r31
    1dc6:	39 f5       	brne	.+78     	; 0x1e16 <find_volume+0x3be>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    1dc8:	c6 01       	movw	r24, r12
    1dca:	87 5a       	subi	r24, 0xA7	; 167
    1dcc:	9f 4f       	sbci	r25, 0xFF	; 255
    1dce:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1dd2:	89 2b       	or	r24, r25
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <find_volume+0x380>
    1dd6:	ea c0       	rjmp	.+468    	; 0x1fac <find_volume+0x554>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
    1dd8:	d6 01       	movw	r26, r12
    1dda:	17 96       	adiw	r26, 0x07	; 7
    1ddc:	8d 91       	ld	r24, X+
    1dde:	9c 91       	ld	r25, X
    1de0:	18 97       	sbiw	r26, 0x08	; 8
    1de2:	89 2b       	or	r24, r25
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <find_volume+0x390>
    1de6:	e2 c0       	rjmp	.+452    	; 0x1fac <find_volume+0x554>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    1de8:	c6 01       	movw	r24, r12
    1dea:	85 5a       	subi	r24, 0xA5	; 165
    1dec:	9f 4f       	sbci	r25, 0xFF	; 255
    1dee:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1df2:	f6 01       	movw	r30, r12
    1df4:	63 a3       	std	Z+35, r22	; 0x23
    1df6:	74 a3       	std	Z+36, r23	; 0x24
    1df8:	85 a3       	std	Z+37, r24	; 0x25
    1dfa:	96 a3       	std	Z+38, r25	; 0x26
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
    1dfc:	83 89       	ldd	r24, Z+19	; 0x13
    1dfe:	94 89       	ldd	r25, Z+20	; 0x14
    1e00:	a5 89       	ldd	r26, Z+21	; 0x15
    1e02:	b6 89       	ldd	r27, Z+22	; 0x16
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	aa 1f       	adc	r26, r26
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	aa 1f       	adc	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	45 c0       	rjmp	.+138    	; 0x1ea0 <find_volume+0x448>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    1e16:	d6 01       	movw	r26, r12
    1e18:	17 96       	adiw	r26, 0x07	; 7
    1e1a:	8d 91       	ld	r24, X+
    1e1c:	9c 91       	ld	r25, X
    1e1e:	18 97       	sbiw	r26, 0x08	; 8
    1e20:	89 2b       	or	r24, r25
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <find_volume+0x3ce>
    1e24:	c3 c0       	rjmp	.+390    	; 0x1fac <find_volume+0x554>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
    1e26:	5f 96       	adiw	r26, 0x1f	; 31
    1e28:	8d 91       	ld	r24, X+
    1e2a:	9d 91       	ld	r25, X+
    1e2c:	0d 90       	ld	r0, X+
    1e2e:	bc 91       	ld	r27, X
    1e30:	a0 2d       	mov	r26, r0
    1e32:	29 89       	ldd	r18, Y+17	; 0x11
    1e34:	3a 89       	ldd	r19, Y+18	; 0x12
    1e36:	4b 89       	ldd	r20, Y+19	; 0x13
    1e38:	5c 89       	ldd	r21, Y+20	; 0x14
    1e3a:	82 0f       	add	r24, r18
    1e3c:	93 1f       	adc	r25, r19
    1e3e:	a4 1f       	adc	r26, r20
    1e40:	b5 1f       	adc	r27, r21
    1e42:	f6 01       	movw	r30, r12
    1e44:	83 a3       	std	Z+35, r24	; 0x23
    1e46:	94 a3       	std	Z+36, r25	; 0x24
    1e48:	a5 a3       	std	Z+37, r26	; 0x25
    1e4a:	b6 a3       	std	Z+38, r27	; 0x26
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
    1e4c:	f2 e0       	ldi	r31, 0x02	; 2
    1e4e:	7f 16       	cp	r7, r31
    1e50:	51 f4       	brne	.+20     	; 0x1e66 <find_volume+0x40e>
    1e52:	f6 01       	movw	r30, r12
    1e54:	83 89       	ldd	r24, Z+19	; 0x13
    1e56:	94 89       	ldd	r25, Z+20	; 0x14
    1e58:	a5 89       	ldd	r26, Z+21	; 0x15
    1e5a:	b6 89       	ldd	r27, Z+22	; 0x16
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	aa 1f       	adc	r26, r26
    1e62:	bb 1f       	adc	r27, r27
    1e64:	1d c0       	rjmp	.+58     	; 0x1ea0 <find_volume+0x448>
    1e66:	d6 01       	movw	r26, r12
    1e68:	53 96       	adiw	r26, 0x13	; 19
    1e6a:	2d 91       	ld	r18, X+
    1e6c:	3d 91       	ld	r19, X+
    1e6e:	4d 91       	ld	r20, X+
    1e70:	5c 91       	ld	r21, X
    1e72:	56 97       	sbiw	r26, 0x16	; 22
    1e74:	da 01       	movw	r26, r20
    1e76:	c9 01       	movw	r24, r18
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	aa 1f       	adc	r26, r26
    1e7e:	bb 1f       	adc	r27, r27
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	a4 1f       	adc	r26, r20
    1e86:	b5 1f       	adc	r27, r21
    1e88:	b6 95       	lsr	r27
    1e8a:	a7 95       	ror	r26
    1e8c:	97 95       	ror	r25
    1e8e:	87 95       	ror	r24
    1e90:	21 70       	andi	r18, 0x01	; 1
    1e92:	30 70       	andi	r19, 0x00	; 0
    1e94:	40 70       	andi	r20, 0x00	; 0
    1e96:	50 70       	andi	r21, 0x00	; 0
    1e98:	82 0f       	add	r24, r18
    1e9a:	93 1f       	adc	r25, r19
    1e9c:	a4 1f       	adc	r26, r20
    1e9e:	b5 1f       	adc	r27, r21
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	9e 4f       	sbci	r25, 0xFE	; 254
    1ea4:	af 4f       	sbci	r26, 0xFF	; 255
    1ea6:	bf 4f       	sbci	r27, 0xFF	; 255
    1ea8:	07 2e       	mov	r0, r23
    1eaa:	79 e0       	ldi	r23, 0x09	; 9
    1eac:	b6 95       	lsr	r27
    1eae:	a7 95       	ror	r26
    1eb0:	97 95       	ror	r25
    1eb2:	87 95       	ror	r24
    1eb4:	7a 95       	dec	r23
    1eb6:	d1 f7       	brne	.-12     	; 0x1eac <find_volume+0x454>
    1eb8:	70 2d       	mov	r23, r0
    1eba:	f6 01       	movw	r30, r12
    1ebc:	27 89       	ldd	r18, Z+23	; 0x17
    1ebe:	30 8d       	ldd	r19, Z+24	; 0x18
    1ec0:	41 8d       	ldd	r20, Z+25	; 0x19
    1ec2:	52 8d       	ldd	r21, Z+26	; 0x1a
    1ec4:	28 17       	cp	r18, r24
    1ec6:	39 07       	cpc	r19, r25
    1ec8:	4a 07       	cpc	r20, r26
    1eca:	5b 07       	cpc	r21, r27
    1ecc:	08 f4       	brcc	.+2      	; 0x1ed0 <find_volume+0x478>
    1ece:	6e c0       	rjmp	.+220    	; 0x1fac <find_volume+0x554>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    1ed0:	8f ef       	ldi	r24, 0xFF	; 255
    1ed2:	9f ef       	ldi	r25, 0xFF	; 255
    1ed4:	af ef       	ldi	r26, 0xFF	; 255
    1ed6:	bf ef       	ldi	r27, 0xFF	; 255
    1ed8:	87 87       	std	Z+15, r24	; 0x0f
    1eda:	90 8b       	std	Z+16, r25	; 0x10
    1edc:	a1 8b       	std	Z+17, r26	; 0x11
    1ede:	b2 8b       	std	Z+18, r27	; 0x12
    1ee0:	83 87       	std	Z+11, r24	; 0x0b
    1ee2:	94 87       	std	Z+12, r25	; 0x0c
    1ee4:	a5 87       	std	Z+13, r26	; 0x0d
    1ee6:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    1ee8:	80 e8       	ldi	r24, 0x80	; 128
    1eea:	84 83       	std	Z+4, r24	; 0x04
#if (FF_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
    1eec:	f3 e0       	ldi	r31, 0x03	; 3
    1eee:	7f 16       	cp	r7, r31
    1ef0:	09 f0       	breq	.+2      	; 0x1ef4 <find_volume+0x49c>
    1ef2:	47 c0       	rjmp	.+142    	; 0x1f82 <find_volume+0x52a>
    1ef4:	c6 01       	movw	r24, r12
    1ef6:	81 5a       	subi	r24, 0xA1	; 161
    1ef8:	9f 4f       	sbci	r25, 0xFF	; 255
    1efa:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <find_volume+0x4ac>
    1f02:	3f c0       	rjmp	.+126    	; 0x1f82 <find_volume+0x52a>
    1f04:	b5 01       	movw	r22, r10
    1f06:	a4 01       	movw	r20, r8
    1f08:	4f 5f       	subi	r20, 0xFF	; 255
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	6f 4f       	sbci	r22, 0xFF	; 255
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	c6 01       	movw	r24, r12
    1f12:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    1f16:	88 23       	and	r24, r24
    1f18:	a1 f5       	brne	.+104    	; 0x1f82 <find_volume+0x52a>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
    1f1a:	d6 01       	movw	r26, r12
    1f1c:	14 96       	adiw	r26, 0x04	; 4
    1f1e:	1c 92       	st	X, r1
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
    1f20:	c6 01       	movw	r24, r12
    1f22:	83 5d       	subi	r24, 0xD3	; 211
    1f24:	9d 4f       	sbci	r25, 0xFD	; 253
    1f26:	0e 94 c0 01 	call	0x380	; 0x380 <ld_word>
    1f2a:	85 55       	subi	r24, 0x55	; 85
    1f2c:	9a 4a       	sbci	r25, 0xAA	; 170
    1f2e:	49 f5       	brne	.+82     	; 0x1f82 <find_volume+0x52a>
    1f30:	c6 01       	movw	r24, r12
    1f32:	8f 96       	adiw	r24, 0x2f	; 47
    1f34:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1f38:	62 55       	subi	r22, 0x52	; 82
    1f3a:	72 45       	sbci	r23, 0x52	; 82
    1f3c:	81 46       	sbci	r24, 0x61	; 97
    1f3e:	91 44       	sbci	r25, 0x41	; 65
    1f40:	01 f5       	brne	.+64     	; 0x1f82 <find_volume+0x52a>
    1f42:	c6 01       	movw	r24, r12
    1f44:	8d 5e       	subi	r24, 0xED	; 237
    1f46:	9d 4f       	sbci	r25, 0xFD	; 253
    1f48:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1f4c:	62 57       	subi	r22, 0x72	; 114
    1f4e:	72 47       	sbci	r23, 0x72	; 114
    1f50:	81 44       	sbci	r24, 0x41	; 65
    1f52:	91 46       	sbci	r25, 0x61	; 97
    1f54:	b1 f4       	brne	.+44     	; 0x1f82 <find_volume+0x52a>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (FF_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    1f56:	c6 01       	movw	r24, r12
    1f58:	89 5e       	subi	r24, 0xE9	; 233
    1f5a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f5c:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1f60:	d6 01       	movw	r26, r12
    1f62:	1f 96       	adiw	r26, 0x0f	; 15
    1f64:	6d 93       	st	X+, r22
    1f66:	7d 93       	st	X+, r23
    1f68:	8d 93       	st	X+, r24
    1f6a:	9c 93       	st	X, r25
    1f6c:	52 97       	sbiw	r26, 0x12	; 18
#endif
#if (FF_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    1f6e:	c6 01       	movw	r24, r12
    1f70:	85 5e       	subi	r24, 0xE5	; 229
    1f72:	9d 4f       	sbci	r25, 0xFD	; 253
    1f74:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    1f78:	f6 01       	movw	r30, r12
    1f7a:	63 87       	std	Z+11, r22	; 0x0b
    1f7c:	74 87       	std	Z+12, r23	; 0x0c
    1f7e:	85 87       	std	Z+13, r24	; 0x0d
    1f80:	96 87       	std	Z+14, r25	; 0x0e
		}
#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
    1f82:	d6 01       	movw	r26, r12
    1f84:	7c 92       	st	X, r7
	fs->id = ++Fsid;		/* Volume mount ID */
    1f86:	80 91 6e 02 	lds	r24, 0x026E
    1f8a:	90 91 6f 02 	lds	r25, 0x026F
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	90 93 6f 02 	sts	0x026F, r25
    1f94:	80 93 6e 02 	sts	0x026E, r24
    1f98:	16 96       	adiw	r26, 0x06	; 6
    1f9a:	9c 93       	st	X, r25
    1f9c:	8e 93       	st	-X, r24
    1f9e:	15 97       	sbiw	r26, 0x05	; 5
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	05 c0       	rjmp	.+10     	; 0x1fae <find_volume+0x556>
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if FF_FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    1fa4:	8a e0       	ldi	r24, 0x0A	; 10
    1fa6:	03 c0       	rjmp	.+6      	; 0x1fae <find_volume+0x556>
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	01 c0       	rjmp	.+2      	; 0x1fae <find_volume+0x556>
    1fac:	8d e0       	ldi	r24, 0x0D	; 13
}
    1fae:	6c 96       	adiw	r28, 0x1c	; 28
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	1f 91       	pop	r17
    1fc0:	0f 91       	pop	r16
    1fc2:	ff 90       	pop	r15
    1fc4:	ef 90       	pop	r14
    1fc6:	df 90       	pop	r13
    1fc8:	cf 90       	pop	r12
    1fca:	bf 90       	pop	r11
    1fcc:	af 90       	pop	r10
    1fce:	9f 90       	pop	r9
    1fd0:	8f 90       	pop	r8
    1fd2:	7f 90       	pop	r7
    1fd4:	6f 90       	pop	r6
    1fd6:	5f 90       	pop	r5
    1fd8:	4f 90       	pop	r4
    1fda:	3f 90       	pop	r3
    1fdc:	2f 90       	pop	r2
    1fde:	08 95       	ret
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
		if (fmt == 0) return FR_NO_FILESYSTEM;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
    1fe0:	02 96       	adiw	r24, 0x02	; 2
    1fe2:	a1 1d       	adc	r26, r1
    1fe4:	b1 1d       	adc	r27, r1
    1fe6:	f6 01       	movw	r30, r12
    1fe8:	83 8b       	std	Z+19, r24	; 0x13
    1fea:	94 8b       	std	Z+20, r25	; 0x14
    1fec:	a5 8b       	std	Z+21, r26	; 0x15
    1fee:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;							/* Volume start sector */
    1ff0:	d6 01       	movw	r26, r12
    1ff2:	5b 96       	adiw	r26, 0x1b	; 27
    1ff4:	8d 92       	st	X+, r8
    1ff6:	9d 92       	st	X+, r9
    1ff8:	ad 92       	st	X+, r10
    1ffa:	bc 92       	st	X, r11
    1ffc:	5e 97       	sbiw	r26, 0x1e	; 30
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	a9 8d       	ldd	r26, Y+25	; 0x19
    2004:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2006:	88 0d       	add	r24, r8
    2008:	99 1d       	adc	r25, r9
    200a:	aa 1d       	adc	r26, r10
    200c:	bb 1d       	adc	r27, r11
    200e:	87 8f       	std	Z+31, r24	; 0x1f
    2010:	90 a3       	std	Z+32, r25	; 0x20
    2012:	a1 a3       	std	Z+33, r26	; 0x21
    2014:	b2 a3       	std	Z+34, r27	; 0x22
		fs->database = bsect + sysect;					/* Data start sector */
    2016:	d8 01       	movw	r26, r16
    2018:	c7 01       	movw	r24, r14
    201a:	88 0d       	add	r24, r8
    201c:	99 1d       	adc	r25, r9
    201e:	aa 1d       	adc	r26, r10
    2020:	bb 1d       	adc	r27, r11
    2022:	87 a3       	std	Z+39, r24	; 0x27
    2024:	90 a7       	std	Z+40, r25	; 0x28
    2026:	a1 a7       	std	Z+41, r26	; 0x29
    2028:	b2 a7       	std	Z+42, r27	; 0x2a
    202a:	77 24       	eor	r7, r7
    202c:	73 94       	inc	r7
    202e:	f3 ce       	rjmp	.-538    	; 0x1e16 <find_volume+0x3be>

00002030 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2030:	2f 92       	push	r2
    2032:	3f 92       	push	r3
    2034:	4f 92       	push	r4
    2036:	5f 92       	push	r5
    2038:	6f 92       	push	r6
    203a:	7f 92       	push	r7
    203c:	8f 92       	push	r8
    203e:	9f 92       	push	r9
    2040:	af 92       	push	r10
    2042:	bf 92       	push	r11
    2044:	cf 92       	push	r12
    2046:	df 92       	push	r13
    2048:	ef 92       	push	r14
    204a:	ff 92       	push	r15
    204c:	0f 93       	push	r16
    204e:	1f 93       	push	r17
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	cd b7       	in	r28, 0x3d	; 61
    2056:	de b7       	in	r29, 0x3e	; 62
    2058:	e7 97       	sbiw	r28, 0x37	; 55
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	9c ab       	std	Y+52, r25	; 0x34
    2066:	8b ab       	std	Y+51, r24	; 0x33
    2068:	7c a7       	std	Y+44, r23	; 0x2c
    206a:	6b a7       	std	Y+43, r22	; 0x2b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    206c:	89 2b       	or	r24, r25
    206e:	19 f4       	brne	.+6      	; 0x2076 <f_open+0x46>
    2070:	89 e0       	ldi	r24, 0x09	; 9
    2072:	8a ab       	std	Y+50, r24	; 0x32
    2074:	3f c3       	rjmp	.+1662   	; 0x26f4 <f_open+0x6c4>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
    2076:	4f 73       	andi	r20, 0x3F	; 63
    2078:	4d a7       	std	Y+45, r20	; 0x2d
	res = find_volume(&path, &fs, mode);
    207a:	ce 01       	movw	r24, r28
    207c:	8b 96       	adiw	r24, 0x2b	; 43
    207e:	be 01       	movw	r22, r28
    2080:	67 5d       	subi	r22, 0xD7	; 215
    2082:	7f 4f       	sbci	r23, 0xFF	; 255
    2084:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <find_volume>
    2088:	8a ab       	std	Y+50, r24	; 0x32
	if (res == FR_OK) {
    208a:	88 23       	and	r24, r24
    208c:	09 f0       	breq	.+2      	; 0x2090 <f_open+0x60>
    208e:	2e c3       	rjmp	.+1628   	; 0x26ec <f_open+0x6bc>
		dj.obj.fs = fs;
    2090:	89 a4       	ldd	r8, Y+41	; 0x29
    2092:	9a a4       	ldd	r9, Y+42	; 0x2a
    2094:	9a 82       	std	Y+2, r9	; 0x02
    2096:	89 82       	std	Y+1, r8	; 0x01
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    2098:	eb a4       	ldd	r14, Y+43	; 0x2b
    209a:	fc a4       	ldd	r15, Y+44	; 0x2c
    209c:	03 c0       	rjmp	.+6      	; 0x20a4 <f_open+0x74>
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		dp->obj.sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    209e:	08 94       	sec
    20a0:	e1 1c       	adc	r14, r1
    20a2:	f1 1c       	adc	r15, r1
    20a4:	d7 01       	movw	r26, r14
    20a6:	8c 91       	ld	r24, X
    20a8:	8f 32       	cpi	r24, 0x2F	; 47
    20aa:	c9 f3       	breq	.-14     	; 0x209e <f_open+0x6e>
    20ac:	8c 35       	cpi	r24, 0x5C	; 92
    20ae:	b9 f3       	breq	.-18     	; 0x209e <f_open+0x6e>
		dp->obj.sclust = 0;					/* Start from root directory */
    20b0:	1f 82       	std	Y+7, r1	; 0x07
    20b2:	18 86       	std	Y+8, r1	; 0x08
    20b4:	19 86       	std	Y+9, r1	; 0x09
    20b6:	1a 86       	std	Y+10, r1	; 0x0a
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    20b8:	8c 91       	ld	r24, X
    20ba:	80 32       	cpi	r24, 0x20	; 32
    20bc:	78 f4       	brcc	.+30     	; 0x20dc <f_open+0xac>
		dp->fn[NSFLAG] = NS_NONAME;
    20be:	80 e8       	ldi	r24, 0x80	; 128
    20c0:	88 a7       	std	Y+40, r24	; 0x28
		res = dir_sdi(dp, 0);
    20c2:	ce 01       	movw	r24, r28
    20c4:	01 96       	adiw	r24, 0x01	; 1
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	50 e0       	ldi	r21, 0x00	; 0
    20ca:	60 e0       	ldi	r22, 0x00	; 0
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	0e 94 cf 04 	call	0x99e	; 0x99e <dir_sdi>
    20d2:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
    20d4:	88 23       	and	r24, r24
    20d6:	09 f4       	brne	.+2      	; 0x20da <f_open+0xaa>
    20d8:	cf c0       	rjmp	.+414    	; 0x2278 <f_open+0x248>
    20da:	d4 c0       	rjmp	.+424    	; 0x2284 <f_open+0x254>
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
	mem_set(sfn, ' ', 11);
    20dc:	0f 2e       	mov	r0, r31
    20de:	fd e1       	ldi	r31, 0x1D	; 29
    20e0:	2f 2e       	mov	r2, r31
    20e2:	33 24       	eor	r3, r3
    20e4:	f0 2d       	mov	r31, r0
    20e6:	2c 0e       	add	r2, r28
    20e8:	3d 1e       	adc	r3, r29
    20ea:	aa 24       	eor	r10, r10
    20ec:	bb 24       	eor	r11, r11
    20ee:	88 e0       	ldi	r24, 0x08	; 8
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	48 2e       	mov	r4, r24
    20f4:	79 2e       	mov	r7, r25
    20f6:	8b e0       	ldi	r24, 0x0B	; 11
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	68 2e       	mov	r6, r24
    20fc:	59 2e       	mov	r5, r25
    20fe:	c1 01       	movw	r24, r2
    2100:	60 e2       	ldi	r22, 0x20	; 32
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	4b e0       	ldi	r20, 0x0B	; 11
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	0e 94 25 02 	call	0x44a	; 0x44a <mem_set>
    210c:	d5 01       	movw	r26, r10
    210e:	85 01       	movw	r16, r10
    2110:	68 e0       	ldi	r22, 0x08	; 8
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	06 c0       	rjmp	.+12     	; 0x2122 <f_open+0xf2>
    2116:	84 2d       	mov	r24, r4
    2118:	97 2d       	mov	r25, r7
    211a:	dc 01       	movw	r26, r24
    211c:	86 2d       	mov	r24, r6
    211e:	95 2d       	mov	r25, r5
    2120:	bc 01       	movw	r22, r24
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];				/* Get a byte */
    2122:	f7 01       	movw	r30, r14
    2124:	e0 0f       	add	r30, r16
    2126:	f1 1f       	adc	r31, r17
    2128:	40 81       	ld	r20, Z
    212a:	0f 5f       	subi	r16, 0xFF	; 255
    212c:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c <= ' ') break; 			/* Break if end of the path name */
    212e:	41 32       	cpi	r20, 0x21	; 33
    2130:	08 f4       	brcc	.+2      	; 0x2134 <f_open+0x104>
    2132:	45 c0       	rjmp	.+138    	; 0x21be <f_open+0x18e>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    2134:	4f 32       	cpi	r20, 0x2F	; 47
    2136:	11 f0       	breq	.+4      	; 0x213c <f_open+0x10c>
    2138:	4c 35       	cpi	r20, 0x5C	; 92
    213a:	69 f4       	brne	.+26     	; 0x2156 <f_open+0x126>
    213c:	f7 01       	movw	r30, r14
    213e:	e0 0f       	add	r30, r16
    2140:	f1 1f       	adc	r31, r17
    2142:	03 c0       	rjmp	.+6      	; 0x214a <f_open+0x11a>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    2144:	0f 5f       	subi	r16, 0xFF	; 255
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	31 96       	adiw	r30, 0x01	; 1
    214a:	80 81       	ld	r24, Z
    214c:	8f 32       	cpi	r24, 0x2F	; 47
    214e:	d1 f3       	breq	.-12     	; 0x2144 <f_open+0x114>
    2150:	8c 35       	cpi	r24, 0x5C	; 92
    2152:	c1 f3       	breq	.-16     	; 0x2144 <f_open+0x114>
    2154:	34 c0       	rjmp	.+104    	; 0x21be <f_open+0x18e>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
    2156:	4e 32       	cpi	r20, 0x2E	; 46
    2158:	19 f0       	breq	.+6      	; 0x2160 <f_open+0x130>
    215a:	a6 17       	cp	r26, r22
    215c:	b7 07       	cpc	r27, r23
    215e:	38 f0       	brcs	.+14     	; 0x216e <f_open+0x13e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
    2160:	6b 30       	cpi	r22, 0x0B	; 11
    2162:	71 05       	cpc	r23, r1
    2164:	09 f4       	brne	.+2      	; 0x2168 <f_open+0x138>
    2166:	e6 c2       	rjmp	.+1484   	; 0x2734 <f_open+0x704>
    2168:	4e 32       	cpi	r20, 0x2E	; 46
    216a:	a9 f2       	breq	.-86     	; 0x2116 <f_open+0xe6>
    216c:	e3 c2       	rjmp	.+1478   	; 0x2734 <f_open+0x704>
#if FF_CODE_PAGE == 0
		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
		}
#elif FF_CODE_PAGE < 900
		if (c >= 0x80) {				/* Is SBC extended character? */
    216e:	44 23       	and	r20, r20
    2170:	54 f4       	brge	.+20     	; 0x2186 <f_open+0x156>
			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
    2172:	84 2f       	mov	r24, r20
    2174:	8f 77       	andi	r24, 0x7F	; 127
    2176:	e9 ee       	ldi	r30, 0xE9	; 233
    2178:	f1 e0       	ldi	r31, 0x01	; 1
    217a:	e8 0f       	add	r30, r24
    217c:	f1 1d       	adc	r31, r1
    217e:	40 81       	ld	r20, Z
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    2180:	24 2f       	mov	r18, r20
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	02 c0       	rjmp	.+4      	; 0x218a <f_open+0x15a>
    2186:	24 2f       	mov	r18, r20
    2188:	30 e0       	ldi	r19, 0x00	; 0


/* Check if chr is contained in the string */
static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
{
	while (*str && *str != chr) str++;
    218a:	22 32       	cpi	r18, 0x22	; 34
    218c:	31 05       	cpc	r19, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <f_open+0x162>
    2190:	d1 c2       	rjmp	.+1442   	; 0x2734 <f_open+0x704>
    2192:	ee e0       	ldi	r30, 0x0E	; 14
    2194:	f1 e0       	ldi	r31, 0x01	; 1
    2196:	31 96       	adiw	r30, 0x01	; 1
    2198:	80 81       	ld	r24, Z
    219a:	88 23       	and	r24, r24
    219c:	29 f0       	breq	.+10     	; 0x21a8 <f_open+0x178>
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	28 17       	cp	r18, r24
    21a2:	39 07       	cpc	r19, r25
    21a4:	c1 f7       	brne	.-16     	; 0x2196 <f_open+0x166>
    21a6:	c6 c2       	rjmp	.+1420   	; 0x2734 <f_open+0x704>
			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    21a8:	84 2f       	mov	r24, r20
    21aa:	81 56       	subi	r24, 0x61	; 97
    21ac:	8a 31       	cpi	r24, 0x1A	; 26
    21ae:	08 f4       	brcc	.+2      	; 0x21b2 <f_open+0x182>
    21b0:	40 52       	subi	r20, 0x20	; 32
			sfn[i++] = c;
    21b2:	f1 01       	movw	r30, r2
    21b4:	ea 0f       	add	r30, r26
    21b6:	fb 1f       	adc	r31, r27
    21b8:	40 83       	st	Z, r20
    21ba:	11 96       	adiw	r26, 0x01	; 1
    21bc:	b2 cf       	rjmp	.-156    	; 0x2122 <f_open+0xf2>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    21be:	ab 2b       	or	r26, r27
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <f_open+0x194>
    21c2:	b8 c2       	rjmp	.+1392   	; 0x2734 <f_open+0x704>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    21c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21c6:	85 3e       	cpi	r24, 0xE5	; 229
    21c8:	11 f4       	brne	.+4      	; 0x21ce <f_open+0x19e>
    21ca:	b5 e0       	ldi	r27, 0x05	; 5
    21cc:	bd 8f       	std	Y+29, r27	; 0x1d
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    21ce:	41 32       	cpi	r20, 0x21	; 33
    21d0:	10 f0       	brcs	.+4      	; 0x21d6 <f_open+0x1a6>
    21d2:	80 e0       	ldi	r24, 0x00	; 0
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <f_open+0x1a8>
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	88 a7       	std	Y+40, r24	; 0x28
static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    21da:	c9 80       	ldd	r12, Y+1	; 0x01
    21dc:	da 80       	ldd	r13, Y+2	; 0x02
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    21de:	ce 01       	movw	r24, r28
    21e0:	01 96       	adiw	r24, 0x01	; 1
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	50 e0       	ldi	r21, 0x00	; 0
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	70 e0       	ldi	r23, 0x00	; 0
    21ea:	0e 94 cf 04 	call	0x99e	; 0x99e <dir_sdi>
    21ee:	28 2f       	mov	r18, r24
	if (res != FR_OK) return res;
    21f0:	88 23       	and	r24, r24
    21f2:	39 f5       	brne	.+78     	; 0x2242 <f_open+0x212>
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    21f4:	4f 89       	ldd	r20, Y+23	; 0x17
    21f6:	58 8d       	ldd	r21, Y+24	; 0x18
    21f8:	69 8d       	ldd	r22, Y+25	; 0x19
    21fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21fc:	c6 01       	movw	r24, r12
    21fe:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    2202:	28 2f       	mov	r18, r24
		if (res != FR_OK) break;
    2204:	88 23       	and	r24, r24
    2206:	e9 f4       	brne	.+58     	; 0x2242 <f_open+0x212>
		c = dp->dir[DIR_Name];
    2208:	eb 8d       	ldd	r30, Y+27	; 0x1b
    220a:	fc 8d       	ldd	r31, Y+28	; 0x1c
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    220c:	80 81       	ld	r24, Z
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <f_open+0x1e4>
    2212:	c3 c2       	rjmp	.+1414   	; 0x279a <f_open+0x76a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    2214:	83 85       	ldd	r24, Z+11	; 0x0b
    2216:	8f 73       	andi	r24, 0x3F	; 63
    2218:	8d 83       	std	Y+5, r24	; 0x05
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    221a:	83 85       	ldd	r24, Z+11	; 0x0b
    221c:	83 fd       	sbrc	r24, 3
    221e:	09 c0       	rjmp	.+18     	; 0x2232 <f_open+0x202>
    2220:	cf 01       	movw	r24, r30
    2222:	b1 01       	movw	r22, r2
    2224:	4b e0       	ldi	r20, 0x0B	; 11
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	0e 94 2b 02 	call	0x456	; 0x456 <mem_cmp>
    222c:	89 2b       	or	r24, r25
    222e:	09 f4       	brne	.+2      	; 0x2232 <f_open+0x202>
    2230:	7b c2       	rjmp	.+1270   	; 0x2728 <f_open+0x6f8>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    2232:	ce 01       	movw	r24, r28
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	b5 01       	movw	r22, r10
    2238:	0e 94 65 08 	call	0x10ca	; 0x10ca <dir_next>
    223c:	28 2f       	mov	r18, r24
	} while (res == FR_OK);
    223e:	88 23       	and	r24, r24
    2240:	c9 f2       	breq	.-78     	; 0x21f4 <f_open+0x1c4>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    2242:	88 a5       	ldd	r24, Y+40	; 0x28
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    2244:	24 30       	cpi	r18, 0x04	; 4
    2246:	f1 f4       	brne	.+60     	; 0x2284 <f_open+0x254>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    2248:	82 ff       	sbrs	r24, 2
    224a:	72 c2       	rjmp	.+1252   	; 0x2730 <f_open+0x700>
    224c:	24 e0       	ldi	r18, 0x04	; 4
    224e:	1a c0       	rjmp	.+52     	; 0x2284 <f_open+0x254>
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    2250:	8d 81       	ldd	r24, Y+5	; 0x05
    2252:	84 ff       	sbrs	r24, 4
    2254:	6d c2       	rjmp	.+1242   	; 0x2730 <f_open+0x700>
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
    2256:	e0 0e       	add	r14, r16
    2258:	f1 1e       	adc	r15, r17
				dp->obj.c_ofs = dp->blk_ofs;
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    225a:	8f 85       	ldd	r24, Y+15	; 0x0f
    225c:	98 89       	ldd	r25, Y+16	; 0x10
    225e:	91 70       	andi	r25, 0x01	; 1
    2260:	8f 96       	adiw	r24, 0x2f	; 47
    2262:	b4 01       	movw	r22, r8
    2264:	68 0f       	add	r22, r24
    2266:	79 1f       	adc	r23, r25
    2268:	c4 01       	movw	r24, r8
    226a:	0e 94 89 02 	call	0x512	; 0x512 <ld_clust>
    226e:	6f 83       	std	Y+7, r22	; 0x07
    2270:	78 87       	std	Y+8, r23	; 0x08
    2272:	89 87       	std	Y+9, r24	; 0x09
    2274:	9a 87       	std	Y+10, r25	; 0x0a
    2276:	43 cf       	rjmp	.-378    	; 0x20fe <f_open+0xce>
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    2278:	88 a5       	ldd	r24, Y+40	; 0x28
    227a:	88 23       	and	r24, r24
    227c:	14 f4       	brge	.+4      	; 0x2282 <f_open+0x252>
    227e:	26 e0       	ldi	r18, 0x06	; 6
    2280:	01 c0       	rjmp	.+2      	; 0x2284 <f_open+0x254>
    2282:	2a a9       	ldd	r18, Y+50	; 0x32
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2284:	ed a5       	ldd	r30, Y+45	; 0x2d
    2286:	4e 2f       	mov	r20, r30
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	ca 01       	movw	r24, r20
    228c:	8c 71       	andi	r24, 0x1C	; 28
    228e:	90 70       	andi	r25, 0x00	; 0
    2290:	89 2b       	or	r24, r25
    2292:	09 f4       	brne	.+2      	; 0x2296 <f_open+0x266>
    2294:	20 c1       	rjmp	.+576    	; 0x24d6 <f_open+0x4a6>
			if (res != FR_OK) {					/* No file, create new */
    2296:	22 23       	and	r18, r18
    2298:	09 f4       	brne	.+2      	; 0x229c <f_open+0x26c>
    229a:	58 c0       	rjmp	.+176    	; 0x234c <f_open+0x31c>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
    229c:	24 30       	cpi	r18, 0x04	; 4
    229e:	09 f0       	breq	.+2      	; 0x22a2 <f_open+0x272>
    22a0:	7b c1       	rjmp	.+758    	; 0x2598 <f_open+0x568>
static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    22a2:	09 81       	ldd	r16, Y+1	; 0x01
    22a4:	1a 81       	ldd	r17, Y+2	; 0x02
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    22a6:	ce 01       	movw	r24, r28
    22a8:	01 96       	adiw	r24, 0x01	; 1
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	60 e0       	ldi	r22, 0x00	; 0
    22b0:	70 e0       	ldi	r23, 0x00	; 0
    22b2:	0e 94 cf 04 	call	0x99e	; 0x99e <dir_sdi>
    22b6:	28 2f       	mov	r18, r24
	if (res == FR_OK) {
    22b8:	88 23       	and	r24, r24
    22ba:	e9 f4       	brne	.+58     	; 0x22f6 <f_open+0x2c6>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    22bc:	7e 01       	movw	r14, r28
    22be:	08 94       	sec
    22c0:	e1 1c       	adc	r14, r1
    22c2:	f1 1c       	adc	r15, r1

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    22c4:	4f 89       	ldd	r20, Y+23	; 0x17
    22c6:	58 8d       	ldd	r21, Y+24	; 0x18
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	c8 01       	movw	r24, r16
    22ce:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    22d2:	28 2f       	mov	r18, r24
			if (res != FR_OK) break;
    22d4:	88 23       	and	r24, r24
    22d6:	79 f4       	brne	.+30     	; 0x22f6 <f_open+0x2c6>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    22d8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    22da:	fc 8d       	ldd	r31, Y+28	; 0x1c
    22dc:	e0 81       	ld	r30, Z
    22de:	e5 3e       	cpi	r30, 0xE5	; 229
    22e0:	79 f0       	breq	.+30     	; 0x2300 <f_open+0x2d0>
    22e2:	ee 23       	and	r30, r30
    22e4:	69 f0       	breq	.+26     	; 0x2300 <f_open+0x2d0>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    22e6:	c7 01       	movw	r24, r14
    22e8:	61 e0       	ldi	r22, 0x01	; 1
    22ea:	70 e0       	ldi	r23, 0x00	; 0
    22ec:	0e 94 65 08 	call	0x10ca	; 0x10ca <dir_next>
    22f0:	28 2f       	mov	r18, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    22f2:	88 23       	and	r24, r24
    22f4:	39 f3       	breq	.-50     	; 0x22c4 <f_open+0x294>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    22f6:	24 30       	cpi	r18, 0x04	; 4
    22f8:	39 f1       	breq	.+78     	; 0x2348 <f_open+0x318>
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
    22fa:	22 23       	and	r18, r18
    22fc:	09 f0       	breq	.+2      	; 0x2300 <f_open+0x2d0>
    22fe:	4c c1       	rjmp	.+664    	; 0x2598 <f_open+0x568>
		res = move_window(fs, dp->sect);
    2300:	4f 89       	ldd	r20, Y+23	; 0x17
    2302:	58 8d       	ldd	r21, Y+24	; 0x18
    2304:	69 8d       	ldd	r22, Y+25	; 0x19
    2306:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2308:	c8 01       	movw	r24, r16
    230a:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    230e:	28 2f       	mov	r18, r24
		if (res == FR_OK) {
    2310:	88 23       	and	r24, r24
    2312:	09 f0       	breq	.+2      	; 0x2316 <f_open+0x2e6>
    2314:	41 c1       	rjmp	.+642    	; 0x2598 <f_open+0x568>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    2316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	40 e2       	ldi	r20, 0x20	; 32
    2320:	50 e0       	ldi	r21, 0x00	; 0
    2322:	0e 94 25 02 	call	0x44a	; 0x44a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    2326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232a:	be 01       	movw	r22, r28
    232c:	63 5e       	subi	r22, 0xE3	; 227
    232e:	7f 4f       	sbci	r23, 0xFF	; 255
    2330:	4b e0       	ldi	r20, 0x0B	; 11
    2332:	50 e0       	ldi	r21, 0x00	; 0
    2334:	0e 94 0d 02 	call	0x41a	; 0x41a <mem_cpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	d8 01       	movw	r26, r16
    233c:	13 96       	adiw	r26, 0x03	; 3
    233e:	8c 93       	st	X, r24
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2340:	bd a5       	ldd	r27, Y+45	; 0x2d
    2342:	b8 60       	ori	r27, 0x08	; 8
    2344:	bd a7       	std	Y+45, r27	; 0x2d
    2346:	09 c0       	rjmp	.+18     	; 0x235a <f_open+0x32a>
    2348:	27 e0       	ldi	r18, 0x07	; 7
    234a:	26 c1       	rjmp	.+588    	; 0x2598 <f_open+0x568>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	81 71       	andi	r24, 0x11	; 17
    2350:	11 f0       	breq	.+4      	; 0x2356 <f_open+0x326>
    2352:	27 e0       	ldi	r18, 0x07	; 7
    2354:	21 c1       	rjmp	.+578    	; 0x2598 <f_open+0x568>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    2356:	e2 fd       	sbrc	r30, 2
    2358:	ef c1       	rjmp	.+990    	; 0x2738 <f_open+0x708>
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
    235a:	ed a5       	ldd	r30, Y+45	; 0x2d
    235c:	e3 ff       	sbrs	r30, 3
    235e:	cb c0       	rjmp	.+406    	; 0x24f6 <f_open+0x4c6>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
    2360:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2362:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2364:	89 a5       	ldd	r24, Y+41	; 0x29
    2366:	9a a5       	ldd	r25, Y+42	; 0x2a
    2368:	b8 01       	movw	r22, r16
    236a:	0e 94 89 02 	call	0x512	; 0x512 <ld_clust>
    236e:	4b 01       	movw	r8, r22
    2370:	5c 01       	movw	r10, r24
					st_dword(dj.dir + DIR_CrtTime, GET_FATTIME());	/* Set created time */
    2372:	c8 01       	movw	r24, r16
    2374:	0e 96       	adiw	r24, 0x0e	; 14
    2376:	40 e0       	ldi	r20, 0x00	; 0
    2378:	50 e0       	ldi	r21, 0x00	; 0
    237a:	61 e2       	ldi	r22, 0x21	; 33
    237c:	7c e4       	ldi	r23, 0x4C	; 76
    237e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    2382:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2384:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2386:	80 e2       	ldi	r24, 0x20	; 32
    2388:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
    238a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    238c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    238e:	89 a5       	ldd	r24, Y+41	; 0x29
    2390:	9a a5       	ldd	r25, Y+42	; 0x2a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e0       	ldi	r20, 0x00	; 0
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	0e 94 b8 02 	call	0x570	; 0x570 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
    239e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23a2:	4c 96       	adiw	r24, 0x1c	; 28
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	50 e0       	ldi	r21, 0x00	; 0
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	70 e0       	ldi	r23, 0x00	; 0
    23ac:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <st_dword>
					fs->wflag = 1;
    23b0:	e9 a5       	ldd	r30, Y+41	; 0x29
    23b2:	fa a5       	ldd	r31, Y+42	; 0x2a
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	83 83       	std	Z+3, r24	; 0x03
					if (cl != 0) {						/* Remove the cluster chain if exist */
    23b8:	81 14       	cp	r8, r1
    23ba:	91 04       	cpc	r9, r1
    23bc:	a1 04       	cpc	r10, r1
    23be:	b1 04       	cpc	r11, r1
    23c0:	09 f4       	brne	.+2      	; 0x23c4 <f_open+0x394>
    23c2:	96 c0       	rjmp	.+300    	; 0x24f0 <f_open+0x4c0>
						dw = fs->winsect;
    23c4:	e9 a5       	ldd	r30, Y+41	; 0x29
    23c6:	fa a5       	ldd	r31, Y+42	; 0x2a
    23c8:	83 a5       	ldd	r24, Z+43	; 0x2b
    23ca:	94 a5       	ldd	r25, Z+44	; 0x2c
    23cc:	a5 a5       	ldd	r26, Z+45	; 0x2d
    23ce:	b6 a5       	ldd	r27, Z+46	; 0x2e
    23d0:	8e a7       	std	Y+46, r24	; 0x2e
    23d2:	9f a7       	std	Y+47, r25	; 0x2f
    23d4:	a8 ab       	std	Y+48, r26	; 0x30
    23d6:	b9 ab       	std	Y+49, r27	; 0x31
	DWORD pclst			/* Previous cluster of clst (0:entire chain) */
)
{
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    23d8:	69 80       	ldd	r6, Y+1	; 0x01
    23da:	7a 80       	ldd	r7, Y+2	; 0x02
#endif
#if FF_USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    23dc:	92 e0       	ldi	r25, 0x02	; 2
    23de:	89 16       	cp	r8, r25
    23e0:	91 04       	cpc	r9, r1
    23e2:	a1 04       	cpc	r10, r1
    23e4:	b1 04       	cpc	r11, r1
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <f_open+0x3ba>
    23e8:	74 c0       	rjmp	.+232    	; 0x24d2 <f_open+0x4a2>
    23ea:	f3 01       	movw	r30, r6
    23ec:	83 89       	ldd	r24, Z+19	; 0x13
    23ee:	94 89       	ldd	r25, Z+20	; 0x14
    23f0:	a5 89       	ldd	r26, Z+21	; 0x15
    23f2:	b6 89       	ldd	r27, Z+22	; 0x16
    23f4:	88 16       	cp	r8, r24
    23f6:	99 06       	cpc	r9, r25
    23f8:	aa 06       	cpc	r10, r26
    23fa:	bb 06       	cpc	r11, r27
    23fc:	08 f0       	brcs	.+2      	; 0x2400 <f_open+0x3d0>
    23fe:	69 c0       	rjmp	.+210    	; 0x24d2 <f_open+0x4a2>
    2400:	18 2d       	mov	r17, r8
    2402:	09 2d       	mov	r16, r9
    2404:	5a 2c       	mov	r5, r10
    2406:	4b 2c       	mov	r4, r11
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    2408:	1e 01       	movw	r2, r28
    240a:	08 94       	sec
    240c:	21 1c       	adc	r2, r1
    240e:	31 1c       	adc	r3, r1
    2410:	c1 01       	movw	r24, r2
    2412:	41 2f       	mov	r20, r17
    2414:	50 2f       	mov	r21, r16
    2416:	65 2d       	mov	r22, r5
    2418:	74 2d       	mov	r23, r4
    241a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
    241e:	6b 01       	movw	r12, r22
    2420:	7c 01       	movw	r14, r24
		if (nxt == 0) break;				/* Empty cluster? */
    2422:	61 15       	cp	r22, r1
    2424:	71 05       	cpc	r23, r1
    2426:	81 05       	cpc	r24, r1
    2428:	91 05       	cpc	r25, r1
    242a:	09 f4       	brne	.+2      	; 0x242e <f_open+0x3fe>
    242c:	87 c1       	rjmp	.+782    	; 0x273c <f_open+0x70c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    242e:	61 30       	cpi	r22, 0x01	; 1
    2430:	71 05       	cpc	r23, r1
    2432:	81 05       	cpc	r24, r1
    2434:	91 05       	cpc	r25, r1
    2436:	09 f4       	brne	.+2      	; 0x243a <f_open+0x40a>
    2438:	4c c0       	rjmp	.+152    	; 0x24d2 <f_open+0x4a2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    243a:	8f ef       	ldi	r24, 0xFF	; 255
    243c:	c8 16       	cp	r12, r24
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	d8 06       	cpc	r13, r24
    2442:	8f ef       	ldi	r24, 0xFF	; 255
    2444:	e8 06       	cpc	r14, r24
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	f8 06       	cpc	r15, r24
    244a:	11 f4       	brne	.+4      	; 0x2450 <f_open+0x420>
    244c:	21 e0       	ldi	r18, 0x01	; 1
    244e:	a4 c0       	rjmp	.+328    	; 0x2598 <f_open+0x568>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    2450:	c3 01       	movw	r24, r6
    2452:	41 2f       	mov	r20, r17
    2454:	50 2f       	mov	r21, r16
    2456:	65 2d       	mov	r22, r5
    2458:	74 2d       	mov	r23, r4
    245a:	00 e0       	ldi	r16, 0x00	; 0
    245c:	10 e0       	ldi	r17, 0x00	; 0
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <put_fat>
    2466:	28 2f       	mov	r18, r24
			if (res != FR_OK) return res;
    2468:	88 23       	and	r24, r24
    246a:	09 f0       	breq	.+2      	; 0x246e <f_open+0x43e>
    246c:	95 c0       	rjmp	.+298    	; 0x2598 <f_open+0x568>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    246e:	d3 01       	movw	r26, r6
    2470:	1f 96       	adiw	r26, 0x0f	; 15
    2472:	2d 91       	ld	r18, X+
    2474:	3d 91       	ld	r19, X+
    2476:	4d 91       	ld	r20, X+
    2478:	5c 91       	ld	r21, X
    247a:	52 97       	sbiw	r26, 0x12	; 18
    247c:	53 96       	adiw	r26, 0x13	; 19
    247e:	8d 91       	ld	r24, X+
    2480:	9d 91       	ld	r25, X+
    2482:	0d 90       	ld	r0, X+
    2484:	bc 91       	ld	r27, X
    2486:	a0 2d       	mov	r26, r0
    2488:	02 97       	sbiw	r24, 0x02	; 2
    248a:	a1 09       	sbc	r26, r1
    248c:	b1 09       	sbc	r27, r1
    248e:	28 17       	cp	r18, r24
    2490:	39 07       	cpc	r19, r25
    2492:	4a 07       	cpc	r20, r26
    2494:	5b 07       	cpc	r21, r27
    2496:	68 f4       	brcc	.+26     	; 0x24b2 <f_open+0x482>
			fs->free_clst++;
    2498:	da 01       	movw	r26, r20
    249a:	c9 01       	movw	r24, r18
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	a1 1d       	adc	r26, r1
    24a0:	b1 1d       	adc	r27, r1
    24a2:	f3 01       	movw	r30, r6
    24a4:	87 87       	std	Z+15, r24	; 0x0f
    24a6:	90 8b       	std	Z+16, r25	; 0x10
    24a8:	a1 8b       	std	Z+17, r26	; 0x11
    24aa:	b2 8b       	std	Z+18, r27	; 0x12
			fs->fsi_flag |= 1;
    24ac:	84 81       	ldd	r24, Z+4	; 0x04
    24ae:	81 60       	ori	r24, 0x01	; 1
    24b0:	84 83       	std	Z+4, r24	; 0x04
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    24b2:	f3 01       	movw	r30, r6
    24b4:	83 89       	ldd	r24, Z+19	; 0x13
    24b6:	94 89       	ldd	r25, Z+20	; 0x14
    24b8:	a5 89       	ldd	r26, Z+21	; 0x15
    24ba:	b6 89       	ldd	r27, Z+22	; 0x16
    24bc:	c8 16       	cp	r12, r24
    24be:	d9 06       	cpc	r13, r25
    24c0:	ea 06       	cpc	r14, r26
    24c2:	fb 06       	cpc	r15, r27
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <f_open+0x498>
    24c6:	3a c1       	rjmp	.+628    	; 0x273c <f_open+0x70c>
    24c8:	1c 2d       	mov	r17, r12
    24ca:	0d 2d       	mov	r16, r13
    24cc:	5e 2c       	mov	r5, r14
    24ce:	4f 2c       	mov	r4, r15
    24d0:	9f cf       	rjmp	.-194    	; 0x2410 <f_open+0x3e0>
    24d2:	22 e0       	ldi	r18, 0x02	; 2
    24d4:	61 c0       	rjmp	.+194    	; 0x2598 <f_open+0x568>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
    24d6:	22 23       	and	r18, r18
    24d8:	09 f0       	breq	.+2      	; 0x24dc <f_open+0x4ac>
    24da:	5e c0       	rjmp	.+188    	; 0x2598 <f_open+0x568>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
    24dc:	8d 81       	ldd	r24, Y+5	; 0x05
    24de:	84 ff       	sbrs	r24, 4
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <f_open+0x4b6>
    24e2:	24 e0       	ldi	r18, 0x04	; 4
    24e4:	59 c0       	rjmp	.+178    	; 0x2598 <f_open+0x568>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
    24e6:	e1 ff       	sbrs	r30, 1
    24e8:	41 c1       	rjmp	.+642    	; 0x276c <f_open+0x73c>
    24ea:	80 fd       	sbrc	r24, 0
    24ec:	43 c1       	rjmp	.+646    	; 0x2774 <f_open+0x744>
    24ee:	3e c1       	rjmp	.+636    	; 0x276c <f_open+0x73c>
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    24f0:	fd a5       	ldd	r31, Y+45	; 0x2d
    24f2:	f0 64       	ori	r31, 0x40	; 64
    24f4:	fd a7       	std	Y+45, r31	; 0x2d
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    24f6:	e9 a4       	ldd	r14, Y+41	; 0x29
    24f8:	fa a4       	ldd	r15, Y+42	; 0x2a
    24fa:	f7 01       	movw	r30, r14
    24fc:	83 a5       	ldd	r24, Z+43	; 0x2b
    24fe:	94 a5       	ldd	r25, Z+44	; 0x2c
    2500:	a5 a5       	ldd	r26, Z+45	; 0x2d
    2502:	b6 a5       	ldd	r27, Z+46	; 0x2e
    2504:	eb a9       	ldd	r30, Y+51	; 0x33
    2506:	fc a9       	ldd	r31, Y+52	; 0x34
    2508:	84 8f       	std	Z+28, r24	; 0x1c
    250a:	95 8f       	std	Z+29, r25	; 0x1d
    250c:	a6 8f       	std	Z+30, r26	; 0x1e
    250e:	b7 8f       	std	Z+31, r27	; 0x1f
			fp->dir_ptr = dj.dir;
    2510:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2512:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2514:	11 a3       	std	Z+33, r17	; 0x21
    2516:	00 a3       	std	Z+32, r16	; 0x20
				fp->obj.c_ofs = dj.blk_ofs;
				init_alloc_info(fs, &fp->obj);
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
    2518:	c7 01       	movw	r24, r14
    251a:	b8 01       	movw	r22, r16
    251c:	0e 94 89 02 	call	0x512	; 0x512 <ld_clust>
    2520:	ab a9       	ldd	r26, Y+51	; 0x33
    2522:	bc a9       	ldd	r27, Y+52	; 0x34
    2524:	16 96       	adiw	r26, 0x06	; 6
    2526:	6d 93       	st	X+, r22
    2528:	7d 93       	st	X+, r23
    252a:	8d 93       	st	X+, r24
    252c:	9c 93       	st	X, r25
    252e:	19 97       	sbiw	r26, 0x09	; 9
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    2530:	c8 01       	movw	r24, r16
    2532:	4c 96       	adiw	r24, 0x1c	; 28
    2534:	0e 94 ca 01 	call	0x394	; 0x394 <ld_dword>
    2538:	eb a9       	ldd	r30, Y+51	; 0x33
    253a:	fc a9       	ldd	r31, Y+52	; 0x34
    253c:	62 87       	std	Z+10, r22	; 0x0a
    253e:	73 87       	std	Z+11, r23	; 0x0b
    2540:	84 87       	std	Z+12, r24	; 0x0c
    2542:	95 87       	std	Z+13, r25	; 0x0d
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    2544:	f1 82       	std	Z+1, r15	; 0x01
    2546:	e0 82       	st	Z, r14
			fp->obj.id = fs->id;
    2548:	d7 01       	movw	r26, r14
    254a:	15 96       	adiw	r26, 0x05	; 5
    254c:	8d 91       	ld	r24, X+
    254e:	9c 91       	ld	r25, X
    2550:	16 97       	sbiw	r26, 0x06	; 6
    2552:	93 83       	std	Z+3, r25	; 0x03
    2554:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    2556:	bd a5       	ldd	r27, Y+45	; 0x2d
    2558:	b6 87       	std	Z+14, r27	; 0x0e
			fp->err = 0;			/* Clear error flag */
    255a:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    255c:	eb a9       	ldd	r30, Y+51	; 0x33
    255e:	fc a9       	ldd	r31, Y+52	; 0x34
    2560:	10 8e       	std	Z+24, r1	; 0x18
    2562:	11 8e       	std	Z+25, r1	; 0x19
    2564:	12 8e       	std	Z+26, r1	; 0x1a
    2566:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    2568:	ab a9       	ldd	r26, Y+51	; 0x33
    256a:	bc a9       	ldd	r27, Y+52	; 0x34
    256c:	50 96       	adiw	r26, 0x10	; 16
    256e:	1d 92       	st	X+, r1
    2570:	1d 92       	st	X+, r1
    2572:	1d 92       	st	X+, r1
    2574:	1c 92       	st	X, r1
    2576:	53 97       	sbiw	r26, 0x13	; 19
#if !FF_FS_READONLY
#if !FF_FS_TINY
			mem_set(fp->buf, 0, FF_MAX_SS);	/* Clear sector buffer */
    2578:	1d 01       	movw	r2, r26
    257a:	e2 e2       	ldi	r30, 0x22	; 34
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	2e 0e       	add	r2, r30
    2580:	3f 1e       	adc	r3, r31
    2582:	c1 01       	movw	r24, r2
    2584:	60 e0       	ldi	r22, 0x00	; 0
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	52 e0       	ldi	r21, 0x02	; 2
    258c:	0e 94 25 02 	call	0x44a	; 0x44a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    2590:	fd a5       	ldd	r31, Y+45	; 0x2d
    2592:	f5 fd       	sbrc	r31, 5
    2594:	03 c0       	rjmp	.+6      	; 0x259c <f_open+0x56c>
    2596:	ae c0       	rjmp	.+348    	; 0x26f4 <f_open+0x6c4>
    2598:	2a ab       	std	Y+50, r18	; 0x32
    259a:	a8 c0       	rjmp	.+336    	; 0x26ec <f_open+0x6bc>
    259c:	eb a9       	ldd	r30, Y+51	; 0x33
    259e:	fc a9       	ldd	r31, Y+52	; 0x34
    25a0:	82 85       	ldd	r24, Z+10	; 0x0a
    25a2:	93 85       	ldd	r25, Z+11	; 0x0b
    25a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    25a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	a1 05       	cpc	r26, r1
    25ac:	b1 05       	cpc	r27, r1
    25ae:	09 f4       	brne	.+2      	; 0x25b2 <f_open+0x582>
    25b0:	a1 c0       	rjmp	.+322    	; 0x26f4 <f_open+0x6c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    25b2:	80 8b       	std	Z+16, r24	; 0x10
    25b4:	91 8b       	std	Z+17, r25	; 0x11
    25b6:	a2 8b       	std	Z+18, r26	; 0x12
    25b8:	b3 8b       	std	Z+19, r27	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    25ba:	e9 a5       	ldd	r30, Y+41	; 0x29
    25bc:	fa a5       	ldd	r31, Y+42	; 0x2a
    25be:	81 85       	ldd	r24, Z+9	; 0x09
    25c0:	92 85       	ldd	r25, Z+10	; 0x0a
    25c2:	a0 e0       	ldi	r26, 0x00	; 0
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	4c 01       	movw	r8, r24
    25c8:	5d 01       	movw	r10, r26
    25ca:	07 2e       	mov	r0, r23
    25cc:	79 e0       	ldi	r23, 0x09	; 9
    25ce:	88 0c       	add	r8, r8
    25d0:	99 1c       	adc	r9, r9
    25d2:	aa 1c       	adc	r10, r10
    25d4:	bb 1c       	adc	r11, r11
    25d6:	7a 95       	dec	r23
    25d8:	d1 f7       	brne	.-12     	; 0x25ce <f_open+0x59e>
    25da:	70 2d       	mov	r23, r0
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    25dc:	ab a9       	ldd	r26, Y+51	; 0x33
    25de:	bc a9       	ldd	r27, Y+52	; 0x34
    25e0:	16 96       	adiw	r26, 0x06	; 6
    25e2:	4d 91       	ld	r20, X+
    25e4:	5d 91       	ld	r21, X+
    25e6:	6d 91       	ld	r22, X+
    25e8:	7c 91       	ld	r23, X
    25ea:	19 97       	sbiw	r26, 0x09	; 9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    25ec:	1a 96       	adiw	r26, 0x0a	; 10
    25ee:	cd 90       	ld	r12, X+
    25f0:	dd 90       	ld	r13, X+
    25f2:	ed 90       	ld	r14, X+
    25f4:	fc 90       	ld	r15, X
    25f6:	1d 97       	sbiw	r26, 0x0d	; 13
    25f8:	8c 14       	cp	r8, r12
    25fa:	9d 04       	cpc	r9, r13
    25fc:	ae 04       	cpc	r10, r14
    25fe:	bf 04       	cpc	r11, r15
    2600:	08 f0       	brcs	.+2      	; 0x2604 <f_open+0x5d4>
    2602:	ba c0       	rjmp	.+372    	; 0x2778 <f_open+0x748>
					clst = get_fat(&fp->obj, clst);
    2604:	ad ab       	std	Y+53, r26	; 0x35
    2606:	be ab       	std	Y+54, r27	; 0x36
    2608:	44 24       	eor	r4, r4
    260a:	55 24       	eor	r5, r5
    260c:	32 01       	movw	r6, r4
    260e:	48 18       	sub	r4, r8
    2610:	59 08       	sbc	r5, r9
    2612:	6a 08       	sbc	r6, r10
    2614:	7b 08       	sbc	r7, r11
    2616:	c8 18       	sub	r12, r8
    2618:	d9 08       	sbc	r13, r9
    261a:	ea 08       	sbc	r14, r10
    261c:	fb 08       	sbc	r15, r11
					if (clst <= 1) res = FR_INT_ERR;
    261e:	ba a9       	ldd	r27, Y+50	; 0x32
    2620:	bf ab       	std	Y+55, r27	; 0x37
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
    2622:	8d a9       	ldd	r24, Y+53	; 0x35
    2624:	9e a9       	ldd	r25, Y+54	; 0x36
    2626:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <get_fat>
    262a:	ab 01       	movw	r20, r22
    262c:	bc 01       	movw	r22, r24
					if (clst <= 1) res = FR_INT_ERR;
    262e:	42 30       	cpi	r20, 0x02	; 2
    2630:	51 05       	cpc	r21, r1
    2632:	61 05       	cpc	r22, r1
    2634:	71 05       	cpc	r23, r1
    2636:	10 f4       	brcc	.+4      	; 0x263c <f_open+0x60c>
    2638:	82 e0       	ldi	r24, 0x02	; 2
    263a:	01 c0       	rjmp	.+2      	; 0x263e <f_open+0x60e>
    263c:	8f a9       	ldd	r24, Y+55	; 0x37
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    263e:	4f 3f       	cpi	r20, 0xFF	; 255
    2640:	ef ef       	ldi	r30, 0xFF	; 255
    2642:	5e 07       	cpc	r21, r30
    2644:	ef ef       	ldi	r30, 0xFF	; 255
    2646:	6e 07       	cpc	r22, r30
    2648:	ef ef       	ldi	r30, 0xFF	; 255
    264a:	7e 07       	cpc	r23, r30
    264c:	b9 f0       	breq	.+46     	; 0x267c <f_open+0x64c>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    264e:	88 23       	and	r24, r24
    2650:	b1 f4       	brne	.+44     	; 0x267e <f_open+0x64e>
    2652:	97 01       	movw	r18, r14
    2654:	86 01       	movw	r16, r12
    2656:	04 0d       	add	r16, r4
    2658:	15 1d       	adc	r17, r5
    265a:	26 1d       	adc	r18, r6
    265c:	37 1d       	adc	r19, r7
    265e:	d9 01       	movw	r26, r18
    2660:	c8 01       	movw	r24, r16
    2662:	88 0d       	add	r24, r8
    2664:	99 1d       	adc	r25, r9
    2666:	aa 1d       	adc	r26, r10
    2668:	bb 1d       	adc	r27, r11
    266a:	88 16       	cp	r8, r24
    266c:	99 06       	cpc	r9, r25
    266e:	aa 06       	cpc	r10, r26
    2670:	bb 06       	cpc	r11, r27
    2672:	08 f0       	brcs	.+2      	; 0x2676 <f_open+0x646>
    2674:	81 c0       	rjmp	.+258    	; 0x2778 <f_open+0x748>
    2676:	68 01       	movw	r12, r16
    2678:	79 01       	movw	r14, r18
    267a:	d3 cf       	rjmp	.-90     	; 0x2622 <f_open+0x5f2>
    267c:	81 e0       	ldi	r24, 0x01	; 1
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    267e:	ab a9       	ldd	r26, Y+51	; 0x33
    2680:	bc a9       	ldd	r27, Y+52	; 0x34
    2682:	54 96       	adiw	r26, 0x14	; 20
    2684:	4d 93       	st	X+, r20
    2686:	5d 93       	st	X+, r21
    2688:	6d 93       	st	X+, r22
    268a:	7c 93       	st	X, r23
    268c:	57 97       	sbiw	r26, 0x17	; 23
    268e:	8a ab       	std	Y+50, r24	; 0x32
    2690:	2d c0       	rjmp	.+90     	; 0x26ec <f_open+0x6bc>
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clst2sect(fs, clst)) == 0) {
    2692:	89 a5       	ldd	r24, Y+41	; 0x29
    2694:	9a a5       	ldd	r25, Y+42	; 0x2a
    2696:	0e 94 48 02 	call	0x490	; 0x490 <clst2sect>
    269a:	61 15       	cp	r22, r1
    269c:	71 05       	cpc	r23, r1
    269e:	81 05       	cpc	r24, r1
    26a0:	91 05       	cpc	r25, r1
    26a2:	19 f4       	brne	.+6      	; 0x26aa <f_open+0x67a>
    26a4:	b2 e0       	ldi	r27, 0x02	; 2
    26a6:	ba ab       	std	Y+50, r27	; 0x32
    26a8:	21 c0       	rjmp	.+66     	; 0x26ec <f_open+0x6bc>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    26aa:	a7 01       	movw	r20, r14
    26ac:	96 01       	movw	r18, r12
    26ae:	01 2e       	mov	r0, r17
    26b0:	19 e0       	ldi	r17, 0x09	; 9
    26b2:	56 95       	lsr	r21
    26b4:	47 95       	ror	r20
    26b6:	37 95       	ror	r19
    26b8:	27 95       	ror	r18
    26ba:	1a 95       	dec	r17
    26bc:	d1 f7       	brne	.-12     	; 0x26b2 <f_open+0x682>
    26be:	10 2d       	mov	r17, r0
    26c0:	26 0f       	add	r18, r22
    26c2:	37 1f       	adc	r19, r23
    26c4:	48 1f       	adc	r20, r24
    26c6:	59 1f       	adc	r21, r25
    26c8:	eb a9       	ldd	r30, Y+51	; 0x33
    26ca:	fc a9       	ldd	r31, Y+52	; 0x34
    26cc:	20 8f       	std	Z+24, r18	; 0x18
    26ce:	31 8f       	std	Z+25, r19	; 0x19
    26d0:	42 8f       	std	Z+26, r20	; 0x1a
    26d2:	53 8f       	std	Z+27, r21	; 0x1b
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    26d4:	e9 a5       	ldd	r30, Y+41	; 0x29
    26d6:	fa a5       	ldd	r31, Y+42	; 0x2a
    26d8:	81 81       	ldd	r24, Z+1	; 0x01
    26da:	b1 01       	movw	r22, r2
    26dc:	01 e0       	ldi	r16, 0x01	; 1
    26de:	10 e0       	ldi	r17, 0x00	; 0
    26e0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <disk_read>
    26e4:	88 23       	and	r24, r24
    26e6:	31 f0       	breq	.+12     	; 0x26f4 <f_open+0x6c4>
    26e8:	f1 e0       	ldi	r31, 0x01	; 1
    26ea:	fa ab       	std	Y+50, r31	; 0x32
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    26ec:	ab a9       	ldd	r26, Y+51	; 0x33
    26ee:	bc a9       	ldd	r27, Y+52	; 0x34
    26f0:	1d 92       	st	X+, r1
    26f2:	1c 92       	st	X, r1

	LEAVE_FF(fs, res);
}
    26f4:	8a a9       	ldd	r24, Y+50	; 0x32
    26f6:	e7 96       	adiw	r28, 0x37	; 55
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	cf 91       	pop	r28
    2704:	df 91       	pop	r29
    2706:	1f 91       	pop	r17
    2708:	0f 91       	pop	r16
    270a:	ff 90       	pop	r15
    270c:	ef 90       	pop	r14
    270e:	df 90       	pop	r13
    2710:	cf 90       	pop	r12
    2712:	bf 90       	pop	r11
    2714:	af 90       	pop	r10
    2716:	9f 90       	pop	r9
    2718:	8f 90       	pop	r8
    271a:	7f 90       	pop	r7
    271c:	6f 90       	pop	r6
    271e:	5f 90       	pop	r5
    2720:	4f 90       	pop	r4
    2722:	3f 90       	pop	r3
    2724:	2f 90       	pop	r2
    2726:	08 95       	ret
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    2728:	88 a5       	ldd	r24, Y+40	; 0x28
    272a:	82 ff       	sbrs	r24, 2
    272c:	91 cd       	rjmp	.-1246   	; 0x2250 <f_open+0x220>
    272e:	a4 cd       	rjmp	.-1208   	; 0x2278 <f_open+0x248>
    2730:	25 e0       	ldi	r18, 0x05	; 5
    2732:	a8 cd       	rjmp	.-1200   	; 0x2284 <f_open+0x254>
    2734:	26 e0       	ldi	r18, 0x06	; 6
    2736:	a6 cd       	rjmp	.-1204   	; 0x2284 <f_open+0x254>
    2738:	28 e0       	ldi	r18, 0x08	; 8
    273a:	2e cf       	rjmp	.-420    	; 0x2598 <f_open+0x568>
					fs->wflag = 1;
					if (cl != 0) {						/* Remove the cluster chain if exist */
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
						if (res == FR_OK) {
							res = move_window(fs, dw);
    273c:	89 a5       	ldd	r24, Y+41	; 0x29
    273e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2740:	4e a5       	ldd	r20, Y+46	; 0x2e
    2742:	5f a5       	ldd	r21, Y+47	; 0x2f
    2744:	68 a9       	ldd	r22, Y+48	; 0x30
    2746:	79 a9       	ldd	r23, Y+49	; 0x31
    2748:	0e 94 ac 03 	call	0x758	; 0x758 <move_window>
    274c:	28 2f       	mov	r18, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    274e:	e9 a5       	ldd	r30, Y+41	; 0x29
    2750:	fa a5       	ldd	r31, Y+42	; 0x2a
    2752:	d5 01       	movw	r26, r10
    2754:	c4 01       	movw	r24, r8
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	a1 09       	sbc	r26, r1
    275a:	b1 09       	sbc	r27, r1
    275c:	83 87       	std	Z+11, r24	; 0x0b
    275e:	94 87       	std	Z+12, r25	; 0x0c
    2760:	a5 87       	std	Z+13, r26	; 0x0d
    2762:	b6 87       	std	Z+14, r27	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    2764:	22 23       	and	r18, r18
    2766:	09 f4       	brne	.+2      	; 0x276a <f_open+0x73a>
    2768:	c3 ce       	rjmp	.-634    	; 0x24f0 <f_open+0x4c0>
    276a:	16 cf       	rjmp	.-468    	; 0x2598 <f_open+0x568>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
    276c:	bd a5       	ldd	r27, Y+45	; 0x2d
    276e:	b3 fd       	sbrc	r27, 3
    2770:	bf ce       	rjmp	.-642    	; 0x24f0 <f_open+0x4c0>
    2772:	c1 ce       	rjmp	.-638    	; 0x24f6 <f_open+0x4c6>
    2774:	27 e0       	ldi	r18, 0x07	; 7
    2776:	10 cf       	rjmp	.-480    	; 0x2598 <f_open+0x568>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    2778:	eb a9       	ldd	r30, Y+51	; 0x33
    277a:	fc a9       	ldd	r31, Y+52	; 0x34
    277c:	44 8b       	std	Z+20, r20	; 0x14
    277e:	55 8b       	std	Z+21, r21	; 0x15
    2780:	66 8b       	std	Z+22, r22	; 0x16
    2782:	77 8b       	std	Z+23, r23	; 0x17
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    2784:	d7 01       	movw	r26, r14
    2786:	c6 01       	movw	r24, r12
    2788:	91 70       	andi	r25, 0x01	; 1
    278a:	a0 70       	andi	r26, 0x00	; 0
    278c:	b0 70       	andi	r27, 0x00	; 0
    278e:	00 97       	sbiw	r24, 0x00	; 0
    2790:	a1 05       	cpc	r26, r1
    2792:	b1 05       	cpc	r27, r1
    2794:	09 f4       	brne	.+2      	; 0x2798 <f_open+0x768>
    2796:	ae cf       	rjmp	.-164    	; 0x26f4 <f_open+0x6c4>
    2798:	7c cf       	rjmp	.-264    	; 0x2692 <f_open+0x662>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    279a:	88 a5       	ldd	r24, Y+40	; 0x28
    279c:	55 cd       	rjmp	.-1366   	; 0x2248 <f_open+0x218>

0000279e <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    279e:	1f 93       	push	r17
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	00 d0       	rcall	.+0      	; 0x27a6 <f_mount+0x8>
    27a6:	00 d0       	rcall	.+0      	; 0x27a8 <f_mount+0xa>
    27a8:	00 d0       	rcall	.+0      	; 0x27aa <f_mount+0xc>
    27aa:	cd b7       	in	r28, 0x3d	; 61
    27ac:	de b7       	in	r29, 0x3e	; 62
    27ae:	9c 83       	std	Y+4, r25	; 0x04
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	7e 83       	std	Y+6, r23	; 0x06
    27b4:	6d 83       	std	Y+5, r22	; 0x05
    27b6:	14 2f       	mov	r17, r20
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    27b8:	7a 83       	std	Y+2, r23	; 0x02
    27ba:	69 83       	std	Y+1, r22	; 0x01


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
    27bc:	ce 01       	movw	r24, r28
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	0e 94 de 02 	call	0x5bc	; 0x5bc <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    27c4:	99 23       	and	r25, r25
    27c6:	14 f4       	brge	.+4      	; 0x27cc <f_mount+0x2e>
    27c8:	8b e0       	ldi	r24, 0x0B	; 11
    27ca:	25 c0       	rjmp	.+74     	; 0x2816 <f_mount+0x78>
	cfs = FatFs[vol];					/* Pointer to fs object */
    27cc:	fc 01       	movw	r30, r24
    27ce:	ee 0f       	add	r30, r30
    27d0:	ff 1f       	adc	r31, r31
    27d2:	e4 59       	subi	r30, 0x94	; 148
    27d4:	fd 4f       	sbci	r31, 0xFD	; 253
    27d6:	01 90       	ld	r0, Z+
    27d8:	f0 81       	ld	r31, Z
    27da:	e0 2d       	mov	r30, r0

	if (cfs) {
    27dc:	30 97       	sbiw	r30, 0x00	; 0
    27de:	09 f0       	breq	.+2      	; 0x27e2 <f_mount+0x44>
		clear_lock(cfs);
#endif
#if FF_FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    27e0:	10 82       	st	Z, r1
	}

	if (fs) {
    27e2:	eb 81       	ldd	r30, Y+3	; 0x03
    27e4:	fc 81       	ldd	r31, Y+4	; 0x04
    27e6:	30 97       	sbiw	r30, 0x00	; 0
    27e8:	09 f0       	breq	.+2      	; 0x27ec <f_mount+0x4e>
		fs->fs_type = 0;				/* Clear new fs object */
    27ea:	10 82       	st	Z, r1
#if FF_FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    27ec:	fc 01       	movw	r30, r24
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e4 59       	subi	r30, 0x94	; 148
    27f4:	fd 4f       	sbci	r31, 0xFD	; 253
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24

	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
    27fe:	11 23       	and	r17, r17
    2800:	11 f4       	brne	.+4      	; 0x2806 <f_mount+0x68>
    2802:	80 e0       	ldi	r24, 0x00	; 0
    2804:	08 c0       	rjmp	.+16     	; 0x2816 <f_mount+0x78>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    2806:	ce 01       	movw	r24, r28
    2808:	05 96       	adiw	r24, 0x05	; 5
    280a:	be 01       	movw	r22, r28
    280c:	6d 5f       	subi	r22, 0xFD	; 253
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	40 e0       	ldi	r20, 0x00	; 0
    2812:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <find_volume>
	LEAVE_FF(fs, res);
}
    2816:	26 96       	adiw	r28, 0x06	; 6
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	1f 91       	pop	r17
    2828:	08 95       	ret

0000282a <i2c_init>:
            break;
        case 64:
            TWSR = 0x3;
            break;
        default:
            TWSR = 0x00;
    282a:	10 92 b9 00 	sts	0x00B9, r1
            break;
    }
    TWBR = (uint8_t)SET_TWBR;
    282e:	80 e2       	ldi	r24, 0x20	; 32
    2830:	80 93 b8 00 	sts	0x00B8, r24
    // enable
    TWCR = (1 << TWEN);
    2834:	84 e0       	ldi	r24, 0x04	; 4
    2836:	80 93 bc 00 	sts	0x00BC, r24
}
    283a:	08 95       	ret

0000283c <i2c_start>:
 Input Parameter:
 - uint8_t i2c_addr: Adress of reciever
 
 Return Value: none
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    283c:	98 2f       	mov	r25, r24
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
    283e:	84 ea       	ldi	r24, 0xA4	; 164
    2840:	80 93 bc 00 	sts	0x00BC, r24
    2844:	20 ea       	ldi	r18, 0xA0	; 160
    2846:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    2848:	ec eb       	ldi	r30, 0xBC	; 188
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	09 c0       	rjmp	.+18     	; 0x2860 <i2c_start+0x24>
		timeout !=0){
		timeout--;
    284e:	21 50       	subi	r18, 0x01	; 1
    2850:	30 40       	sbci	r19, 0x00	; 0
		if(timeout == 0){
    2852:	31 f4       	brne	.+12     	; 0x2860 <i2c_start+0x24>
			I2C_ErrorCode |= (1 << I2C_START);
    2854:	80 91 7b 02 	lds	r24, 0x027B
    2858:	81 60       	ori	r24, 0x01	; 1
    285a:	80 93 7b 02 	sts	0x027B, r24
    285e:	08 95       	ret
 **********************************************/
void i2c_start(uint8_t i2c_addr){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
	uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    2860:	80 81       	ld	r24, Z
    2862:	88 23       	and	r24, r24
    2864:	1c f0       	brlt	.+6      	; 0x286c <i2c_start+0x30>
    2866:	21 15       	cp	r18, r1
    2868:	31 05       	cpc	r19, r1
    286a:	89 f7       	brne	.-30     	; 0x284e <i2c_start+0x12>
			I2C_ErrorCode |= (1 << I2C_START);
			return;
		}
	};
    // send adress
    TWDR = i2c_addr;
    286c:	90 93 bb 00 	sts	0x00BB, r25
    TWCR = (1 << TWINT)|( 1 << TWEN);
    2870:	84 e8       	ldi	r24, 0x84	; 132
    2872:	80 93 bc 00 	sts	0x00BC, r24
    2876:	20 ea       	ldi	r18, 0xA0	; 160
    2878:	30 e0       	ldi	r19, 0x00	; 0
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    287a:	ec eb       	ldi	r30, 0xBC	; 188
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	09 c0       	rjmp	.+18     	; 0x2892 <i2c_start+0x56>
		  timeout !=0){
		timeout--;
    2880:	21 50       	subi	r18, 0x01	; 1
    2882:	30 40       	sbci	r19, 0x00	; 0
		if(timeout == 0){
    2884:	31 f4       	brne	.+12     	; 0x2892 <i2c_start+0x56>
			I2C_ErrorCode |= (1 << I2C_SENDADRESS);
    2886:	80 91 7b 02 	lds	r24, 0x027B
    288a:	82 60       	ori	r24, 0x02	; 2
    288c:	80 93 7b 02 	sts	0x027B, r24
    2890:	08 95       	ret
	};
    // send adress
    TWDR = i2c_addr;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    2892:	80 81       	ld	r24, Z
    2894:	88 23       	and	r24, r24
    2896:	1c f0       	brlt	.+6      	; 0x289e <i2c_start+0x62>
    2898:	21 15       	cp	r18, r1
    289a:	31 05       	cpc	r19, r1
    289c:	89 f7       	brne	.-30     	; 0x2880 <i2c_start+0x44>
    289e:	08 95       	ret

000028a0 <i2c_stop>:
 
 Return Value: none
 **********************************************/
void i2c_stop(void){
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
    28a0:	84 e9       	ldi	r24, 0x94	; 148
    28a2:	80 93 bc 00 	sts	0x00BC, r24
}
    28a6:	08 95       	ret

000028a8 <i2c_byte>:
 - uint8_t byte: Byte to send to reciever
 
 Return Value: none
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
    28a8:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1 << TWINT)|( 1 << TWEN);
    28ac:	84 e8       	ldi	r24, 0x84	; 132
    28ae:	80 93 bc 00 	sts	0x00BC, r24
    28b2:	20 ea       	ldi	r18, 0xA0	; 160
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    28b6:	ec eb       	ldi	r30, 0xBC	; 188
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	09 c0       	rjmp	.+18     	; 0x28ce <i2c_byte+0x26>
		  timeout !=0){
		timeout--;
    28bc:	21 50       	subi	r18, 0x01	; 1
    28be:	30 40       	sbci	r19, 0x00	; 0
		if(timeout == 0){
    28c0:	31 f4       	brne	.+12     	; 0x28ce <i2c_byte+0x26>
			I2C_ErrorCode |= (1 << I2C_BYTE);
    28c2:	80 91 7b 02 	lds	r24, 0x027B
    28c6:	84 60       	ori	r24, 0x04	; 4
    28c8:	80 93 7b 02 	sts	0x027B, r24
    28cc:	08 95       	ret
 **********************************************/
void i2c_byte(uint8_t byte){
    TWDR = byte;
    TWCR = (1 << TWINT)|( 1 << TWEN);
    uint16_t timeout = F_CPU/F_I2C*2.0;
    while((TWCR & (1 << TWINT)) == 0 &&
    28ce:	80 81       	ld	r24, Z
    28d0:	88 23       	and	r24, r24
    28d2:	1c f0       	brlt	.+6      	; 0x28da <i2c_byte+0x32>
    28d4:	21 15       	cp	r18, r1
    28d6:	31 05       	cpc	r19, r1
    28d8:	89 f7       	brne	.-30     	; 0x28bc <i2c_byte+0x14>
    28da:	08 95       	ret

000028dc <lcd_data>:
    for (uint8_t i=0; i<size; i++) {
        i2c_byte(cmd[i]);
    }
    i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	0f 93       	push	r16
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	7c 01       	movw	r14, r24
    28ea:	8b 01       	movw	r16, r22
    i2c_start((LCD_I2C_ADR << 1) | 0);
    28ec:	88 e7       	ldi	r24, 0x78	; 120
    28ee:	0e 94 1e 14 	call	0x283c	; 0x283c <i2c_start>
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
    28f2:	80 e4       	ldi	r24, 0x40	; 64
    28f4:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    for (uint16_t i = 0; i<size; i++) {
    28f8:	01 15       	cp	r16, r1
    28fa:	11 05       	cpc	r17, r1
    28fc:	61 f0       	breq	.+24     	; 0x2916 <lcd_data+0x3a>
    28fe:	c0 e0       	ldi	r28, 0x00	; 0
    2900:	d0 e0       	ldi	r29, 0x00	; 0
        i2c_byte(data[i]);
    2902:	f7 01       	movw	r30, r14
    2904:	ec 0f       	add	r30, r28
    2906:	fd 1f       	adc	r31, r29
    2908:	80 81       	ld	r24, Z
    290a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    i2c_start((LCD_I2C_ADR << 1) | 0);
    i2c_byte(0x40);    // 0x00 for command, 0x40 for data
    for (uint16_t i = 0; i<size; i++) {
    290e:	21 96       	adiw	r28, 0x01	; 1
    2910:	c0 17       	cp	r28, r16
    2912:	d1 07       	cpc	r29, r17
    2914:	b0 f3       	brcs	.-20     	; 0x2902 <lcd_data+0x26>
        i2c_byte(data[i]);
    }
    i2c_stop();
    2916:	0e 94 50 14 	call	0x28a0	; 0x28a0 <i2c_stop>
}
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	1f 91       	pop	r17
    2920:	0f 91       	pop	r16
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	08 95       	ret

00002928 <lcd_command>:
    0x8D, 0x14,        // Set DC-DC enable
    
    
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	18 2f       	mov	r17, r24
    2934:	f9 2e       	mov	r15, r25
    2936:	06 2f       	mov	r16, r22
    i2c_start((LCD_I2C_ADR << 1) | 0);
    2938:	88 e7       	ldi	r24, 0x78	; 120
    293a:	0e 94 1e 14 	call	0x283c	; 0x283c <i2c_start>
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    for (uint8_t i=0; i<size; i++) {
    2944:	00 23       	and	r16, r16
    2946:	51 f0       	breq	.+20     	; 0x295c <lcd_command+0x34>
    2948:	21 2f       	mov	r18, r17
    294a:	3f 2d       	mov	r19, r15
    294c:	e9 01       	movw	r28, r18
        i2c_byte(cmd[i]);
    294e:	89 91       	ld	r24, Y+
    2950:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
};
#pragma mark LCD COMMUNICATION
void lcd_command(uint8_t cmd[], uint8_t size) {
    i2c_start((LCD_I2C_ADR << 1) | 0);
    i2c_byte(0x00);    // 0x00 for command, 0x40 for data
    for (uint8_t i=0; i<size; i++) {
    2954:	9e 01       	movw	r18, r28
    2956:	21 1b       	sub	r18, r17
    2958:	20 17       	cp	r18, r16
    295a:	c8 f3       	brcs	.-14     	; 0x294e <lcd_command+0x26>
        i2c_byte(cmd[i]);
    }
    i2c_stop();
    295c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <i2c_stop>
}
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	1f 91       	pop	r17
    2966:	0f 91       	pop	r16
    2968:	ff 90       	pop	r15
    296a:	08 95       	ret

0000296c <lcd_gotoxy>:
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
    lcd_command(commandSequence, sizeof(commandSequence));
    lcd_clrscr();
}
void lcd_gotoxy(uint8_t x, uint8_t y){
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <lcd_gotoxy+0x6>
    2972:	00 d0       	rcall	.+0      	; 0x2974 <lcd_gotoxy+0x8>
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	98 2f       	mov	r25, r24
    if( x > (DISPLAY_WIDTH/sizeof(FONT[0])) || y > (DISPLAY_HEIGHT/8-1)) return;// out of display
    297a:	86 31       	cpi	r24, 0x16	; 22
    297c:	b8 f4       	brcc	.+46     	; 0x29ac <lcd_gotoxy+0x40>
    297e:	68 30       	cpi	r22, 0x08	; 8
    2980:	a8 f4       	brcc	.+42     	; 0x29ac <lcd_gotoxy+0x40>
    x = x * sizeof(FONT[0]);
    2982:	86 e0       	ldi	r24, 0x06	; 6
    2984:	98 9f       	mul	r25, r24
    2986:	c0 01       	movw	r24, r0
    2988:	11 24       	eor	r1, r1
    cursorPosition.x=x;
    298a:	e0 e7       	ldi	r30, 0x70	; 112
    298c:	f2 e0       	ldi	r31, 0x02	; 2
    298e:	81 93       	st	Z+, r24
    cursorPosition.y=y;
    2990:	60 83       	st	Z, r22
#if defined SSD1306
    uint8_t commandSequence[] = {0xb0+y, 0x21, x, 0x7f};
    2992:	26 2f       	mov	r18, r22
    2994:	20 55       	subi	r18, 0x50	; 80
    2996:	29 83       	std	Y+1, r18	; 0x01
    2998:	21 e2       	ldi	r18, 0x21	; 33
    299a:	2a 83       	std	Y+2, r18	; 0x02
    299c:	8b 83       	std	Y+3, r24	; 0x03
    299e:	8f e7       	ldi	r24, 0x7F	; 127
    29a0:	8c 83       	std	Y+4, r24	; 0x04
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
    29a2:	ce 01       	movw	r24, r28
    29a4:	01 96       	adiw	r24, 0x01	; 1
    29a6:	64 e0       	ldi	r22, 0x04	; 4
    29a8:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_command>
}
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <lcd_home>:
    }
#endif
    lcd_home();
}
void lcd_home(void){
    lcd_gotoxy(0, 0);
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	60 e0       	ldi	r22, 0x00	; 0
    29be:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
}
    29c2:	08 95       	ret

000029c4 <lcd_putc>:
}
void lcd_set_contrast(uint8_t contrast){
    uint8_t commandSequence[2] = {0x81, contrast};
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_putc(char c){
    29c4:	6f 92       	push	r6
    29c6:	7f 92       	push	r7
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	df 93       	push	r29
    29de:	cf 93       	push	r28
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	60 97       	sbiw	r28, 0x10	; 16
    29e6:	0f b6       	in	r0, 0x3f	; 63
    29e8:	f8 94       	cli
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	0f be       	out	0x3f, r0	; 63
    29ee:	cd bf       	out	0x3d, r28	; 61
    29f0:	98 2f       	mov	r25, r24
    switch (c) {
    29f2:	89 30       	cpi	r24, 0x09	; 9
    29f4:	49 f1       	breq	.+82     	; 0x2a48 <lcd_putc+0x84>
    29f6:	8a 30       	cpi	r24, 0x0A	; 10
    29f8:	20 f4       	brcc	.+8      	; 0x2a02 <lcd_putc+0x3e>
    29fa:	88 30       	cpi	r24, 0x08	; 8
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <lcd_putc+0x3c>
    29fe:	59 c0       	rjmp	.+178    	; 0x2ab2 <lcd_putc+0xee>
    2a00:	07 c0       	rjmp	.+14     	; 0x2a10 <lcd_putc+0x4c>
    2a02:	8a 30       	cpi	r24, 0x0A	; 10
    2a04:	09 f4       	brne	.+2      	; 0x2a08 <lcd_putc+0x44>
    2a06:	42 c0       	rjmp	.+132    	; 0x2a8c <lcd_putc+0xc8>
    2a08:	8d 30       	cpi	r24, 0x0D	; 13
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <lcd_putc+0x4a>
    2a0c:	52 c0       	rjmp	.+164    	; 0x2ab2 <lcd_putc+0xee>
    2a0e:	4b c0       	rjmp	.+150    	; 0x2aa6 <lcd_putc+0xe2>
        case '\b':
            // backspace
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
    2a10:	0f 2e       	mov	r0, r31
    2a12:	f0 e7       	ldi	r31, 0x70	; 112
    2a14:	ef 2e       	mov	r14, r31
    2a16:	f2 e0       	ldi	r31, 0x02	; 2
    2a18:	ff 2e       	mov	r15, r31
    2a1a:	f0 2d       	mov	r31, r0
    2a1c:	f7 01       	movw	r30, r14
    2a1e:	81 91       	ld	r24, Z+
    2a20:	8f 01       	movw	r16, r30
    2a22:	90 91 66 01 	lds	r25, 0x0166
    2a26:	89 1b       	sub	r24, r25
    2a28:	60 81       	ld	r22, Z
    2a2a:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
            lcd_putc(' ');
    2a2e:	80 e2       	ldi	r24, 0x20	; 32
    2a30:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_putc>
            lcd_gotoxy(cursorPosition.x-charMode, cursorPosition.y);
    2a34:	f7 01       	movw	r30, r14
    2a36:	80 81       	ld	r24, Z
    2a38:	90 91 66 01 	lds	r25, 0x0166
    2a3c:	89 1b       	sub	r24, r25
    2a3e:	f8 01       	movw	r30, r16
    2a40:	60 81       	ld	r22, Z
    2a42:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
    2a46:	47 c1       	rjmp	.+654    	; 0x2cd6 <lcd_putc+0x312>
            break;
        case '\t':
            // tab
            if( (cursorPosition.x+charMode*4) < (DISPLAY_WIDTH/ sizeof(FONT[0])-charMode*4) ){
    2a48:	60 91 70 02 	lds	r22, 0x0270
    2a4c:	80 91 66 01 	lds	r24, 0x0166
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	ac 01       	movw	r20, r24
    2a54:	44 0f       	add	r20, r20
    2a56:	55 1f       	adc	r21, r21
    2a58:	44 0f       	add	r20, r20
    2a5a:	55 1f       	adc	r21, r21
    2a5c:	9a 01       	movw	r18, r20
    2a5e:	26 0f       	add	r18, r22
    2a60:	31 1d       	adc	r19, r1
    2a62:	88 27       	eor	r24, r24
    2a64:	99 27       	eor	r25, r25
    2a66:	84 1b       	sub	r24, r20
    2a68:	95 0b       	sbc	r25, r21
    2a6a:	45 96       	adiw	r24, 0x15	; 21
    2a6c:	28 17       	cp	r18, r24
    2a6e:	39 07       	cpc	r19, r25
    2a70:	38 f4       	brcc	.+14     	; 0x2a80 <lcd_putc+0xbc>
                lcd_gotoxy(cursorPosition.x+charMode*4, cursorPosition.y);
    2a72:	86 2f       	mov	r24, r22
    2a74:	84 0f       	add	r24, r20
    2a76:	60 91 71 02 	lds	r22, 0x0271
    2a7a:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
    2a7e:	2b c1       	rjmp	.+598    	; 0x2cd6 <lcd_putc+0x312>
            }else{
                lcd_gotoxy(DISPLAY_WIDTH/ sizeof(FONT[0]), cursorPosition.y);
    2a80:	85 e1       	ldi	r24, 0x15	; 21
    2a82:	60 91 71 02 	lds	r22, 0x0271
    2a86:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
    2a8a:	25 c1       	rjmp	.+586    	; 0x2cd6 <lcd_putc+0x312>
            }
            break;
        case '\n':
            // linefeed
            if(cursorPosition.y < (DISPLAY_HEIGHT/8-1)){
    2a8c:	60 91 71 02 	lds	r22, 0x0271
    2a90:	67 30       	cpi	r22, 0x07	; 7
    2a92:	08 f0       	brcs	.+2      	; 0x2a96 <lcd_putc+0xd2>
    2a94:	20 c1       	rjmp	.+576    	; 0x2cd6 <lcd_putc+0x312>
                lcd_gotoxy(cursorPosition.x, cursorPosition.y+charMode);
    2a96:	80 91 66 01 	lds	r24, 0x0166
    2a9a:	68 0f       	add	r22, r24
    2a9c:	80 91 70 02 	lds	r24, 0x0270
    2aa0:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
    2aa4:	18 c1       	rjmp	.+560    	; 0x2cd6 <lcd_putc+0x312>
            }
            break;
        case '\r':
            // carrige return
            lcd_gotoxy(0, cursorPosition.y);
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	60 91 71 02 	lds	r22, 0x0271
    2aac:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
    2ab0:	12 c1       	rjmp	.+548    	; 0x2cd6 <lcd_putc+0x312>
            break;
        default:
            // char doesn't fit in line
            if( (cursorPosition.x >= DISPLAY_WIDTH-sizeof(FONT[0])) || (c < ' ') ) break;
    2ab2:	80 91 70 02 	lds	r24, 0x0270
    2ab6:	8a 37       	cpi	r24, 0x7A	; 122
    2ab8:	08 f0       	brcs	.+2      	; 0x2abc <lcd_putc+0xf8>
    2aba:	0d c1       	rjmp	.+538    	; 0x2cd6 <lcd_putc+0x312>
    2abc:	90 32       	cpi	r25, 0x20	; 32
    2abe:	08 f4       	brcc	.+2      	; 0x2ac2 <lcd_putc+0xfe>
    2ac0:	0a c1       	rjmp	.+532    	; 0x2cd6 <lcd_putc+0x312>
            // mapping char
            c -= ' ';
    2ac2:	19 2f       	mov	r17, r25
    2ac4:	10 52       	subi	r17, 0x20	; 32
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
    2ac6:	a8 ed       	ldi	r26, 0xD8	; 216
    2ac8:	b2 e0       	ldi	r27, 0x02	; 2
    2aca:	9d 01       	movw	r18, r26
    2acc:	2f 5f       	subi	r18, 0xFF	; 255
    2ace:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad0:	f9 01       	movw	r30, r18
    2ad2:	84 91       	lpm	r24, Z+
    2ad4:	18 17       	cp	r17, r24
    2ad6:	08 f4       	brcc	.+2      	; 0x2ada <lcd_putc+0x116>
    2ad8:	30 c0       	rjmp	.+96     	; 0x2b3a <lcd_putc+0x176>
                char temp = c;
                c = 0xff;
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
    2ada:	84 91       	lpm	r24, Z+
    2adc:	8f 3f       	cpi	r24, 0xFF	; 255
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <lcd_putc+0x11e>
    2ae0:	fa c0       	rjmp	.+500    	; 0x2cd6 <lcd_putc+0x312>
                    if ( pgm_read_byte(&special_char[i][0])-' ' == temp ) {
    2ae2:	fd 01       	movw	r30, r26
    2ae4:	84 91       	lpm	r24, Z+
    2ae6:	01 2f       	mov	r16, r17
    2ae8:	10 e0       	ldi	r17, 0x00	; 0
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	80 97       	sbiw	r24, 0x20	; 32
    2aee:	80 17       	cp	r24, r16
    2af0:	91 07       	cpc	r25, r17
    2af2:	89 f4       	brne	.+34     	; 0x2b16 <lcd_putc+0x152>
    2af4:	a9 01       	movw	r20, r18
    2af6:	0a c0       	rjmp	.+20     	; 0x2b0c <lcd_putc+0x148>
    2af8:	fd 01       	movw	r30, r26
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
    2afe:	e4 91       	lpm	r30, Z+
    2b00:	8e 2f       	mov	r24, r30
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	80 97       	sbiw	r24, 0x20	; 32
    2b06:	08 17       	cp	r16, r24
    2b08:	19 07       	cpc	r17, r25
    2b0a:	31 f4       	brne	.+12     	; 0x2b18 <lcd_putc+0x154>
                        c = pgm_read_byte(&special_char[i][1]);
    2b0c:	fa 01       	movw	r30, r20
    2b0e:	84 91       	lpm	r24, Z+
                        break;
                    }
                }
                if ( c == 0xff ) break;
    2b10:	8f 3f       	cpi	r24, 0xFF	; 255
    2b12:	91 f4       	brne	.+36     	; 0x2b38 <lcd_putc+0x174>
    2b14:	e0 c0       	rjmp	.+448    	; 0x2cd6 <lcd_putc+0x312>
    2b16:	60 e0       	ldi	r22, 0x00	; 0
            // mapping char
            c -= ' ';
            if (c >= pgm_read_byte(&special_char[0][1]) ) {
                char temp = c;
                c = 0xff;
                for (uint8_t i=0; pgm_read_byte(&special_char[i][1]) != 0xff; i++) {
    2b18:	6f 5f       	subi	r22, 0xFF	; 255
    2b1a:	86 2f       	mov	r24, r22
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9c 01       	movw	r18, r24
    2b20:	22 0f       	add	r18, r18
    2b22:	33 1f       	adc	r19, r19
    2b24:	c9 01       	movw	r24, r18
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	ad 01       	movw	r20, r26
    2b2a:	48 0f       	add	r20, r24
    2b2c:	59 1f       	adc	r21, r25
    2b2e:	fa 01       	movw	r30, r20
    2b30:	84 91       	lpm	r24, Z+
    2b32:	8f 3f       	cpi	r24, 0xFF	; 255
    2b34:	09 f7       	brne	.-62     	; 0x2af8 <lcd_putc+0x134>
    2b36:	cf c0       	rjmp	.+414    	; 0x2cd6 <lcd_putc+0x312>
    2b38:	18 2f       	mov	r17, r24
                    displayBuffer[cursorPosition.y][cursorPosition.x+i] =pgm_read_byte(&(FONT[(uint8_t)c][i]));
                }
                cursorPosition.x += sizeof(FONT[0]);
            }
#elif defined TEXTMODE
            if (charMode == DOUBLESIZE) {
    2b3a:	80 91 66 01 	lds	r24, 0x0166
    2b3e:	82 30       	cpi	r24, 0x02	; 2
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <lcd_putc+0x180>
    2b42:	aa c0       	rjmp	.+340    	; 0x2c98 <lcd_putc+0x2d4>
    2b44:	0f 2e       	mov	r0, r31
    2b46:	f5 e0       	ldi	r31, 0x05	; 5
    2b48:	af 2e       	mov	r10, r31
    2b4a:	bb 24       	eor	r11, r11
    2b4c:	f0 2d       	mov	r31, r0
    2b4e:	ac 0e       	add	r10, r28
    2b50:	bd 1e       	adc	r11, r29
    2b52:	86 e0       	ldi	r24, 0x06	; 6
    2b54:	18 9f       	mul	r17, r24
    2b56:	c0 01       	movw	r24, r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	8c 01       	movw	r16, r24
    2b5c:	08 59       	subi	r16, 0x98	; 152
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	65 01       	movw	r12, r10
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
                    doubleChar[i] = 0;
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
    2b62:	88 24       	eor	r8, r8
    2b64:	99 24       	eor	r9, r9
    2b66:	a1 e0       	ldi	r26, 0x01	; 1
    2b68:	b0 e0       	ldi	r27, 0x00	; 0
#elif defined TEXTMODE
            if (charMode == DOUBLESIZE) {
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
    2b6a:	0f 2e       	mov	r0, r31
    2b6c:	f1 e1       	ldi	r31, 0x11	; 17
    2b6e:	ef 2e       	mov	r14, r31
    2b70:	ff 24       	eor	r15, r15
    2b72:	f0 2d       	mov	r31, r0
    2b74:	ec 0e       	add	r14, r28
    2b76:	fd 1e       	adc	r15, r29
                    doubleChar[i] = 0;
    2b78:	f6 01       	movw	r30, r12
    2b7a:	11 82       	std	Z+1, r1	; 0x01
    2b7c:	10 82       	st	Z, r1
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
    2b7e:	f8 01       	movw	r30, r16
    2b80:	84 91       	lpm	r24, Z+
    2b82:	a4 01       	movw	r20, r8
    2b84:	bd 01       	movw	r22, r26
                    for (uint8_t j=0; j<8; j++) {
                        if ((dChar & (1 << j))) {
    2b86:	68 2e       	mov	r6, r24
    2b88:	77 24       	eor	r7, r7
    2b8a:	c3 01       	movw	r24, r6
    2b8c:	04 2e       	mov	r0, r20
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <lcd_putc+0x1d0>
    2b90:	95 95       	asr	r25
    2b92:	87 95       	ror	r24
    2b94:	0a 94       	dec	r0
    2b96:	e2 f7       	brpl	.-8      	; 0x2b90 <lcd_putc+0x1cc>
    2b98:	80 ff       	sbrs	r24, 0
    2b9a:	1a c0       	rjmp	.+52     	; 0x2bd0 <lcd_putc+0x20c>
                            doubleChar[i] |= (1 << (j*2));
    2b9c:	ca 01       	movw	r24, r20
    2b9e:	88 0f       	add	r24, r24
    2ba0:	99 1f       	adc	r25, r25
    2ba2:	9d 01       	movw	r18, r26
    2ba4:	02 c0       	rjmp	.+4      	; 0x2baa <lcd_putc+0x1e6>
    2ba6:	22 0f       	add	r18, r18
    2ba8:	33 1f       	adc	r19, r19
    2baa:	8a 95       	dec	r24
    2bac:	e2 f7       	brpl	.-8      	; 0x2ba6 <lcd_putc+0x1e2>
    2bae:	c9 01       	movw	r24, r18
    2bb0:	f6 01       	movw	r30, r12
    2bb2:	20 81       	ld	r18, Z
    2bb4:	31 81       	ldd	r19, Z+1	; 0x01
    2bb6:	82 2b       	or	r24, r18
    2bb8:	93 2b       	or	r25, r19
                            doubleChar[i] |= (1 << ((j*2)+1));
    2bba:	9d 01       	movw	r18, r26
    2bbc:	06 2e       	mov	r0, r22
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <lcd_putc+0x200>
    2bc0:	22 0f       	add	r18, r18
    2bc2:	33 1f       	adc	r19, r19
    2bc4:	0a 94       	dec	r0
    2bc6:	e2 f7       	brpl	.-8      	; 0x2bc0 <lcd_putc+0x1fc>
    2bc8:	82 2b       	or	r24, r18
    2bca:	93 2b       	or	r25, r19
    2bcc:	91 83       	std	Z+1, r25	; 0x01
    2bce:	80 83       	st	Z, r24
    2bd0:	4f 5f       	subi	r20, 0xFF	; 255
    2bd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd4:	6e 5f       	subi	r22, 0xFE	; 254
    2bd6:	7f 4f       	sbci	r23, 0xFF	; 255
                uint8_t dChar;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
                    doubleChar[i] = 0;
                    dChar = pgm_read_byte(&(FONT[(uint8_t)c][i]));
                    for (uint8_t j=0; j<8; j++) {
    2bd8:	48 30       	cpi	r20, 0x08	; 8
    2bda:	51 05       	cpc	r21, r1
    2bdc:	b1 f6       	brne	.-84     	; 0x2b8a <lcd_putc+0x1c6>
    2bde:	22 e0       	ldi	r18, 0x02	; 2
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	c2 0e       	add	r12, r18
    2be4:	d3 1e       	adc	r13, r19
    2be6:	0f 5f       	subi	r16, 0xFF	; 255
    2be8:	1f 4f       	sbci	r17, 0xFF	; 255
#elif defined TEXTMODE
            if (charMode == DOUBLESIZE) {
                uint16_t doubleChar[sizeof(FONT[0])];
                uint8_t dChar;
                
                for (uint8_t i=0; i < sizeof(FONT[0]); i++) {
    2bea:	ce 14       	cp	r12, r14
    2bec:	df 04       	cpc	r13, r15
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <lcd_putc+0x22e>
    2bf0:	c3 cf       	rjmp	.-122    	; 0x2b78 <lcd_putc+0x1b4>
                            doubleChar[i] |= (1 << (j*2));
                            doubleChar[i] |= (1 << ((j*2)+1));
                        }
                    }
                }
                i2c_start(LCD_I2C_ADR << 1);
    2bf2:	88 e7       	ldi	r24, 0x78	; 120
    2bf4:	0e 94 1e 14 	call	0x283c	; 0x283c <i2c_start>
                i2c_byte(0x40);
    2bf8:	80 e4       	ldi	r24, 0x40	; 64
    2bfa:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    2bfe:	75 01       	movw	r14, r10
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
                {
                    // print font to ram, print 6 columns
                    i2c_byte(doubleChar[i] & 0xff);
    2c00:	f7 01       	movw	r30, r14
    2c02:	10 81       	ld	r17, Z
    2c04:	81 2f       	mov	r24, r17
    2c06:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
                    i2c_byte(doubleChar[i] & 0xff);
    2c0a:	81 2f       	mov	r24, r17
    2c0c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    2c10:	22 e0       	ldi	r18, 0x02	; 2
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	e2 0e       	add	r14, r18
    2c16:	f3 1e       	adc	r15, r19
                        }
                    }
                }
                i2c_start(LCD_I2C_ADR << 1);
                i2c_byte(0x40);
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
    2c18:	ec 14       	cp	r14, r12
    2c1a:	fd 04       	cpc	r15, r13
    2c1c:	89 f7       	brne	.-30     	; 0x2c00 <lcd_putc+0x23c>
                {
                    // print font to ram, print 6 columns
                    i2c_byte(doubleChar[i] & 0xff);
                    i2c_byte(doubleChar[i] & 0xff);
                }
                i2c_stop();
    2c1e:	0e 94 50 14 	call	0x28a0	; 0x28a0 <i2c_stop>
                
#if defined SSD1306
                uint8_t commandSequence[] = {0xb0+cursorPosition.y+1,
                    0x21,
                    cursorPosition.x,
                    0x7f};
    2c22:	e0 e7       	ldi	r30, 0x70	; 112
    2c24:	f2 e0       	ldi	r31, 0x02	; 2
    2c26:	91 91       	ld	r25, Z+
    2c28:	80 81       	ld	r24, Z
    2c2a:	8f 54       	subi	r24, 0x4F	; 79
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	81 e2       	ldi	r24, 0x21	; 33
    2c30:	8a 83       	std	Y+2, r24	; 0x02
    2c32:	9b 83       	std	Y+3, r25	; 0x03
    2c34:	8f e7       	ldi	r24, 0x7F	; 127
    2c36:	8c 83       	std	Y+4, r24	; 0x04
                    0x21,
                    0x00+((2+cursorPosition.x) & (0x0f)),
                    0x10+( ((2+cursorPosition.x) & (0xf0)) >> 4 ),
                    0x7f};
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
    2c38:	ce 01       	movw	r24, r28
    2c3a:	01 96       	adiw	r24, 0x01	; 1
    2c3c:	64 e0       	ldi	r22, 0x04	; 4
    2c3e:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_command>
                
                i2c_start(LCD_I2C_ADR << 1);
    2c42:	88 e7       	ldi	r24, 0x78	; 120
    2c44:	0e 94 1e 14 	call	0x283c	; 0x283c <i2c_start>
                i2c_byte(0x40);
    2c48:	80 e4       	ldi	r24, 0x40	; 64
    2c4a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
                for (uint8_t j = 0; j < sizeof(FONT[0]); j++)
                {
                    // print font to ram, print 6 columns
                    i2c_byte(doubleChar[j] >> 8);
    2c4e:	f5 01       	movw	r30, r10
    2c50:	11 81       	ldd	r17, Z+1	; 0x01
    2c52:	81 2f       	mov	r24, r17
    2c54:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
                    i2c_byte(doubleChar[j] >> 8);
    2c58:	81 2f       	mov	r24, r17
    2c5a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    2c5e:	22 e0       	ldi	r18, 0x02	; 2
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	a2 0e       	add	r10, r18
    2c64:	b3 1e       	adc	r11, r19
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
                
                i2c_start(LCD_I2C_ADR << 1);
                i2c_byte(0x40);
                for (uint8_t j = 0; j < sizeof(FONT[0]); j++)
    2c66:	ac 14       	cp	r10, r12
    2c68:	bd 04       	cpc	r11, r13
    2c6a:	89 f7       	brne	.-30     	; 0x2c4e <lcd_putc+0x28a>
                {
                    // print font to ram, print 6 columns
                    i2c_byte(doubleChar[j] >> 8);
                    i2c_byte(doubleChar[j] >> 8);
                }
                i2c_stop();
    2c6c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <i2c_stop>
                
                commandSequence[0] = 0xb0+cursorPosition.y;
    2c70:	01 e7       	ldi	r16, 0x71	; 113
    2c72:	12 e0       	ldi	r17, 0x02	; 2
    2c74:	f8 01       	movw	r30, r16
    2c76:	80 81       	ld	r24, Z
    2c78:	80 55       	subi	r24, 0x50	; 80
    2c7a:	89 83       	std	Y+1, r24	; 0x01
#if defined SSD1306
                commandSequence[2] = cursorPosition.x+(2*sizeof(FONT[0]));
    2c7c:	82 91       	ld	r24, -Z
    2c7e:	8f 01       	movw	r16, r30
    2c80:	84 5f       	subi	r24, 0xF4	; 244
    2c82:	8b 83       	std	Y+3, r24	; 0x03
#elif defined SH1106
                commandSequence[2] = 0x00+((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0x0f));
                commandSequence[3] = 0x10+( ((2+cursorPosition.x+(2*sizeof(FONT[0]))) & (0xf0)) >> 4 );
#endif
                lcd_command(commandSequence, sizeof(commandSequence));
    2c84:	ce 01       	movw	r24, r28
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	64 e0       	ldi	r22, 0x04	; 4
    2c8a:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_command>
                cursorPosition.x += sizeof(FONT[0])*2;
    2c8e:	f8 01       	movw	r30, r16
    2c90:	80 81       	ld	r24, Z
    2c92:	84 5f       	subi	r24, 0xF4	; 244
    2c94:	80 83       	st	Z, r24
    2c96:	1f c0       	rjmp	.+62     	; 0x2cd6 <lcd_putc+0x312>
            } else {
                i2c_start(LCD_I2C_ADR << 1);
    2c98:	88 e7       	ldi	r24, 0x78	; 120
    2c9a:	0e 94 1e 14 	call	0x283c	; 0x283c <i2c_start>
                i2c_byte(0x40);
    2c9e:	80 e4       	ldi	r24, 0x40	; 64
    2ca0:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
    2ca4:	86 e0       	ldi	r24, 0x06	; 6
    2ca6:	18 9f       	mul	r17, r24
    2ca8:	c0 01       	movw	r24, r0
    2caa:	11 24       	eor	r1, r1
    2cac:	8c 01       	movw	r16, r24
    2cae:	08 59       	subi	r16, 0x98	; 152
    2cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb2:	ff 24       	eor	r15, r15
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
                {
                    // print font to ram, print 6 columns
                    i2c_byte(pgm_read_byte(&(FONT[(uint8_t)c][i])));
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	84 91       	lpm	r24, Z+
    2cb8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <i2c_byte>
                lcd_command(commandSequence, sizeof(commandSequence));
                cursorPosition.x += sizeof(FONT[0])*2;
            } else {
                i2c_start(LCD_I2C_ADR << 1);
                i2c_byte(0x40);
                for (uint8_t i = 0; i < sizeof(FONT[0]); i++)
    2cbc:	f3 94       	inc	r15
    2cbe:	0f 5f       	subi	r16, 0xFF	; 255
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	f6 e0       	ldi	r31, 0x06	; 6
    2cc4:	ff 16       	cp	r15, r31
    2cc6:	b1 f7       	brne	.-20     	; 0x2cb4 <lcd_putc+0x2f0>
                {
                    // print font to ram, print 6 columns
                    i2c_byte(pgm_read_byte(&(FONT[(uint8_t)c][i])));
                }
                i2c_stop();
    2cc8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <i2c_stop>
                cursorPosition.x += sizeof(FONT[0]);
    2ccc:	e0 e7       	ldi	r30, 0x70	; 112
    2cce:	f2 e0       	ldi	r31, 0x02	; 2
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8a 5f       	subi	r24, 0xFA	; 250
    2cd4:	80 83       	st	Z, r24
            }
#endif
            break;
    }
    
}
    2cd6:	60 96       	adiw	r28, 0x10	; 16
    2cd8:	0f b6       	in	r0, 0x3f	; 63
    2cda:	f8 94       	cli
    2cdc:	de bf       	out	0x3e, r29	; 62
    2cde:	0f be       	out	0x3f, r0	; 63
    2ce0:	cd bf       	out	0x3d, r28	; 61
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	ff 90       	pop	r15
    2cec:	ef 90       	pop	r14
    2cee:	df 90       	pop	r13
    2cf0:	cf 90       	pop	r12
    2cf2:	bf 90       	pop	r11
    2cf4:	af 90       	pop	r10
    2cf6:	9f 90       	pop	r9
    2cf8:	8f 90       	pop	r8
    2cfa:	7f 90       	pop	r7
    2cfc:	6f 90       	pop	r6
    2cfe:	08 95       	ret

00002d00 <lcd_puts>:
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
void lcd_puts(const char* s){
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
    2d04:	ec 01       	movw	r28, r24
    while (*s) {
    2d06:	88 81       	ld	r24, Y
    2d08:	88 23       	and	r24, r24
    2d0a:	31 f0       	breq	.+12     	; 0x2d18 <lcd_puts+0x18>
        lcd_putc(*s++);
    2d0c:	21 96       	adiw	r28, 0x01	; 1
    2d0e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <lcd_putc>
}
void lcd_charMode(uint8_t mode){
    charMode = mode;
}
void lcd_puts(const char* s){
    while (*s) {
    2d12:	88 81       	ld	r24, Y
    2d14:	88 23       	and	r24, r24
    2d16:	d1 f7       	brne	.-12     	; 0x2d0c <lcd_puts+0xc>
        lcd_putc(*s++);
    }
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	08 95       	ret

00002d1e <lcd_clrscr>:
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}
void lcd_clrscr(void){
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	1f 93       	push	r17
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	cd b7       	in	r28, 0x3d	; 61
    2d2a:	de b7       	in	r29, 0x3e	; 62
    2d2c:	c0 58       	subi	r28, 0x80	; 128
    2d2e:	d0 40       	sbci	r29, 0x00	; 0
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
    }
#elif defined TEXTMODE
    uint8_t displayBuffer[DISPLAY_WIDTH];
    memset(displayBuffer, 0x00, sizeof(displayBuffer));
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	31 96       	adiw	r30, 0x01	; 1
    2d3e:	80 e8       	ldi	r24, 0x80	; 128
    2d40:	df 01       	movw	r26, r30
    2d42:	1d 92       	st	X+, r1
    2d44:	8a 95       	dec	r24
    2d46:	e9 f7       	brne	.-6      	; 0x2d42 <lcd_clrscr+0x24>
    2d48:	10 e0       	ldi	r17, 0x00	; 0
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer, sizeof(displayBuffer));
    2d4a:	7f 01       	movw	r14, r30
    }
#elif defined TEXTMODE
    uint8_t displayBuffer[DISPLAY_WIDTH];
    memset(displayBuffer, 0x00, sizeof(displayBuffer));
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
        lcd_gotoxy(0,i);
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	61 2f       	mov	r22, r17
    2d50:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
        lcd_data(displayBuffer, sizeof(displayBuffer));
    2d54:	c7 01       	movw	r24, r14
    2d56:	60 e8       	ldi	r22, 0x80	; 128
    2d58:	70 e0       	ldi	r23, 0x00	; 0
    2d5a:	0e 94 6e 14 	call	0x28dc	; 0x28dc <lcd_data>
        lcd_data(displayBuffer[i], sizeof(displayBuffer[i]));
    }
#elif defined TEXTMODE
    uint8_t displayBuffer[DISPLAY_WIDTH];
    memset(displayBuffer, 0x00, sizeof(displayBuffer));
    for (uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++){
    2d5e:	1f 5f       	subi	r17, 0xFF	; 255
    2d60:	18 30       	cpi	r17, 0x08	; 8
    2d62:	a1 f7       	brne	.-24     	; 0x2d4c <lcd_clrscr+0x2e>
        lcd_gotoxy(0,i);
        lcd_data(displayBuffer, sizeof(displayBuffer));
    }
#endif
    lcd_home();
    2d64:	0e 94 dd 14 	call	0x29ba	; 0x29ba <lcd_home>
}
    2d68:	c0 58       	subi	r28, 0x80	; 128
    2d6a:	df 4f       	sbci	r29, 0xFF	; 255
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	cf 91       	pop	r28
    2d78:	df 91       	pop	r29
    2d7a:	1f 91       	pop	r17
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	08 95       	ret

00002d82 <lcd_init>:
    }
    i2c_stop();
}
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
    2d82:	1f 93       	push	r17
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	6c 97       	sbiw	r28, 0x1c	; 28
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	18 2f       	mov	r17, r24
    i2c_init();
    2d9a:	0e 94 15 14 	call	0x282a	; 0x282a <i2c_init>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    2da2:	4c ee       	ldi	r20, 0xEC	; 236
    2da4:	52 e0       	ldi	r21, 0x02	; 2
    2da6:	9e 01       	movw	r18, r28
    2da8:	2f 5f       	subi	r18, 0xFF	; 255
    2daa:	3f 4f       	sbci	r19, 0xFF	; 255
    2dac:	fa 01       	movw	r30, r20
    2dae:	e8 0f       	add	r30, r24
    2db0:	f9 1f       	adc	r31, r25
    2db2:	e4 91       	lpm	r30, Z+
    2db4:	d9 01       	movw	r26, r18
    2db6:	a8 0f       	add	r26, r24
    2db8:	b9 1f       	adc	r27, r25
    2dba:	ec 93       	st	X, r30
    2dbc:	01 96       	adiw	r24, 0x01	; 1
#pragma mark -
#pragma mark GENERAL FUNCTIONS
void lcd_init(uint8_t dispAttr){
    i2c_init();
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
    2dbe:	8b 31       	cpi	r24, 0x1B	; 27
    2dc0:	91 05       	cpc	r25, r1
    2dc2:	a1 f7       	brne	.-24     	; 0x2dac <lcd_init+0x2a>
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
    2dc4:	1c 8f       	std	Y+28, r17	; 0x1c
    lcd_command(commandSequence, sizeof(commandSequence));
    2dc6:	ce 01       	movw	r24, r28
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	6c e1       	ldi	r22, 0x1C	; 28
    2dcc:	0e 94 94 14 	call	0x2928	; 0x2928 <lcd_command>
    lcd_clrscr();
    2dd0:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <lcd_clrscr>
}
    2dd4:	6c 96       	adiw	r28, 0x1c	; 28
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	1f 91       	pop	r17
    2de6:	08 95       	ret

00002de8 <USART_Init>:
FATFS FatFs;		/* FatFs work area needed for each volume */
FIL Fil;			/* File object needed for each open file */

void USART_Init(void) 
{
	UBRR0H = (uint8_t) (__UBRR >> 8);
    2de8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t) (__UBRR);
    2dec:	83 e3       	ldi	r24, 0x33	; 51
    2dee:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2df2:	88 e1       	ldi	r24, 0x18	; 24
    2df4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (1<<UCSZ00) | (1<<UCSZ01); // Set frame: 8data, 1 stop
    2df8:	86 e0       	ldi	r24, 0x06	; 6
    2dfa:	80 93 c2 00 	sts	0x00C2, r24
}
    2dfe:	08 95       	ret

00002e00 <USART_Receive>:

char USART_Receive(void) 
{	
	while (!(UCSR0A & (1<<RXC0)));
    2e00:	e0 ec       	ldi	r30, 0xC0	; 192
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	88 23       	and	r24, r24
    2e08:	ec f7       	brge	.-6      	; 0x2e04 <USART_Receive+0x4>
	return UDR0;
    2e0a:	80 91 c6 00 	lds	r24, 0x00C6
}
    2e0e:	08 95       	ret

00002e10 <clearBuffor>:

void clearBuffor()
{
    2e10:	e7 e6       	ldi	r30, 0x67	; 103
    2e12:	f1 e0       	ldi	r31, 0x01	; 1
	int i, j;
	
	for(i = 0; i < GPS_BUFFOR_SIZE-1; ++i)
	{
		GPSBuffor[i] = "";
    2e14:	4d e1       	ldi	r20, 0x1D	; 29
    2e16:	51 e0       	ldi	r21, 0x01	; 1

void clearBuffor()
{
	int i, j;
	
	for(i = 0; i < GPS_BUFFOR_SIZE-1; ++i)
    2e18:	26 eb       	ldi	r18, 0xB6	; 182
    2e1a:	31 e0       	ldi	r19, 0x01	; 1
	{
		GPSBuffor[i] = "";
    2e1c:	41 93       	st	Z+, r20

void clearBuffor()
{
	int i, j;
	
	for(i = 0; i < GPS_BUFFOR_SIZE-1; ++i)
    2e1e:	e2 17       	cp	r30, r18
    2e20:	f3 07       	cpc	r31, r19
    2e22:	e1 f7       	brne	.-8      	; 0x2e1c <clearBuffor+0xc>
	{
		GPSBuffor[i] = "";
	}
	
	latf = 0;
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	a0 e0       	ldi	r26, 0x00	; 0
    2e2a:	b0 e0       	ldi	r27, 0x00	; 0
    2e2c:	80 93 72 02 	sts	0x0272, r24
    2e30:	90 93 73 02 	sts	0x0273, r25
    2e34:	a0 93 74 02 	sts	0x0274, r26
    2e38:	b0 93 75 02 	sts	0x0275, r27
	lonf = 0;
    2e3c:	80 93 76 02 	sts	0x0276, r24
    2e40:	90 93 77 02 	sts	0x0277, r25
    2e44:	a0 93 78 02 	sts	0x0278, r26
    2e48:	b0 93 79 02 	sts	0x0279, r27
}
    2e4c:	08 95       	ret

00002e4e <getNmea>:

int getNmea()
{
    2e4e:	ef 92       	push	r14
    2e50:	ff 92       	push	r15
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
	clearBuffor();
    2e5a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <clearBuffor>
    2e5e:	c0 e0       	ldi	r28, 0x00	; 0
    2e60:	d0 e0       	ldi	r29, 0x00	; 0
		}
		
		//0x24 = $
		if(buffor == (char)0x24 || GPSBuffor[0] == (char)0x24) {
					
			GPSBuffor[i] = buffor;
    2e62:	07 e6       	ldi	r16, 0x67	; 103
    2e64:	11 e0       	ldi	r17, 0x01	; 1
				break;
			}
		}
		
		//0x24 = $
		if(buffor == (char)0x24 && (GPSBuffor[0] == (char)0x24 || GPSBuffor[1] == (char)0x24)) {
    2e66:	0f 2e       	mov	r0, r31
    2e68:	f8 e6       	ldi	r31, 0x68	; 104
    2e6a:	ef 2e       	mov	r14, r31
    2e6c:	f1 e0       	ldi	r31, 0x01	; 1
    2e6e:	ff 2e       	mov	r15, r31
    2e70:	f0 2d       	mov	r31, r0
	int nmeaReady = 0;
	int i = 0;
	
	while(1)
	{
		buffor = USART_Receive();
    2e72:	0e 94 00 17 	call	0x2e00	; 0x2e00 <USART_Receive>
    2e76:	98 2f       	mov	r25, r24
			
		//0x0D  cr
		//0x0A nl
		if(buffor == (char)0x0D || buffor == (char)0x0A || i > GPS_BUFFOR_SIZE - 1 ) {
    2e78:	8d 30       	cpi	r24, 0x0D	; 13
    2e7a:	29 f0       	breq	.+10     	; 0x2e86 <getNmea+0x38>
    2e7c:	8a 30       	cpi	r24, 0x0A	; 10
    2e7e:	19 f0       	breq	.+6      	; 0x2e86 <getNmea+0x38>
    2e80:	c0 35       	cpi	r28, 0x50	; 80
    2e82:	d1 05       	cpc	r29, r1
    2e84:	8c f0       	brlt	.+34     	; 0x2ea8 <getNmea+0x5a>
			
			//0x24 = $
			//0x47 = G
			//0x50 = P
			if(GPSBuffor[0] == (char)0x24 && GPSBuffor[1] == (char)0x47 && GPSBuffor[2] == (char)0x50)
    2e86:	80 91 67 01 	lds	r24, 0x0167
    2e8a:	84 32       	cpi	r24, 0x24	; 36
    2e8c:	41 f4       	brne	.+16     	; 0x2e9e <getNmea+0x50>
    2e8e:	80 91 68 01 	lds	r24, 0x0168
    2e92:	87 34       	cpi	r24, 0x47	; 71
    2e94:	21 f4       	brne	.+8      	; 0x2e9e <getNmea+0x50>
    2e96:	80 91 69 01 	lds	r24, 0x0169
    2e9a:	80 35       	cpi	r24, 0x50	; 80
    2e9c:	f1 f0       	breq	.+60     	; 0x2eda <getNmea+0x8c>
			{
				nmeaReady = 1;
				break;
			} else {
				clearBuffor();	
    2e9e:	0e 94 08 17 	call	0x2e10	; 0x2e10 <clearBuffor>
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	1b c0       	rjmp	.+54     	; 0x2ede <getNmea+0x90>
				break;
			}
		}
		
		//0x24 = $
		if(buffor == (char)0x24 && (GPSBuffor[0] == (char)0x24 || GPSBuffor[1] == (char)0x24)) {
    2ea8:	84 32       	cpi	r24, 0x24	; 36
    2eaa:	69 f4       	brne	.+26     	; 0x2ec6 <getNmea+0x78>
    2eac:	f8 01       	movw	r30, r16
    2eae:	80 81       	ld	r24, Z
    2eb0:	84 32       	cpi	r24, 0x24	; 36
    2eb2:	21 f0       	breq	.+8      	; 0x2ebc <getNmea+0x6e>
    2eb4:	f7 01       	movw	r30, r14
    2eb6:	80 81       	ld	r24, Z
    2eb8:	84 32       	cpi	r24, 0x24	; 36
    2eba:	49 f4       	brne	.+18     	; 0x2ece <getNmea+0x80>
			clearBuffor();	
    2ebc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <clearBuffor>
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
    2ec4:	0c c0       	rjmp	.+24     	; 0x2ede <getNmea+0x90>
			break;
		}
		
		//0x24 = $
		if(buffor == (char)0x24 || GPSBuffor[0] == (char)0x24) {
    2ec6:	f8 01       	movw	r30, r16
    2ec8:	80 81       	ld	r24, Z
    2eca:	84 32       	cpi	r24, 0x24	; 36
    2ecc:	91 f6       	brne	.-92     	; 0x2e72 <getNmea+0x24>
					
			GPSBuffor[i] = buffor;
    2ece:	f8 01       	movw	r30, r16
    2ed0:	ec 0f       	add	r30, r28
    2ed2:	fd 1f       	adc	r31, r29
    2ed4:	90 83       	st	Z, r25
			i = i+1;
    2ed6:	21 96       	adiw	r28, 0x01	; 1
    2ed8:	cc cf       	rjmp	.-104    	; 0x2e72 <getNmea+0x24>
    2eda:	21 e0       	ldi	r18, 0x01	; 1
    2edc:	30 e0       	ldi	r19, 0x00	; 0
		}
	}
	
	return nmeaReady;
}
    2ede:	82 2f       	mov	r24, r18
    2ee0:	93 2f       	mov	r25, r19
    2ee2:	df 91       	pop	r29
    2ee4:	cf 91       	pop	r28
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	ff 90       	pop	r15
    2eec:	ef 90       	pop	r14
    2eee:	08 95       	ret

00002ef0 <showOnDisplay>:
		}
	}
}

void showOnDisplay()
{
    2ef0:	2f 92       	push	r2
    2ef2:	3f 92       	push	r3
    2ef4:	4f 92       	push	r4
    2ef6:	5f 92       	push	r5
    2ef8:	6f 92       	push	r6
    2efa:	7f 92       	push	r7
    2efc:	8f 92       	push	r8
    2efe:	9f 92       	push	r9
    2f00:	af 92       	push	r10
    2f02:	bf 92       	push	r11
    2f04:	cf 92       	push	r12
    2f06:	df 92       	push	r13
    2f08:	ef 92       	push	r14
    2f0a:	ff 92       	push	r15
    2f0c:	0f 93       	push	r16
    2f0e:	1f 93       	push	r17
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	c0 56       	subi	r28, 0x60	; 96
    2f1a:	d0 40       	sbci	r29, 0x00	; 0
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	de bf       	out	0x3e, r29	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	cd bf       	out	0x3d, r28	; 61
	char latStr[30];
	char lonStr[30];
	char speedStr[30];
	
	latf = atof(lat);
    2f26:	87 eb       	ldi	r24, 0xB7	; 183
    2f28:	91 e0       	ldi	r25, 0x01	; 1
    2f2a:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <atof>
    2f2e:	60 93 72 02 	sts	0x0272, r22
    2f32:	70 93 73 02 	sts	0x0273, r23
    2f36:	80 93 74 02 	sts	0x0274, r24
    2f3a:	90 93 75 02 	sts	0x0275, r25
	lonf = atof(lon);
    2f3e:	86 ec       	ldi	r24, 0xC6	; 198
    2f40:	91 e0       	ldi	r25, 0x01	; 1
    2f42:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <atof>
    2f46:	60 93 76 02 	sts	0x0276, r22
    2f4a:	70 93 77 02 	sts	0x0277, r23
    2f4e:	80 93 78 02 	sts	0x0278, r24
    2f52:	90 93 79 02 	sts	0x0279, r25
	float speedkmh = atof(speed);
    2f56:	89 ed       	ldi	r24, 0xD9	; 217
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <atof>
	int speedkmhint = speedkmh*3.6;	
    2f5e:	26 e6       	ldi	r18, 0x66	; 102
    2f60:	36 e6       	ldi	r19, 0x66	; 102
    2f62:	46 e6       	ldi	r20, 0x66	; 102
    2f64:	50 e4       	ldi	r21, 0x40	; 64
    2f66:	0e 94 31 20 	call	0x4062	; 0x4062 <__mulsf3>
    2f6a:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__fixsfsi>
    2f6e:	6d 96       	adiw	r28, 0x1d	; 29
    2f70:	7f af       	std	Y+63, r23	; 0x3f
    2f72:	6e af       	std	Y+62, r22	; 0x3e
    2f74:	6d 97       	sbiw	r28, 0x1d	; 29
	speedkmhint = (speedkmhint < 10) ? 0 : speedkmhint;
    2f76:	6a 30       	cpi	r22, 0x0A	; 10
    2f78:	71 05       	cpc	r23, r1
    2f7a:	24 f4       	brge	.+8      	; 0x2f84 <showOnDisplay+0x94>
    2f7c:	6d 96       	adiw	r28, 0x1d	; 29
    2f7e:	1f ae       	std	Y+63, r1	; 0x3f
    2f80:	1e ae       	std	Y+62, r1	; 0x3e
    2f82:	6d 97       	sbiw	r28, 0x1d	; 29
	
	if(latf>0 && lonf>0) {
    2f84:	c0 90 72 02 	lds	r12, 0x0272
    2f88:	d0 90 73 02 	lds	r13, 0x0273
    2f8c:	e0 90 74 02 	lds	r14, 0x0274
    2f90:	f0 90 75 02 	lds	r15, 0x0275
    2f94:	c7 01       	movw	r24, r14
    2f96:	b6 01       	movw	r22, r12
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e0       	ldi	r20, 0x00	; 0
    2f9e:	50 e0       	ldi	r21, 0x00	; 0
    2fa0:	0e 94 2d 20 	call	0x405a	; 0x405a <__gesf2>
    2fa4:	18 16       	cp	r1, r24
    2fa6:	0c f0       	brlt	.+2      	; 0x2faa <showOnDisplay+0xba>
    2fa8:	17 c1       	rjmp	.+558    	; 0x31d8 <showOnDisplay+0x2e8>
    2faa:	80 90 76 02 	lds	r8, 0x0276
    2fae:	90 90 77 02 	lds	r9, 0x0277
    2fb2:	a0 90 78 02 	lds	r10, 0x0278
    2fb6:	b0 90 79 02 	lds	r11, 0x0279
    2fba:	c5 01       	movw	r24, r10
    2fbc:	b4 01       	movw	r22, r8
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	0e 94 2d 20 	call	0x405a	; 0x405a <__gesf2>
    2fca:	18 16       	cp	r1, r24
    2fcc:	0c f0       	brlt	.+2      	; 0x2fd0 <showOnDisplay+0xe0>
    2fce:	04 c1       	rjmp	.+520    	; 0x31d8 <showOnDisplay+0x2e8>

		int latdegrees = latf / 100;
    2fd0:	c7 01       	movw	r24, r14
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	48 ec       	ldi	r20, 0xC8	; 200
    2fda:	52 e4       	ldi	r21, 0x42	; 66
    2fdc:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__divsf3>
    2fe0:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__fixsfsi>
    2fe4:	2b 01       	movw	r4, r22
    2fe6:	3c 01       	movw	r6, r24
		latf = latf - (latdegrees*100);
    2fe8:	04 e6       	ldi	r16, 0x64	; 100
    2fea:	10 e0       	ldi	r17, 0x00	; 0
    2fec:	04 9d       	mul	r16, r4
    2fee:	b0 01       	movw	r22, r0
    2ff0:	05 9d       	mul	r16, r5
    2ff2:	70 0d       	add	r23, r0
    2ff4:	14 9d       	mul	r17, r4
    2ff6:	70 0d       	add	r23, r0
    2ff8:	11 24       	eor	r1, r1
    2ffa:	88 27       	eor	r24, r24
    2ffc:	77 fd       	sbrc	r23, 7
    2ffe:	80 95       	com	r24
    3000:	98 2f       	mov	r25, r24
    3002:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <__floatsisf>
    3006:	9b 01       	movw	r18, r22
    3008:	ac 01       	movw	r20, r24
    300a:	c7 01       	movw	r24, r14
    300c:	b6 01       	movw	r22, r12
    300e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__subsf3>
    3012:	6b 01       	movw	r12, r22
    3014:	7c 01       	movw	r14, r24
    3016:	60 93 72 02 	sts	0x0272, r22
    301a:	70 93 73 02 	sts	0x0273, r23
    301e:	80 93 74 02 	sts	0x0274, r24
    3022:	90 93 75 02 	sts	0x0275, r25
		float latminutes = latf / 60;
		unsigned long latmin = (unsigned long)(latminutes * 100000);

		int londegrees = lonf / 100;
    3026:	c5 01       	movw	r24, r10
    3028:	b4 01       	movw	r22, r8
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	30 e0       	ldi	r19, 0x00	; 0
    302e:	48 ec       	ldi	r20, 0xC8	; 200
    3030:	52 e4       	ldi	r21, 0x42	; 66
    3032:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__divsf3>
    3036:	0e 94 6e 1f 	call	0x3edc	; 0x3edc <__fixsfsi>
    303a:	a1 96       	adiw	r28, 0x21	; 33
    303c:	6c af       	std	Y+60, r22	; 0x3c
    303e:	7d af       	std	Y+61, r23	; 0x3d
    3040:	8e af       	std	Y+62, r24	; 0x3e
    3042:	9f af       	std	Y+63, r25	; 0x3f
    3044:	a1 97       	sbiw	r28, 0x21	; 33
		lonf = lonf - (londegrees*100);
    3046:	6f 96       	adiw	r28, 0x1f	; 31
    3048:	ee ad       	ldd	r30, Y+62	; 0x3e
    304a:	ff ad       	ldd	r31, Y+63	; 0x3f
    304c:	6f 97       	sbiw	r28, 0x1f	; 31
    304e:	0e 9f       	mul	r16, r30
    3050:	b0 01       	movw	r22, r0
    3052:	0f 9f       	mul	r16, r31
    3054:	70 0d       	add	r23, r0
    3056:	1e 9f       	mul	r17, r30
    3058:	70 0d       	add	r23, r0
    305a:	11 24       	eor	r1, r1
    305c:	88 27       	eor	r24, r24
    305e:	77 fd       	sbrc	r23, 7
    3060:	80 95       	com	r24
    3062:	98 2f       	mov	r25, r24
    3064:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <__floatsisf>
    3068:	9b 01       	movw	r18, r22
    306a:	ac 01       	movw	r20, r24
    306c:	c5 01       	movw	r24, r10
    306e:	b4 01       	movw	r22, r8
    3070:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <__subsf3>
    3074:	4b 01       	movw	r8, r22
    3076:	5c 01       	movw	r10, r24
    3078:	60 93 76 02 	sts	0x0276, r22
    307c:	70 93 77 02 	sts	0x0277, r23
    3080:	80 93 78 02 	sts	0x0278, r24
    3084:	90 93 79 02 	sts	0x0279, r25
		float lonminutes = lonf / 60;
		unsigned long lonmin = (unsigned long)(lonminutes * 1000000);
		
		sprintf(latStr, "Lat: %d.%ld %s", latdegrees, latmin, latDir);
    3088:	8d b7       	in	r24, 0x3d	; 61
    308a:	9e b7       	in	r25, 0x3e	; 62
    308c:	0c 97       	sbiw	r24, 0x0c	; 12
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	9e bf       	out	0x3e, r25	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	8d bf       	out	0x3d, r24	; 61
    3098:	0d b7       	in	r16, 0x3d	; 61
    309a:	1e b7       	in	r17, 0x3e	; 62
    309c:	0f 5f       	subi	r16, 0xFF	; 255
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	1e 01       	movw	r2, r28
    30a2:	08 94       	sec
    30a4:	21 1c       	adc	r2, r1
    30a6:	31 1c       	adc	r3, r1
    30a8:	f8 01       	movw	r30, r16
    30aa:	31 82       	std	Z+1, r3	; 0x01
    30ac:	20 82       	st	Z, r2
    30ae:	8e e1       	ldi	r24, 0x1E	; 30
    30b0:	91 e0       	ldi	r25, 0x01	; 1
    30b2:	93 83       	std	Z+3, r25	; 0x03
    30b4:	82 83       	std	Z+2, r24	; 0x02
    30b6:	55 82       	std	Z+5, r5	; 0x05
    30b8:	44 82       	std	Z+4, r4	; 0x04
    30ba:	c7 01       	movw	r24, r14
    30bc:	b6 01       	movw	r22, r12
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e7       	ldi	r20, 0x70	; 112
    30c4:	52 e4       	ldi	r21, 0x42	; 66
    30c6:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__divsf3>
    30ca:	20 e0       	ldi	r18, 0x00	; 0
    30cc:	30 e5       	ldi	r19, 0x50	; 80
    30ce:	43 ec       	ldi	r20, 0xC3	; 195
    30d0:	57 e4       	ldi	r21, 0x47	; 71
    30d2:	0e 94 31 20 	call	0x4062	; 0x4062 <__mulsf3>
    30d6:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__fixunssfsi>
    30da:	f8 01       	movw	r30, r16
    30dc:	66 83       	std	Z+6, r22	; 0x06
    30de:	77 83       	std	Z+7, r23	; 0x07
    30e0:	80 87       	std	Z+8, r24	; 0x08
    30e2:	91 87       	std	Z+9, r25	; 0x09
    30e4:	85 ed       	ldi	r24, 0xD5	; 213
    30e6:	91 e0       	ldi	r25, 0x01	; 1
    30e8:	93 87       	std	Z+11, r25	; 0x0b
    30ea:	82 87       	std	Z+10, r24	; 0x0a
    30ec:	0e 94 39 21 	call	0x4272	; 0x4272 <sprintf>
		sprintf(lonStr, "Lon: %d.%ld %s", londegrees, lonmin, lonDir);
    30f0:	0d b7       	in	r16, 0x3d	; 61
    30f2:	1e b7       	in	r17, 0x3e	; 62
    30f4:	0f 5f       	subi	r16, 0xFF	; 255
    30f6:	1f 4f       	sbci	r17, 0xFF	; 255
    30f8:	0f 2e       	mov	r0, r31
    30fa:	ff e1       	ldi	r31, 0x1F	; 31
    30fc:	ef 2e       	mov	r14, r31
    30fe:	ff 24       	eor	r15, r15
    3100:	f0 2d       	mov	r31, r0
    3102:	ec 0e       	add	r14, r28
    3104:	fd 1e       	adc	r15, r29
    3106:	f8 01       	movw	r30, r16
    3108:	f1 82       	std	Z+1, r15	; 0x01
    310a:	e0 82       	st	Z, r14
    310c:	8d e2       	ldi	r24, 0x2D	; 45
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	93 83       	std	Z+3, r25	; 0x03
    3112:	82 83       	std	Z+2, r24	; 0x02
    3114:	6f 96       	adiw	r28, 0x1f	; 31
    3116:	8e ad       	ldd	r24, Y+62	; 0x3e
    3118:	9f ad       	ldd	r25, Y+63	; 0x3f
    311a:	6f 97       	sbiw	r28, 0x1f	; 31
    311c:	95 83       	std	Z+5, r25	; 0x05
    311e:	84 83       	std	Z+4, r24	; 0x04
    3120:	c5 01       	movw	r24, r10
    3122:	b4 01       	movw	r22, r8
    3124:	20 e0       	ldi	r18, 0x00	; 0
    3126:	30 e0       	ldi	r19, 0x00	; 0
    3128:	40 e7       	ldi	r20, 0x70	; 112
    312a:	52 e4       	ldi	r21, 0x42	; 66
    312c:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <__divsf3>
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	34 e2       	ldi	r19, 0x24	; 36
    3134:	44 e7       	ldi	r20, 0x74	; 116
    3136:	59 e4       	ldi	r21, 0x49	; 73
    3138:	0e 94 31 20 	call	0x4062	; 0x4062 <__mulsf3>
    313c:	0e 94 73 1f 	call	0x3ee6	; 0x3ee6 <__fixunssfsi>
    3140:	f8 01       	movw	r30, r16
    3142:	66 83       	std	Z+6, r22	; 0x06
    3144:	77 83       	std	Z+7, r23	; 0x07
    3146:	80 87       	std	Z+8, r24	; 0x08
    3148:	91 87       	std	Z+9, r25	; 0x09
    314a:	87 ed       	ldi	r24, 0xD7	; 215
    314c:	91 e0       	ldi	r25, 0x01	; 1
    314e:	93 87       	std	Z+11, r25	; 0x0b
    3150:	82 87       	std	Z+10, r24	; 0x0a
    3152:	0e 94 39 21 	call	0x4272	; 0x4272 <sprintf>
		sprintf(speedStr, "Speed: %d", speedkmhint);
    3156:	8d b7       	in	r24, 0x3d	; 61
    3158:	9e b7       	in	r25, 0x3e	; 62
    315a:	06 96       	adiw	r24, 0x06	; 6
    315c:	0f b6       	in	r0, 0x3f	; 63
    315e:	f8 94       	cli
    3160:	9e bf       	out	0x3e, r25	; 62
    3162:	0f be       	out	0x3f, r0	; 63
    3164:	8d bf       	out	0x3d, r24	; 61
    3166:	ed b7       	in	r30, 0x3d	; 61
    3168:	fe b7       	in	r31, 0x3e	; 62
    316a:	31 96       	adiw	r30, 0x01	; 1
    316c:	8e 01       	movw	r16, r28
    316e:	03 5c       	subi	r16, 0xC3	; 195
    3170:	1f 4f       	sbci	r17, 0xFF	; 255
    3172:	11 83       	std	Z+1, r17	; 0x01
    3174:	00 83       	st	Z, r16
    3176:	8c e3       	ldi	r24, 0x3C	; 60
    3178:	91 e0       	ldi	r25, 0x01	; 1
    317a:	93 83       	std	Z+3, r25	; 0x03
    317c:	82 83       	std	Z+2, r24	; 0x02
    317e:	6d 96       	adiw	r28, 0x1d	; 29
    3180:	8e ad       	ldd	r24, Y+62	; 0x3e
    3182:	9f ad       	ldd	r25, Y+63	; 0x3f
    3184:	6d 97       	sbiw	r28, 0x1d	; 29
    3186:	95 83       	std	Z+5, r25	; 0x05
    3188:	84 83       	std	Z+4, r24	; 0x04
    318a:	0e 94 39 21 	call	0x4272	; 0x4272 <sprintf>
		
		lcd_clrscr();
    318e:	ed b7       	in	r30, 0x3d	; 61
    3190:	fe b7       	in	r31, 0x3e	; 62
    3192:	36 96       	adiw	r30, 0x06	; 6
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	fe bf       	out	0x3e, r31	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	ed bf       	out	0x3d, r30	; 61
    319e:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <lcd_clrscr>
		lcd_puts(latStr);
    31a2:	c1 01       	movw	r24, r2
    31a4:	0e 94 80 16 	call	0x2d00	; 0x2d00 <lcd_puts>
		lcd_gotoxy(0,2);
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	62 e0       	ldi	r22, 0x02	; 2
    31ac:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
		lcd_puts(lonStr);
    31b0:	c7 01       	movw	r24, r14
    31b2:	0e 94 80 16 	call	0x2d00	; 0x2d00 <lcd_puts>
		lcd_gotoxy(0,4);
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	64 e0       	ldi	r22, 0x04	; 4
    31ba:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
		lcd_puts(speedStr);
    31be:	c8 01       	movw	r24, r16
    31c0:	0e 94 80 16 	call	0x2d00	; 0x2d00 <lcd_puts>
    31c4:	20 e5       	ldi	r18, 0x50	; 80
    31c6:	33 ec       	ldi	r19, 0xC3	; 195
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31c8:	48 ec       	ldi	r20, 0xC8	; 200
    31ca:	50 e0       	ldi	r21, 0x00	; 0
    31cc:	ca 01       	movw	r24, r20
    31ce:	01 97       	sbiw	r24, 0x01	; 1
    31d0:	f1 f7       	brne	.-4      	; 0x31ce <showOnDisplay+0x2de>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31d2:	21 50       	subi	r18, 0x01	; 1
    31d4:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	d1 f7       	brne	.-12     	; 0x31cc <showOnDisplay+0x2dc>

		_delay_ms(5000);
	}
}
    31d8:	c0 5a       	subi	r28, 0xA0	; 160
    31da:	df 4f       	sbci	r29, 0xFF	; 255
    31dc:	0f b6       	in	r0, 0x3f	; 63
    31de:	f8 94       	cli
    31e0:	de bf       	out	0x3e, r29	; 62
    31e2:	0f be       	out	0x3f, r0	; 63
    31e4:	cd bf       	out	0x3d, r28	; 61
    31e6:	cf 91       	pop	r28
    31e8:	df 91       	pop	r29
    31ea:	1f 91       	pop	r17
    31ec:	0f 91       	pop	r16
    31ee:	ff 90       	pop	r15
    31f0:	ef 90       	pop	r14
    31f2:	df 90       	pop	r13
    31f4:	cf 90       	pop	r12
    31f6:	bf 90       	pop	r11
    31f8:	af 90       	pop	r10
    31fa:	9f 90       	pop	r9
    31fc:	8f 90       	pop	r8
    31fe:	7f 90       	pop	r7
    3200:	6f 90       	pop	r6
    3202:	5f 90       	pop	r5
    3204:	4f 90       	pop	r4
    3206:	3f 90       	pop	r3
    3208:	2f 90       	pop	r2
    320a:	08 95       	ret

0000320c <parseBuffor>:

void parseBuffor()
{
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	c0 55       	subi	r28, 0x50	; 80
    321a:	d0 40       	sbci	r29, 0x00	; 0
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
	char buffor[GPS_BUFFOR_SIZE];	
	strcpy(buffor, GPSBuffor);
    3226:	8e 01       	movw	r16, r28
    3228:	0f 5f       	subi	r16, 0xFF	; 255
    322a:	1f 4f       	sbci	r17, 0xFF	; 255
    322c:	c8 01       	movw	r24, r16
    322e:	67 e6       	ldi	r22, 0x67	; 103
    3230:	71 e0       	ldi	r23, 0x01	; 1
    3232:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>

	char* Message_ID = strtok(buffor,",");	
    3236:	c8 01       	movw	r24, r16
    3238:	66 e4       	ldi	r22, 0x46	; 70
    323a:	71 e0       	ldi	r23, 0x01	; 1
    323c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
	
	if(strcmp(Message_ID, "$GPRMC") == 0) {
    3240:	68 e4       	ldi	r22, 0x48	; 72
    3242:	71 e0       	ldi	r23, 0x01	; 1
    3244:	0e 94 02 21 	call	0x4204	; 0x4204 <strcmp>
    3248:	28 2f       	mov	r18, r24
    324a:	39 2f       	mov	r19, r25
    324c:	23 2b       	or	r18, r19
    324e:	09 f0       	breq	.+2      	; 0x3252 <parseBuffor+0x46>
    3250:	59 c0       	rjmp	.+178    	; 0x3304 <parseBuffor+0xf8>
		// $GPRMC,081836,A,3751.65,S,14507.36,E,000.0,360.0,130998,011.3,E*62
		char* Time = strtok(NULL,",");
    3252:	06 e4       	ldi	r16, 0x46	; 70
    3254:	11 e0       	ldi	r17, 0x01	; 1
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	b8 01       	movw	r22, r16
    325c:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		char* Data_Valid = strtok(NULL,",");
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	b8 01       	movw	r22, r16
    3266:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		
		strcpy(lat, strtok(NULL,","));
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	b8 01       	movw	r22, r16
    3270:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
    3274:	bc 01       	movw	r22, r24
    3276:	87 eb       	ldi	r24, 0xB7	; 183
    3278:	91 e0       	ldi	r25, 0x01	; 1
    327a:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
		strcpy(latDir, strtok(NULL,","));
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	b8 01       	movw	r22, r16
    3284:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
    3288:	bc 01       	movw	r22, r24
    328a:	85 ed       	ldi	r24, 0xD5	; 213
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
		strcpy(lon, strtok(NULL,","));
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	b8 01       	movw	r22, r16
    3298:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
    329c:	bc 01       	movw	r22, r24
    329e:	86 ec       	ldi	r24, 0xC6	; 198
    32a0:	91 e0       	ldi	r25, 0x01	; 1
    32a2:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
		strcpy(lonDir, strtok(NULL,","));
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	b8 01       	movw	r22, r16
    32ac:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
    32b0:	bc 01       	movw	r22, r24
    32b2:	87 ed       	ldi	r24, 0xD7	; 215
    32b4:	91 e0       	ldi	r25, 0x01	; 1
    32b6:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
		strcpy(speed, strtok(NULL,","));
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	b8 01       	movw	r22, r16
    32c0:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
    32c4:	bc 01       	movw	r22, r24
    32c6:	89 ed       	ldi	r24, 0xD9	; 217
    32c8:	91 e0       	ldi	r25, 0x01	; 1
    32ca:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
		char* COG = strtok(NULL,",");
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	b8 01       	movw	r22, r16
    32d4:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		char* Date = strtok(NULL,",");
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	90 e0       	ldi	r25, 0x00	; 0
    32dc:	b8 01       	movw	r22, r16
    32de:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		char* Magnetic_Variation = strtok(NULL,",");
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	b8 01       	movw	r22, r16
    32e8:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		char* M_E_W = strtok(NULL,",");
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	b8 01       	movw	r22, r16
    32f2:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>
		char* Positioning_Mode = strtok(NULL,",");
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	b8 01       	movw	r22, r16
    32fc:	0e 94 fd 20 	call	0x41fa	; 0x41fa <strtok>

		showOnDisplay();
    3300:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <showOnDisplay>
	
	} 
		
}
    3304:	c0 5b       	subi	r28, 0xB0	; 176
    3306:	df 4f       	sbci	r29, 0xFF	; 255
    3308:	0f b6       	in	r0, 0x3f	; 63
    330a:	f8 94       	cli
    330c:	de bf       	out	0x3e, r29	; 62
    330e:	0f be       	out	0x3f, r0	; 63
    3310:	cd bf       	out	0x3d, r28	; 61
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	1f 91       	pop	r17
    3318:	0f 91       	pop	r16
    331a:	08 95       	ret

0000331c <saveBufforToMmc>:
	
	return nmeaReady;
}

void saveBufforToMmc()
{
    331c:	0f 93       	push	r16
    331e:	1f 93       	push	r17
    3320:	df 93       	push	r29
    3322:	cf 93       	push	r28
    3324:	00 d0       	rcall	.+0      	; 0x3326 <saveBufforToMmc+0xa>
    3326:	00 d0       	rcall	.+0      	; 0x3328 <saveBufforToMmc+0xc>
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
	UINT bw1, bw2;
	f_mount(&FatFs, "", 0);												
    332c:	8c e7       	ldi	r24, 0x7C	; 124
    332e:	92 e0       	ldi	r25, 0x02	; 2
    3330:	6d e1       	ldi	r22, 0x1D	; 29
    3332:	71 e0       	ldi	r23, 0x01	; 1
    3334:	40 e0       	ldi	r20, 0x00	; 0
    3336:	0e 94 cf 13 	call	0x279e	; 0x279e <f_mount>
	if (f_open(&Fil, "GPS.txt", FA_WRITE | FA_OPEN_APPEND) == FR_OK) {	
    333a:	8b ea       	ldi	r24, 0xAB	; 171
    333c:	94 e0       	ldi	r25, 0x04	; 4
    333e:	6f e4       	ldi	r22, 0x4F	; 79
    3340:	71 e0       	ldi	r23, 0x01	; 1
    3342:	42 e3       	ldi	r20, 0x32	; 50
    3344:	0e 94 18 10 	call	0x2030	; 0x2030 <f_open>
    3348:	88 23       	and	r24, r24
    334a:	c9 f4       	brne	.+50     	; 0x337e <saveBufforToMmc+0x62>
		f_write(&Fil, GPSBuffor, GPS_BUFFOR_SIZE, &bw1);							    
    334c:	0b ea       	ldi	r16, 0xAB	; 171
    334e:	14 e0       	ldi	r17, 0x04	; 4
    3350:	c8 01       	movw	r24, r16
    3352:	67 e6       	ldi	r22, 0x67	; 103
    3354:	71 e0       	ldi	r23, 0x01	; 1
    3356:	40 e5       	ldi	r20, 0x50	; 80
    3358:	50 e0       	ldi	r21, 0x00	; 0
    335a:	9e 01       	movw	r18, r28
    335c:	2f 5f       	subi	r18, 0xFF	; 255
    335e:	3f 4f       	sbci	r19, 0xFF	; 255
    3360:	0e 94 30 0a 	call	0x1460	; 0x1460 <f_write>
		f_write(&Fil, "\r\n", 2, &bw2);									
    3364:	c8 01       	movw	r24, r16
    3366:	67 e5       	ldi	r22, 0x57	; 87
    3368:	71 e0       	ldi	r23, 0x01	; 1
    336a:	42 e0       	ldi	r20, 0x02	; 2
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	9e 01       	movw	r18, r28
    3370:	2d 5f       	subi	r18, 0xFD	; 253
    3372:	3f 4f       	sbci	r19, 0xFF	; 255
    3374:	0e 94 30 0a 	call	0x1460	; 0x1460 <f_write>
		f_close(&Fil);													
    3378:	c8 01       	movw	r24, r16
    337a:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <f_close>
		if (bw1 == 80) {											    

		}
	}
}
    337e:	0f 90       	pop	r0
    3380:	0f 90       	pop	r0
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	cf 91       	pop	r28
    3388:	df 91       	pop	r29
    338a:	1f 91       	pop	r17
    338c:	0f 91       	pop	r16
    338e:	08 95       	ret

00003390 <main>:
int main(void)
{
		
	int flag = 0;

	USART_Init();
    3390:	0e 94 f4 16 	call	0x2de8	; 0x2de8 <USART_Init>
    lcd_init(LCD_DISP_ON);   
    3394:	8f ea       	ldi	r24, 0xAF	; 175
    3396:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <lcd_init>
	
	lcd_clrscr();
    339a:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <lcd_clrscr>
	lcd_gotoxy(5,2);
    339e:	85 e0       	ldi	r24, 0x05	; 5
    33a0:	62 e0       	ldi	r22, 0x02	; 2
    33a2:	0e 94 b6 14 	call	0x296c	; 0x296c <lcd_gotoxy>
	lcd_puts("Starting...");	
    33a6:	8a e5       	ldi	r24, 0x5A	; 90
    33a8:	91 e0       	ldi	r25, 0x01	; 1
    33aa:	0e 94 80 16 	call	0x2d00	; 0x2d00 <lcd_puts>
			
	while(1) 
	{
		flag = getNmea();  	
    33ae:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <getNmea>
		
		if(flag == 1) {
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	21 f4       	brne	.+8      	; 0x33be <main+0x2e>
			saveBufforToMmc();			
    33b6:	0e 94 8e 19 	call	0x331c	; 0x331c <saveBufforToMmc>
			parseBuffor();
    33ba:	0e 94 06 19 	call	0x320c	; 0x320c <parseBuffor>
		}
		clearBuffor();	
    33be:	0e 94 08 17 	call	0x2e10	; 0x2e10 <clearBuffor>
    33c2:	f5 cf       	rjmp	.-22     	; 0x33ae <main+0x1e>

000033c4 <dly_us>:
#define CS_L()		PORTB &= 0xF7	/* Set MMC CS "low" */


static
void dly_us (UINT n)	/* Delay n microseconds (avr-gcc -Os) */
{
    33c4:	9c 01       	movw	r18, r24
	do {
		PINB;
    33c6:	e3 e2       	ldi	r30, 0x23	; 35
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	80 81       	ld	r24, Z
#if F_CPU >= 6000000
		PINB;
    33cc:	80 81       	ld	r24, Z
#endif
#if F_CPU >= 7000000
		PINB;
    33ce:	80 81       	ld	r24, Z
#endif
#if F_CPU >= 8000000
		PINB;
    33d0:	80 81       	ld	r24, Z
		PINB; PINB;
#endif
#if F_CPU >= 14000000
#error Too fast clock
#endif
	} while (--n);
    33d2:	21 50       	subi	r18, 0x01	; 1
    33d4:	30 40       	sbci	r19, 0x00	; 0
    33d6:	c9 f7       	brne	.-14     	; 0x33ca <dly_us+0x6>
}
    33d8:	08 95       	ret

000033da <xmit_mmc>:
static
void xmit_mmc (
	const BYTE* buff,	/* Data to be sent */
	UINT bc				/* Number of bytes to send */
)
{
    33da:	dc 01       	movw	r26, r24
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    33dc:	e5 e2       	ldi	r30, 0x25	; 37
    33de:	f0 e0       	ldi	r31, 0x00	; 0
{
	BYTE d;


	do {
		d = *buff++;	/* Get a byte to be sent */
    33e0:	9d 91       	ld	r25, X+
		if (d & 0x80) DI_H(); else DI_L();	/* bit7 */
    33e2:	99 23       	and	r25, r25
    33e4:	24 f4       	brge	.+8      	; 0x33ee <xmit_mmc+0x14>
    33e6:	80 81       	ld	r24, Z
    33e8:	82 60       	ori	r24, 0x02	; 2
    33ea:	80 83       	st	Z, r24
    33ec:	03 c0       	rjmp	.+6      	; 0x33f4 <xmit_mmc+0x1a>
    33ee:	80 81       	ld	r24, Z
    33f0:	8d 7f       	andi	r24, 0xFD	; 253
    33f2:	80 83       	st	Z, r24
		CK_H(); CK_L();
    33f4:	80 81       	ld	r24, Z
    33f6:	84 60       	ori	r24, 0x04	; 4
    33f8:	80 83       	st	Z, r24
    33fa:	80 81       	ld	r24, Z
    33fc:	8b 7f       	andi	r24, 0xFB	; 251
    33fe:	80 83       	st	Z, r24
		if (d & 0x40) DI_H(); else DI_L();	/* bit6 */
    3400:	96 ff       	sbrs	r25, 6
    3402:	04 c0       	rjmp	.+8      	; 0x340c <xmit_mmc+0x32>
    3404:	80 81       	ld	r24, Z
    3406:	82 60       	ori	r24, 0x02	; 2
    3408:	80 83       	st	Z, r24
    340a:	03 c0       	rjmp	.+6      	; 0x3412 <xmit_mmc+0x38>
    340c:	80 81       	ld	r24, Z
    340e:	8d 7f       	andi	r24, 0xFD	; 253
    3410:	80 83       	st	Z, r24
		CK_H(); CK_L();
    3412:	80 81       	ld	r24, Z
    3414:	84 60       	ori	r24, 0x04	; 4
    3416:	80 83       	st	Z, r24
    3418:	80 81       	ld	r24, Z
    341a:	8b 7f       	andi	r24, 0xFB	; 251
    341c:	80 83       	st	Z, r24
		if (d & 0x20) DI_H(); else DI_L();	/* bit5 */
    341e:	95 ff       	sbrs	r25, 5
    3420:	04 c0       	rjmp	.+8      	; 0x342a <xmit_mmc+0x50>
    3422:	80 81       	ld	r24, Z
    3424:	82 60       	ori	r24, 0x02	; 2
    3426:	80 83       	st	Z, r24
    3428:	03 c0       	rjmp	.+6      	; 0x3430 <xmit_mmc+0x56>
    342a:	80 81       	ld	r24, Z
    342c:	8d 7f       	andi	r24, 0xFD	; 253
    342e:	80 83       	st	Z, r24
		CK_H(); CK_L();
    3430:	80 81       	ld	r24, Z
    3432:	84 60       	ori	r24, 0x04	; 4
    3434:	80 83       	st	Z, r24
    3436:	80 81       	ld	r24, Z
    3438:	8b 7f       	andi	r24, 0xFB	; 251
    343a:	80 83       	st	Z, r24
		if (d & 0x10) DI_H(); else DI_L();	/* bit4 */
    343c:	94 ff       	sbrs	r25, 4
    343e:	04 c0       	rjmp	.+8      	; 0x3448 <xmit_mmc+0x6e>
    3440:	80 81       	ld	r24, Z
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	80 83       	st	Z, r24
    3446:	03 c0       	rjmp	.+6      	; 0x344e <xmit_mmc+0x74>
    3448:	80 81       	ld	r24, Z
    344a:	8d 7f       	andi	r24, 0xFD	; 253
    344c:	80 83       	st	Z, r24
		CK_H(); CK_L();
    344e:	80 81       	ld	r24, Z
    3450:	84 60       	ori	r24, 0x04	; 4
    3452:	80 83       	st	Z, r24
    3454:	80 81       	ld	r24, Z
    3456:	8b 7f       	andi	r24, 0xFB	; 251
    3458:	80 83       	st	Z, r24
		if (d & 0x08) DI_H(); else DI_L();	/* bit3 */
    345a:	93 ff       	sbrs	r25, 3
    345c:	04 c0       	rjmp	.+8      	; 0x3466 <xmit_mmc+0x8c>
    345e:	80 81       	ld	r24, Z
    3460:	82 60       	ori	r24, 0x02	; 2
    3462:	80 83       	st	Z, r24
    3464:	03 c0       	rjmp	.+6      	; 0x346c <xmit_mmc+0x92>
    3466:	80 81       	ld	r24, Z
    3468:	8d 7f       	andi	r24, 0xFD	; 253
    346a:	80 83       	st	Z, r24
		CK_H(); CK_L();
    346c:	80 81       	ld	r24, Z
    346e:	84 60       	ori	r24, 0x04	; 4
    3470:	80 83       	st	Z, r24
    3472:	80 81       	ld	r24, Z
    3474:	8b 7f       	andi	r24, 0xFB	; 251
    3476:	80 83       	st	Z, r24
		if (d & 0x04) DI_H(); else DI_L();	/* bit2 */
    3478:	92 ff       	sbrs	r25, 2
    347a:	04 c0       	rjmp	.+8      	; 0x3484 <xmit_mmc+0xaa>
    347c:	80 81       	ld	r24, Z
    347e:	82 60       	ori	r24, 0x02	; 2
    3480:	80 83       	st	Z, r24
    3482:	03 c0       	rjmp	.+6      	; 0x348a <xmit_mmc+0xb0>
    3484:	80 81       	ld	r24, Z
    3486:	8d 7f       	andi	r24, 0xFD	; 253
    3488:	80 83       	st	Z, r24
		CK_H(); CK_L();
    348a:	80 81       	ld	r24, Z
    348c:	84 60       	ori	r24, 0x04	; 4
    348e:	80 83       	st	Z, r24
    3490:	80 81       	ld	r24, Z
    3492:	8b 7f       	andi	r24, 0xFB	; 251
    3494:	80 83       	st	Z, r24
		if (d & 0x02) DI_H(); else DI_L();	/* bit1 */
    3496:	91 ff       	sbrs	r25, 1
    3498:	04 c0       	rjmp	.+8      	; 0x34a2 <xmit_mmc+0xc8>
    349a:	80 81       	ld	r24, Z
    349c:	82 60       	ori	r24, 0x02	; 2
    349e:	80 83       	st	Z, r24
    34a0:	03 c0       	rjmp	.+6      	; 0x34a8 <xmit_mmc+0xce>
    34a2:	80 81       	ld	r24, Z
    34a4:	8d 7f       	andi	r24, 0xFD	; 253
    34a6:	80 83       	st	Z, r24
		CK_H(); CK_L();
    34a8:	80 81       	ld	r24, Z
    34aa:	84 60       	ori	r24, 0x04	; 4
    34ac:	80 83       	st	Z, r24
    34ae:	80 81       	ld	r24, Z
    34b0:	8b 7f       	andi	r24, 0xFB	; 251
    34b2:	80 83       	st	Z, r24
		if (d & 0x01) DI_H(); else DI_L();	/* bit0 */
    34b4:	90 ff       	sbrs	r25, 0
    34b6:	04 c0       	rjmp	.+8      	; 0x34c0 <xmit_mmc+0xe6>
    34b8:	80 81       	ld	r24, Z
    34ba:	82 60       	ori	r24, 0x02	; 2
    34bc:	80 83       	st	Z, r24
    34be:	03 c0       	rjmp	.+6      	; 0x34c6 <xmit_mmc+0xec>
    34c0:	80 81       	ld	r24, Z
    34c2:	8d 7f       	andi	r24, 0xFD	; 253
    34c4:	80 83       	st	Z, r24
		CK_H(); CK_L();
    34c6:	80 81       	ld	r24, Z
    34c8:	84 60       	ori	r24, 0x04	; 4
    34ca:	80 83       	st	Z, r24
    34cc:	80 81       	ld	r24, Z
    34ce:	8b 7f       	andi	r24, 0xFB	; 251
    34d0:	80 83       	st	Z, r24
	} while (--bc);
    34d2:	61 50       	subi	r22, 0x01	; 1
    34d4:	70 40       	sbci	r23, 0x00	; 0
    34d6:	09 f0       	breq	.+2      	; 0x34da <xmit_mmc+0x100>
    34d8:	83 cf       	rjmp	.-250    	; 0x33e0 <xmit_mmc+0x6>
}
    34da:	08 95       	ret

000034dc <rcvr_mmc>:
static
void rcvr_mmc (
	BYTE *buff,	/* Pointer to read buffer */
	UINT bc		/* Number of bytes to receive */
)
{
    34dc:	cf 93       	push	r28
    34de:	df 93       	push	r29
    34e0:	ec 01       	movw	r28, r24
	BYTE r;


	DI_H();	/* Send 0xFF */
    34e2:	e5 e2       	ldi	r30, 0x25	; 37
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	80 81       	ld	r24, Z
    34e8:	82 60       	ori	r24, 0x02	; 2
    34ea:	80 83       	st	Z, r24

	do {
		r = 0;	 if (DO) r++;	/* bit7 */
    34ec:	a3 e2       	ldi	r26, 0x23	; 35
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	9c 91       	ld	r25, X
    34f2:	91 70       	andi	r25, 0x01	; 1
		CK_H(); CK_L();
    34f4:	80 81       	ld	r24, Z
    34f6:	84 60       	ori	r24, 0x04	; 4
    34f8:	80 83       	st	Z, r24
    34fa:	80 81       	ld	r24, Z
    34fc:	8b 7f       	andi	r24, 0xFB	; 251
    34fe:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit6 */
    3500:	99 0f       	add	r25, r25
    3502:	8c 91       	ld	r24, X
    3504:	80 fd       	sbrc	r24, 0
    3506:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3508:	80 81       	ld	r24, Z
    350a:	84 60       	ori	r24, 0x04	; 4
    350c:	80 83       	st	Z, r24
    350e:	80 81       	ld	r24, Z
    3510:	8b 7f       	andi	r24, 0xFB	; 251
    3512:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit5 */
    3514:	99 0f       	add	r25, r25
    3516:	8c 91       	ld	r24, X
    3518:	80 fd       	sbrc	r24, 0
    351a:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    351c:	80 81       	ld	r24, Z
    351e:	84 60       	ori	r24, 0x04	; 4
    3520:	80 83       	st	Z, r24
    3522:	80 81       	ld	r24, Z
    3524:	8b 7f       	andi	r24, 0xFB	; 251
    3526:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit4 */
    3528:	99 0f       	add	r25, r25
    352a:	8c 91       	ld	r24, X
    352c:	80 fd       	sbrc	r24, 0
    352e:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3530:	80 81       	ld	r24, Z
    3532:	84 60       	ori	r24, 0x04	; 4
    3534:	80 83       	st	Z, r24
    3536:	80 81       	ld	r24, Z
    3538:	8b 7f       	andi	r24, 0xFB	; 251
    353a:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit3 */
    353c:	99 0f       	add	r25, r25
    353e:	8c 91       	ld	r24, X
    3540:	80 fd       	sbrc	r24, 0
    3542:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3544:	80 81       	ld	r24, Z
    3546:	84 60       	ori	r24, 0x04	; 4
    3548:	80 83       	st	Z, r24
    354a:	80 81       	ld	r24, Z
    354c:	8b 7f       	andi	r24, 0xFB	; 251
    354e:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit2 */
    3550:	99 0f       	add	r25, r25
    3552:	8c 91       	ld	r24, X
    3554:	80 fd       	sbrc	r24, 0
    3556:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3558:	80 81       	ld	r24, Z
    355a:	84 60       	ori	r24, 0x04	; 4
    355c:	80 83       	st	Z, r24
    355e:	80 81       	ld	r24, Z
    3560:	8b 7f       	andi	r24, 0xFB	; 251
    3562:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit1 */
    3564:	99 0f       	add	r25, r25
    3566:	8c 91       	ld	r24, X
    3568:	80 fd       	sbrc	r24, 0
    356a:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    356c:	80 81       	ld	r24, Z
    356e:	84 60       	ori	r24, 0x04	; 4
    3570:	80 83       	st	Z, r24
    3572:	80 81       	ld	r24, Z
    3574:	8b 7f       	andi	r24, 0xFB	; 251
    3576:	80 83       	st	Z, r24
		r <<= 1; if (DO) r++;	/* bit0 */
    3578:	99 0f       	add	r25, r25
    357a:	8c 91       	ld	r24, X
    357c:	80 fd       	sbrc	r24, 0
    357e:	9f 5f       	subi	r25, 0xFF	; 255
		CK_H(); CK_L();
    3580:	80 81       	ld	r24, Z
    3582:	84 60       	ori	r24, 0x04	; 4
    3584:	80 83       	st	Z, r24
    3586:	80 81       	ld	r24, Z
    3588:	8b 7f       	andi	r24, 0xFB	; 251
    358a:	80 83       	st	Z, r24
		*buff++ = r;			/* Store a received byte */
    358c:	98 83       	st	Y, r25
	} while (--bc);
    358e:	61 50       	subi	r22, 0x01	; 1
    3590:	70 40       	sbci	r23, 0x00	; 0
    3592:	11 f0       	breq	.+4      	; 0x3598 <rcvr_mmc+0xbc>
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit1 */
		CK_H(); CK_L();
		r <<= 1; if (DO) r++;	/* bit0 */
		CK_H(); CK_L();
		*buff++ = r;			/* Store a received byte */
    3594:	21 96       	adiw	r28, 0x01	; 1
    3596:	ac cf       	rjmp	.-168    	; 0x34f0 <rcvr_mmc+0x14>
	} while (--bc);
}
    3598:	df 91       	pop	r29
    359a:	cf 91       	pop	r28
    359c:	08 95       	ret

0000359e <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
int wait_ready (void)	/* 1:OK, 0:Timeout */
{
    359e:	ef 92       	push	r14
    35a0:	ff 92       	push	r15
    35a2:	0f 93       	push	r16
    35a4:	1f 93       	push	r17
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	0f 92       	push	r0
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	08 e8       	ldi	r16, 0x88	; 136
    35b2:	13 e1       	ldi	r17, 0x13	; 19
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
		rcvr_mmc(&d, 1);
    35b4:	7e 01       	movw	r14, r28
    35b6:	08 94       	sec
    35b8:	e1 1c       	adc	r14, r1
    35ba:	f1 1c       	adc	r15, r1
    35bc:	c7 01       	movw	r24, r14
    35be:	61 e0       	ldi	r22, 0x01	; 1
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
		if (d == 0xFF) break;
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	8f 3f       	cpi	r24, 0xFF	; 255
    35ca:	39 f0       	breq	.+14     	; 0x35da <wait_ready+0x3c>
		dly_us(100);
    35cc:	84 e6       	ldi	r24, 0x64	; 100
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <dly_us>
{
	BYTE d;
	UINT tmr;


	for (tmr = 5000; tmr; tmr--) {	/* Wait for ready in timeout of 500ms */
    35d4:	01 50       	subi	r16, 0x01	; 1
    35d6:	10 40       	sbci	r17, 0x00	; 0
    35d8:	89 f7       	brne	.-30     	; 0x35bc <wait_ready+0x1e>
    35da:	98 01       	movw	r18, r16
    35dc:	01 15       	cp	r16, r1
    35de:	11 05       	cpc	r17, r1
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <wait_ready+0x48>
    35e2:	21 e0       	ldi	r18, 0x01	; 1
    35e4:	30 e0       	ldi	r19, 0x00	; 0
		if (d == 0xFF) break;
		dly_us(100);
	}

	return tmr ? 1 : 0;
}
    35e6:	82 2f       	mov	r24, r18
    35e8:	93 2f       	mov	r25, r19
    35ea:	0f 90       	pop	r0
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	1f 91       	pop	r17
    35f2:	0f 91       	pop	r16
    35f4:	ff 90       	pop	r15
    35f6:	ef 90       	pop	r14
    35f8:	08 95       	ret

000035fa <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	0f 92       	push	r0
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_H();				/* Set CS# high */
    3604:	e5 e2       	ldi	r30, 0x25	; 37
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	88 60       	ori	r24, 0x08	; 8
    360c:	80 83       	st	Z, r24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
    360e:	ce 01       	movw	r24, r28
    3610:	01 96       	adiw	r24, 0x01	; 1
    3612:	61 e0       	ldi	r22, 0x01	; 1
    3614:	70 e0       	ldi	r23, 0x00	; 0
    3616:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
}
    361a:	0f 90       	pop	r0
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <select>:
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:OK, 0:Timeout */
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
	BYTE d;

	CS_L();				/* Set CS# low */
    362c:	e5 e2       	ldi	r30, 0x25	; 37
    362e:	f0 e0       	ldi	r31, 0x00	; 0
    3630:	80 81       	ld	r24, Z
    3632:	87 7f       	andi	r24, 0xF7	; 247
    3634:	80 83       	st	Z, r24
	rcvr_mmc(&d, 1);	/* Dummy clock (force DO enabled) */
    3636:	ce 01       	movw	r24, r28
    3638:	01 96       	adiw	r24, 0x01	; 1
    363a:	61 e0       	ldi	r22, 0x01	; 1
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
	if (wait_ready()) return 1;	/* Wait for card ready */
    3642:	0e 94 cf 1a 	call	0x359e	; 0x359e <wait_ready>
    3646:	89 2b       	or	r24, r25
    3648:	19 f0       	breq	.+6      	; 0x3650 <select+0x2e>
    364a:	21 e0       	ldi	r18, 0x01	; 1
    364c:	30 e0       	ldi	r19, 0x00	; 0
    364e:	04 c0       	rjmp	.+8      	; 0x3658 <select+0x36>

	deselect();
    3650:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
	return 0;			/* Failed */
}
    3658:	82 2f       	mov	r24, r18
    365a:	93 2f       	mov	r25, r19
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Failed */
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count */
)
{
    3664:	af 92       	push	r10
    3666:	bf 92       	push	r11
    3668:	cf 92       	push	r12
    366a:	df 92       	push	r13
    366c:	ef 92       	push	r14
    366e:	ff 92       	push	r15
    3670:	0f 93       	push	r16
    3672:	1f 93       	push	r17
    3674:	df 93       	push	r29
    3676:	cf 93       	push	r28
    3678:	00 d0       	rcall	.+0      	; 0x367a <rcvr_datablock+0x16>
    367a:	cd b7       	in	r28, 0x3d	; 61
    367c:	de b7       	in	r29, 0x3e	; 62
    367e:	6c 01       	movw	r12, r24
    3680:	5b 01       	movw	r10, r22
    3682:	08 ee       	ldi	r16, 0xE8	; 232
    3684:	13 e0       	ldi	r17, 0x03	; 3
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
		rcvr_mmc(d, 1);
    3686:	7e 01       	movw	r14, r28
    3688:	08 94       	sec
    368a:	e1 1c       	adc	r14, r1
    368c:	f1 1c       	adc	r15, r1
    368e:	c7 01       	movw	r24, r14
    3690:	61 e0       	ldi	r22, 0x01	; 1
    3692:	70 e0       	ldi	r23, 0x00	; 0
    3694:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
		if (d[0] != 0xFF) break;
    3698:	89 81       	ldd	r24, Y+1	; 0x01
    369a:	8f 3f       	cpi	r24, 0xFF	; 255
    369c:	39 f4       	brne	.+14     	; 0x36ac <rcvr_datablock+0x48>
		dly_us(100);
    369e:	84 e6       	ldi	r24, 0x64	; 100
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <dly_us>
{
	BYTE d[2];
	UINT tmr;


	for (tmr = 1000; tmr; tmr--) {	/* Wait for data packet in timeout of 100ms */
    36a6:	01 50       	subi	r16, 0x01	; 1
    36a8:	10 40       	sbci	r17, 0x00	; 0
    36aa:	89 f7       	brne	.-30     	; 0x368e <rcvr_datablock+0x2a>
		rcvr_mmc(d, 1);
		if (d[0] != 0xFF) break;
		dly_us(100);
	}
	if (d[0] != 0xFE) return 0;		/* If not valid data token, return with error */
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	8e 3f       	cpi	r24, 0xFE	; 254
    36b0:	19 f0       	breq	.+6      	; 0x36b8 <rcvr_datablock+0x54>
    36b2:	20 e0       	ldi	r18, 0x00	; 0
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	0c c0       	rjmp	.+24     	; 0x36d0 <rcvr_datablock+0x6c>

	rcvr_mmc(buff, btr);			/* Receive the data block into buffer */
    36b8:	c6 01       	movw	r24, r12
    36ba:	b5 01       	movw	r22, r10
    36bc:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
	rcvr_mmc(d, 2);					/* Discard CRC */
    36c0:	ce 01       	movw	r24, r28
    36c2:	01 96       	adiw	r24, 0x01	; 1
    36c4:	62 e0       	ldi	r22, 0x02	; 2
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
    36cc:	21 e0       	ldi	r18, 0x01	; 1
    36ce:	30 e0       	ldi	r19, 0x00	; 0

	return 1;						/* Return with success */
}
    36d0:	82 2f       	mov	r24, r18
    36d2:	93 2f       	mov	r25, r19
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	ff 90       	pop	r15
    36e2:	ef 90       	pop	r14
    36e4:	df 90       	pop	r13
    36e6:	cf 90       	pop	r12
    36e8:	bf 90       	pop	r11
    36ea:	af 90       	pop	r10
    36ec:	08 95       	ret

000036ee <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    36ee:	ff 92       	push	r15
    36f0:	0f 93       	push	r16
    36f2:	1f 93       	push	r17
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	00 d0       	rcall	.+0      	; 0x36fa <xmit_datablock+0xc>
    36fa:	cd b7       	in	r28, 0x3d	; 61
    36fc:	de b7       	in	r29, 0x3e	; 62
    36fe:	8c 01       	movw	r16, r24
    3700:	f6 2e       	mov	r15, r22
	BYTE d[2];


	if (!wait_ready()) return 0;
    3702:	0e 94 cf 1a 	call	0x359e	; 0x359e <wait_ready>
    3706:	89 2b       	or	r24, r25
    3708:	19 f4       	brne	.+6      	; 0x3710 <xmit_datablock+0x22>
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	30 e0       	ldi	r19, 0x00	; 0
    370e:	29 c0       	rjmp	.+82     	; 0x3762 <xmit_datablock+0x74>

	d[0] = token;
    3710:	f9 82       	std	Y+1, r15	; 0x01
	xmit_mmc(d, 1);				/* Xmit a token */
    3712:	ce 01       	movw	r24, r28
    3714:	01 96       	adiw	r24, 0x01	; 1
    3716:	61 e0       	ldi	r22, 0x01	; 1
    3718:	70 e0       	ldi	r23, 0x00	; 0
    371a:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>
	if (token != 0xFD) {		/* Is it data token? */
    371e:	8d ef       	ldi	r24, 0xFD	; 253
    3720:	f8 16       	cp	r15, r24
    3722:	19 f4       	brne	.+6      	; 0x372a <xmit_datablock+0x3c>
    3724:	21 e0       	ldi	r18, 0x01	; 1
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	1c c0       	rjmp	.+56     	; 0x3762 <xmit_datablock+0x74>
		xmit_mmc(buff, 512);	/* Xmit the 512 byte data block to MMC */
    372a:	c8 01       	movw	r24, r16
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	72 e0       	ldi	r23, 0x02	; 2
    3730:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>
		rcvr_mmc(d, 2);			/* Xmit dummy CRC (0xFF,0xFF) */
    3734:	8e 01       	movw	r16, r28
    3736:	0f 5f       	subi	r16, 0xFF	; 255
    3738:	1f 4f       	sbci	r17, 0xFF	; 255
    373a:	c8 01       	movw	r24, r16
    373c:	62 e0       	ldi	r22, 0x02	; 2
    373e:	70 e0       	ldi	r23, 0x00	; 0
    3740:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
		rcvr_mmc(d, 1);			/* Receive data response */
    3744:	c8 01       	movw	r24, r16
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	70 e0       	ldi	r23, 0x00	; 0
    374a:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
    374e:	90 e0       	ldi	r25, 0x00	; 0
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	8f 71       	andi	r24, 0x1F	; 31
    3754:	85 30       	cpi	r24, 0x05	; 5
    3756:	09 f0       	breq	.+2      	; 0x375a <xmit_datablock+0x6c>
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	89 27       	eor	r24, r25
    375e:	28 2f       	mov	r18, r24
    3760:	30 e0       	ldi	r19, 0x00	; 0
		if ((d[0] & 0x1F) != 0x05)	/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    3762:	82 2f       	mov	r24, r18
    3764:	93 2f       	mov	r25, r19
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	cf 91       	pop	r28
    376c:	df 91       	pop	r29
    376e:	1f 91       	pop	r17
    3770:	0f 91       	pop	r16
    3772:	ff 90       	pop	r15
    3774:	08 95       	ret

00003776 <send_cmd>:
static
BYTE send_cmd (		/* Returns command response (bit7==1:Send failed)*/
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    3776:	df 92       	push	r13
    3778:	ef 92       	push	r14
    377a:	ff 92       	push	r15
    377c:	0f 93       	push	r16
    377e:	1f 93       	push	r17
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
    3788:	27 97       	sbiw	r28, 0x07	; 7
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	cd bf       	out	0x3d, r28	; 61
    3794:	d8 2e       	mov	r13, r24
    3796:	7a 01       	movw	r14, r20
    3798:	8b 01       	movw	r16, r22
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    379a:	88 23       	and	r24, r24
    379c:	64 f4       	brge	.+24     	; 0x37b6 <send_cmd+0x40>
		cmd &= 0x7F;
		n = send_cmd(CMD55, 0);
    379e:	87 e3       	ldi	r24, 0x37	; 55
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	50 e0       	ldi	r21, 0x00	; 0
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
		if (n > 1) return n;
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	08 f0       	brcs	.+2      	; 0x37b2 <send_cmd+0x3c>
    37b0:	3e c0       	rjmp	.+124    	; 0x382e <send_cmd+0xb8>
{
	BYTE n, d, buf[6];


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    37b2:	8f e7       	ldi	r24, 0x7F	; 127
    37b4:	d8 22       	and	r13, r24
		n = send_cmd(CMD55, 0);
		if (n > 1) return n;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    37b6:	8c e0       	ldi	r24, 0x0C	; 12
    37b8:	d8 16       	cp	r13, r24
    37ba:	09 f4       	brne	.+2      	; 0x37be <send_cmd+0x48>
    37bc:	46 c0       	rjmp	.+140    	; 0x384a <send_cmd+0xd4>
		deselect();
    37be:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>
		if (!select()) return 0xFF;
    37c2:	0e 94 11 1b 	call	0x3622	; 0x3622 <select>
    37c6:	89 2b       	or	r24, r25
    37c8:	11 f4       	brne	.+4      	; 0x37ce <send_cmd+0x58>
    37ca:	8f ef       	ldi	r24, 0xFF	; 255
    37cc:	30 c0       	rjmp	.+96     	; 0x382e <send_cmd+0xb8>
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    37ce:	8d 2d       	mov	r24, r13
    37d0:	80 64       	ori	r24, 0x40	; 64
    37d2:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    37d4:	81 2f       	mov	r24, r17
    37d6:	99 27       	eor	r25, r25
    37d8:	aa 27       	eor	r26, r26
    37da:	bb 27       	eor	r27, r27
    37dc:	8b 83       	std	Y+3, r24	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    37de:	c8 01       	movw	r24, r16
    37e0:	aa 27       	eor	r26, r26
    37e2:	bb 27       	eor	r27, r27
    37e4:	8c 83       	std	Y+4, r24	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    37e6:	bb 27       	eor	r27, r27
    37e8:	a1 2f       	mov	r26, r17
    37ea:	90 2f       	mov	r25, r16
    37ec:	8f 2d       	mov	r24, r15
    37ee:	8d 83       	std	Y+5, r24	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    37f0:	ee 82       	std	Y+6, r14	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
    37f2:	dd 20       	and	r13, r13
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <send_cmd+0x82>
    37f6:	52 c0       	rjmp	.+164    	; 0x389c <send_cmd+0x126>
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
    37f8:	88 e0       	ldi	r24, 0x08	; 8
    37fa:	d8 16       	cp	r13, r24
    37fc:	09 f4       	brne	.+2      	; 0x3800 <send_cmd+0x8a>
    37fe:	45 c0       	rjmp	.+138    	; 0x388a <send_cmd+0x114>
	buf[5] = n;
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3804:	ce 01       	movw	r24, r28
    3806:	02 96       	adiw	r24, 0x02	; 2
    3808:	66 e0       	ldi	r22, 0x06	; 6
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>
    3810:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		rcvr_mmc(&d, 1);
    3812:	7e 01       	movw	r14, r28
    3814:	08 94       	sec
    3816:	e1 1c       	adc	r14, r1
    3818:	f1 1c       	adc	r15, r1
    381a:	c7 01       	movw	r24, r14
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	70 e0       	ldi	r23, 0x00	; 0
    3820:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
	while ((d & 0x80) && --n);
    3824:	89 81       	ldd	r24, Y+1	; 0x01
    3826:	88 23       	and	r24, r24
    3828:	14 f4       	brge	.+4      	; 0x382e <send_cmd+0xb8>
    382a:	11 50       	subi	r17, 0x01	; 1
    382c:	b1 f7       	brne	.-20     	; 0x381a <send_cmd+0xa4>

	return d;			/* Return with the response value */
}
    382e:	27 96       	adiw	r28, 0x07	; 7
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	cf 91       	pop	r28
    383c:	df 91       	pop	r29
    383e:	1f 91       	pop	r17
    3840:	0f 91       	pop	r16
    3842:	ff 90       	pop	r15
    3844:	ef 90       	pop	r14
    3846:	df 90       	pop	r13
    3848:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send a command packet */
	buf[0] = 0x40 | cmd;			/* Start + Command index */
    384a:	8c e4       	ldi	r24, 0x4C	; 76
    384c:	8a 83       	std	Y+2, r24	; 0x02
	buf[1] = (BYTE)(arg >> 24);		/* Argument[31..24] */
    384e:	81 2f       	mov	r24, r17
    3850:	99 27       	eor	r25, r25
    3852:	aa 27       	eor	r26, r26
    3854:	bb 27       	eor	r27, r27
    3856:	8b 83       	std	Y+3, r24	; 0x03
	buf[2] = (BYTE)(arg >> 16);		/* Argument[23..16] */
    3858:	c8 01       	movw	r24, r16
    385a:	aa 27       	eor	r26, r26
    385c:	bb 27       	eor	r27, r27
    385e:	8c 83       	std	Y+4, r24	; 0x04
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
    3860:	bb 27       	eor	r27, r27
    3862:	a1 2f       	mov	r26, r17
    3864:	90 2f       	mov	r25, r16
    3866:	8f 2d       	mov	r24, r15
    3868:	8d 83       	std	Y+5, r24	; 0x05
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
    386a:	ee 82       	std	Y+6, r14	; 0x06
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    3870:	ce 01       	movw	r24, r28
    3872:	02 96       	adiw	r24, 0x02	; 2
    3874:	66 e0       	ldi	r22, 0x06	; 6
    3876:	70 e0       	ldi	r23, 0x00	; 0
    3878:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>

	/* Receive command response */
	if (cmd == CMD12) rcvr_mmc(&d, 1);	/* Skip a stuff byte when stop reading */
    387c:	ce 01       	movw	r24, r28
    387e:	01 96       	adiw	r24, 0x01	; 1
    3880:	61 e0       	ldi	r22, 0x01	; 1
    3882:	70 e0       	ldi	r23, 0x00	; 0
    3884:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
    3888:	c3 cf       	rjmp	.-122    	; 0x3810 <send_cmd+0x9a>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    388a:	87 e8       	ldi	r24, 0x87	; 135
    388c:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    388e:	ce 01       	movw	r24, r28
    3890:	02 96       	adiw	r24, 0x02	; 2
    3892:	66 e0       	ldi	r22, 0x06	; 6
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>
    389a:	ba cf       	rjmp	.-140    	; 0x3810 <send_cmd+0x9a>
	buf[3] = (BYTE)(arg >> 8);		/* Argument[15..8] */
	buf[4] = (BYTE)arg;				/* Argument[7..0] */
	n = 0x01;						/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;		/* (valid CRC for CMD0(0)) */
	if (cmd == CMD8) n = 0x87;		/* (valid CRC for CMD8(0x1AA)) */
	buf[5] = n;
    389c:	85 e9       	ldi	r24, 0x95	; 149
    389e:	8f 83       	std	Y+7, r24	; 0x07
	xmit_mmc(buf, 6);
    38a0:	ce 01       	movw	r24, r28
    38a2:	02 96       	adiw	r24, 0x02	; 2
    38a4:	66 e0       	ldi	r22, 0x06	; 6
    38a6:	70 e0       	ldi	r23, 0x00	; 0
    38a8:	0e 94 ed 19 	call	0x33da	; 0x33da <xmit_mmc>
    38ac:	b1 cf       	rjmp	.-158    	; 0x3810 <send_cmd+0x9a>

000038ae <disk_status>:

DSTATUS disk_status (
	BYTE drv			/* Drive number (always 0) */
)
{
	if (drv) return STA_NOINIT;
    38ae:	88 23       	and	r24, r24
    38b0:	11 f0       	breq	.+4      	; 0x38b6 <disk_status+0x8>
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	08 95       	ret

	return Stat;
    38b6:	80 91 e8 01 	lds	r24, 0x01E8
}
    38ba:	08 95       	ret

000038bc <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
    38bc:	ef 92       	push	r14
    38be:	ff 92       	push	r15
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	df 93       	push	r29
    38c6:	cf 93       	push	r28
    38c8:	00 d0       	rcall	.+0      	; 0x38ca <disk_initialize+0xe>
    38ca:	00 d0       	rcall	.+0      	; 0x38cc <disk_initialize+0x10>
    38cc:	cd b7       	in	r28, 0x3d	; 61
    38ce:	de b7       	in	r29, 0x3e	; 62
	BYTE n, ty, cmd, buf[4];
	UINT tmr;
	DSTATUS s;


	if (drv) return RES_NOTRDY;
    38d0:	88 23       	and	r24, r24
    38d2:	11 f0       	breq	.+4      	; 0x38d8 <disk_initialize+0x1c>
    38d4:	13 e0       	ldi	r17, 0x03	; 3
    38d6:	af c0       	rjmp	.+350    	; 0x3a36 <disk_initialize+0x17a>

	dly_us(10000);			/* 10ms */
    38d8:	80 e1       	ldi	r24, 0x10	; 16
    38da:	97 e2       	ldi	r25, 0x27	; 39
    38dc:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <dly_us>
	CS_INIT(); CS_H();		/* Initialize port pin tied to CS */
    38e0:	a4 e2       	ldi	r26, 0x24	; 36
    38e2:	b0 e0       	ldi	r27, 0x00	; 0
    38e4:	8c 91       	ld	r24, X
    38e6:	88 60       	ori	r24, 0x08	; 8
    38e8:	8c 93       	st	X, r24
    38ea:	e5 e2       	ldi	r30, 0x25	; 37
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	88 60       	ori	r24, 0x08	; 8
    38f2:	80 83       	st	Z, r24
	CK_INIT(); CK_L();		/* Initialize port pin tied to SCLK */
    38f4:	8c 91       	ld	r24, X
    38f6:	84 60       	ori	r24, 0x04	; 4
    38f8:	8c 93       	st	X, r24
    38fa:	80 81       	ld	r24, Z
    38fc:	8b 7f       	andi	r24, 0xFB	; 251
    38fe:	80 83       	st	Z, r24
	DI_INIT();				/* Initialize port pin tied to DI */
    3900:	8c 91       	ld	r24, X
    3902:	82 60       	ori	r24, 0x02	; 2
    3904:	8c 93       	st	X, r24
    3906:	1a e0       	ldi	r17, 0x0A	; 10
	DO_INIT();				/* Initialize port pin tied to DO */

	for (n = 10; n; n--) rcvr_mmc(buf, 1);	/* Apply 80 dummy clocks and the card gets ready to receive command */
    3908:	7e 01       	movw	r14, r28
    390a:	08 94       	sec
    390c:	e1 1c       	adc	r14, r1
    390e:	f1 1c       	adc	r15, r1
    3910:	c7 01       	movw	r24, r14
    3912:	61 e0       	ldi	r22, 0x01	; 1
    3914:	70 e0       	ldi	r23, 0x00	; 0
    3916:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
    391a:	11 50       	subi	r17, 0x01	; 1
    391c:	c9 f7       	brne	.-14     	; 0x3910 <disk_initialize+0x54>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    391e:	80 e0       	ldi	r24, 0x00	; 0
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	60 e0       	ldi	r22, 0x00	; 0
    3926:	70 e0       	ldi	r23, 0x00	; 0
    3928:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    392c:	81 30       	cpi	r24, 0x01	; 1
    392e:	09 f0       	breq	.+2      	; 0x3932 <disk_initialize+0x76>
    3930:	77 c0       	rjmp	.+238    	; 0x3a20 <disk_initialize+0x164>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
    3932:	88 e0       	ldi	r24, 0x08	; 8
    3934:	4a ea       	ldi	r20, 0xAA	; 170
    3936:	51 e0       	ldi	r21, 0x01	; 1
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	70 e0       	ldi	r23, 0x00	; 0
    393c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3940:	81 30       	cpi	r24, 0x01	; 1
    3942:	09 f0       	breq	.+2      	; 0x3946 <disk_initialize+0x8a>
    3944:	3d c0       	rjmp	.+122    	; 0x39c0 <disk_initialize+0x104>
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
    3946:	ce 01       	movw	r24, r28
    3948:	01 96       	adiw	r24, 0x01	; 1
    394a:	64 e0       	ldi	r22, 0x04	; 4
    394c:	70 e0       	ldi	r23, 0x00	; 0
    394e:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
    3952:	8b 81       	ldd	r24, Y+3	; 0x03
    3954:	81 30       	cpi	r24, 0x01	; 1
    3956:	09 f0       	breq	.+2      	; 0x395a <disk_initialize+0x9e>
    3958:	63 c0       	rjmp	.+198    	; 0x3a20 <disk_initialize+0x164>
    395a:	8c 81       	ldd	r24, Y+4	; 0x04
    395c:	8a 3a       	cpi	r24, 0xAA	; 170
    395e:	09 f0       	breq	.+2      	; 0x3962 <disk_initialize+0xa6>
    3960:	5f c0       	rjmp	.+190    	; 0x3a20 <disk_initialize+0x164>
    3962:	08 ee       	ldi	r16, 0xE8	; 232
    3964:	13 e0       	ldi	r17, 0x03	; 3
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3966:	89 ea       	ldi	r24, 0xA9	; 169
    3968:	40 e0       	ldi	r20, 0x00	; 0
    396a:	50 e0       	ldi	r21, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	70 e4       	ldi	r23, 0x40	; 64
    3970:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3974:	88 23       	and	r24, r24
    3976:	41 f0       	breq	.+16     	; 0x3988 <disk_initialize+0xcc>
					dly_us(1000);
    3978:	88 ee       	ldi	r24, 0xE8	; 232
    397a:	93 e0       	ldi	r25, 0x03	; 3
    397c:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <dly_us>
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
			rcvr_mmc(buf, 4);							/* Get trailing return value of R7 resp */
			if (buf[2] == 0x01 && buf[3] == 0xAA) {		/* The card can work at vdd range of 2.7-3.6V */
				for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state (ACMD41 with HCS bit) */
    3980:	01 50       	subi	r16, 0x01	; 1
    3982:	10 40       	sbci	r17, 0x00	; 0
    3984:	81 f7       	brne	.-32     	; 0x3966 <disk_initialize+0xaa>
    3986:	4c c0       	rjmp	.+152    	; 0x3a20 <disk_initialize+0x164>
					if (send_cmd(ACMD41, 1UL << 30) == 0) break;
					dly_us(1000);
				}
				if (tmr && send_cmd(CMD58, 0) == 0) {	/* Check CCS bit in the OCR */
    3988:	8a e3       	ldi	r24, 0x3A	; 58
    398a:	40 e0       	ldi	r20, 0x00	; 0
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	70 e0       	ldi	r23, 0x00	; 0
    3992:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3996:	88 23       	and	r24, r24
    3998:	09 f0       	breq	.+2      	; 0x399c <disk_initialize+0xe0>
    399a:	42 c0       	rjmp	.+132    	; 0x3a20 <disk_initialize+0x164>
					rcvr_mmc(buf, 4);
    399c:	ce 01       	movw	r24, r28
    399e:	01 96       	adiw	r24, 0x01	; 1
    39a0:	64 e0       	ldi	r22, 0x04	; 4
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	0e 94 6e 1a 	call	0x34dc	; 0x34dc <rcvr_mmc>
					ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    39a8:	89 81       	ldd	r24, Y+1	; 0x01
    39aa:	86 fd       	sbrc	r24, 6
    39ac:	04 c0       	rjmp	.+8      	; 0x39b6 <disk_initialize+0xfa>
    39ae:	ff 24       	eor	r15, r15
    39b0:	68 94       	set
    39b2:	f2 f8       	bld	r15, 2
    39b4:	36 c0       	rjmp	.+108    	; 0x3a22 <disk_initialize+0x166>
    39b6:	0f 2e       	mov	r0, r31
    39b8:	fc e0       	ldi	r31, 0x0C	; 12
    39ba:	ff 2e       	mov	r15, r31
    39bc:	f0 2d       	mov	r31, r0
    39be:	31 c0       	rjmp	.+98     	; 0x3a22 <disk_initialize+0x166>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    39c0:	89 ea       	ldi	r24, 0xA9	; 169
    39c2:	40 e0       	ldi	r20, 0x00	; 0
    39c4:	50 e0       	ldi	r21, 0x00	; 0
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    39ce:	82 30       	cpi	r24, 0x02	; 2
    39d0:	28 f0       	brcs	.+10     	; 0x39dc <disk_initialize+0x120>
    39d2:	ff 24       	eor	r15, r15
    39d4:	f3 94       	inc	r15
    39d6:	ee 24       	eor	r14, r14
    39d8:	e3 94       	inc	r14
    39da:	07 c0       	rjmp	.+14     	; 0x39ea <disk_initialize+0x12e>
    39dc:	ff 24       	eor	r15, r15
    39de:	68 94       	set
    39e0:	f1 f8       	bld	r15, 1
    39e2:	0f 2e       	mov	r0, r31
    39e4:	f9 ea       	ldi	r31, 0xA9	; 169
    39e6:	ef 2e       	mov	r14, r31
    39e8:	f0 2d       	mov	r31, r0
    39ea:	08 ee       	ldi	r16, 0xE8	; 232
    39ec:	13 e0       	ldi	r17, 0x03	; 3
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
				if (send_cmd(cmd, 0) == 0) break;
    39ee:	8e 2d       	mov	r24, r14
    39f0:	40 e0       	ldi	r20, 0x00	; 0
    39f2:	50 e0       	ldi	r21, 0x00	; 0
    39f4:	60 e0       	ldi	r22, 0x00	; 0
    39f6:	70 e0       	ldi	r23, 0x00	; 0
    39f8:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    39fc:	88 23       	and	r24, r24
    39fe:	41 f0       	breq	.+16     	; 0x3a10 <disk_initialize+0x154>
				dly_us(1000);
    3a00:	88 ee       	ldi	r24, 0xE8	; 232
    3a02:	93 e0       	ldi	r25, 0x03	; 3
    3a04:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <dly_us>
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (tmr = 1000; tmr; tmr--) {			/* Wait for leaving idle state */
    3a08:	01 50       	subi	r16, 0x01	; 1
    3a0a:	10 40       	sbci	r17, 0x00	; 0
    3a0c:	81 f7       	brne	.-32     	; 0x39ee <disk_initialize+0x132>
    3a0e:	08 c0       	rjmp	.+16     	; 0x3a20 <disk_initialize+0x164>
				if (send_cmd(cmd, 0) == 0) break;
				dly_us(1000);
			}
			if (!tmr || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    3a10:	80 e1       	ldi	r24, 0x10	; 16
    3a12:	40 e0       	ldi	r20, 0x00	; 0
    3a14:	52 e0       	ldi	r21, 0x02	; 2
    3a16:	60 e0       	ldi	r22, 0x00	; 0
    3a18:	70 e0       	ldi	r23, 0x00	; 0
    3a1a:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3a1e:	81 11       	cpse	r24, r1
    3a20:	ff 24       	eor	r15, r15
				ty = 0;
		}
	}
	CardType = ty;
    3a22:	f0 92 7a 02 	sts	0x027A, r15
	s = ty ? 0 : STA_NOINIT;
    3a26:	10 e0       	ldi	r17, 0x00	; 0
    3a28:	ff 20       	and	r15, r15
    3a2a:	09 f4       	brne	.+2      	; 0x3a2e <disk_initialize+0x172>
    3a2c:	11 e0       	ldi	r17, 0x01	; 1
	Stat = s;
    3a2e:	10 93 e8 01 	sts	0x01E8, r17

	deselect();
    3a32:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>

	return s;
}
    3a36:	81 2f       	mov	r24, r17
    3a38:	0f 90       	pop	r0
    3a3a:	0f 90       	pop	r0
    3a3c:	0f 90       	pop	r0
    3a3e:	0f 90       	pop	r0
    3a40:	cf 91       	pop	r28
    3a42:	df 91       	pop	r29
    3a44:	1f 91       	pop	r17
    3a46:	0f 91       	pop	r16
    3a48:	ff 90       	pop	r15
    3a4a:	ef 90       	pop	r14
    3a4c:	08 95       	ret

00003a4e <disk_read>:
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3a4e:	bf 92       	push	r11
    3a50:	cf 92       	push	r12
    3a52:	df 92       	push	r13
    3a54:	ef 92       	push	r14
    3a56:	ff 92       	push	r15
    3a58:	0f 93       	push	r16
    3a5a:	1f 93       	push	r17
    3a5c:	cf 93       	push	r28
    3a5e:	df 93       	push	r29
    3a60:	eb 01       	movw	r28, r22
    3a62:	69 01       	movw	r12, r18
    3a64:	7a 01       	movw	r14, r20
	BYTE cmd;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3a66:	0e 94 57 1c 	call	0x38ae	; 0x38ae <disk_status>
    3a6a:	80 ff       	sbrs	r24, 0
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <disk_read+0x24>
    3a6e:	83 e0       	ldi	r24, 0x03	; 3
    3a70:	3d c0       	rjmp	.+122    	; 0x3aec <disk_read+0x9e>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    3a72:	80 91 7a 02 	lds	r24, 0x027A
    3a76:	83 fd       	sbrc	r24, 3
    3a78:	09 c0       	rjmp	.+18     	; 0x3a8c <disk_read+0x3e>
    3a7a:	0b 2e       	mov	r0, r27
    3a7c:	b9 e0       	ldi	r27, 0x09	; 9
    3a7e:	cc 0c       	add	r12, r12
    3a80:	dd 1c       	adc	r13, r13
    3a82:	ee 1c       	adc	r14, r14
    3a84:	ff 1c       	adc	r15, r15
    3a86:	ba 95       	dec	r27
    3a88:	d1 f7       	brne	.-12     	; 0x3a7e <disk_read+0x30>
    3a8a:	b0 2d       	mov	r27, r0

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3a8c:	02 30       	cpi	r16, 0x02	; 2
    3a8e:	11 05       	cpc	r17, r1
    3a90:	28 f4       	brcc	.+10     	; 0x3a9c <disk_read+0x4e>
    3a92:	0f 2e       	mov	r0, r31
    3a94:	f1 e1       	ldi	r31, 0x11	; 17
    3a96:	bf 2e       	mov	r11, r31
    3a98:	f0 2d       	mov	r31, r0
    3a9a:	04 c0       	rjmp	.+8      	; 0x3aa4 <disk_read+0x56>
    3a9c:	0f 2e       	mov	r0, r31
    3a9e:	f2 e1       	ldi	r31, 0x12	; 18
    3aa0:	bf 2e       	mov	r11, r31
    3aa2:	f0 2d       	mov	r31, r0
	if (send_cmd(cmd, sector) == 0) {
    3aa4:	8b 2d       	mov	r24, r11
    3aa6:	b7 01       	movw	r22, r14
    3aa8:	a6 01       	movw	r20, r12
    3aaa:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3aae:	88 23       	and	r24, r24
    3ab0:	b9 f4       	brne	.+46     	; 0x3ae0 <disk_read+0x92>
		do {
			if (!rcvr_datablock(buff, 512)) break;
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	60 e0       	ldi	r22, 0x00	; 0
    3ab6:	72 e0       	ldi	r23, 0x02	; 2
    3ab8:	0e 94 32 1b 	call	0x3664	; 0x3664 <rcvr_datablock>
    3abc:	89 2b       	or	r24, r25
    3abe:	31 f0       	breq	.+12     	; 0x3acc <disk_read+0x7e>
			buff += 512;
		} while (--count);
    3ac0:	01 50       	subi	r16, 0x01	; 1
    3ac2:	10 40       	sbci	r17, 0x00	; 0
    3ac4:	19 f0       	breq	.+6      	; 0x3acc <disk_read+0x7e>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
			buff += 512;
    3ac6:	c0 50       	subi	r28, 0x00	; 0
    3ac8:	de 4f       	sbci	r29, 0xFE	; 254
    3aca:	f3 cf       	rjmp	.-26     	; 0x3ab2 <disk_read+0x64>
		} while (--count);
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    3acc:	82 e1       	ldi	r24, 0x12	; 18
    3ace:	b8 16       	cp	r11, r24
    3ad0:	39 f4       	brne	.+14     	; 0x3ae0 <disk_read+0x92>
    3ad2:	8c e0       	ldi	r24, 0x0C	; 12
    3ad4:	40 e0       	ldi	r20, 0x00	; 0
    3ad6:	50 e0       	ldi	r21, 0x00	; 0
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	70 e0       	ldi	r23, 0x00	; 0
    3adc:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
	}
	deselect();
    3ae0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>

	return count ? RES_ERROR : RES_OK;
    3ae4:	80 e0       	ldi	r24, 0x00	; 0
    3ae6:	01 2b       	or	r16, r17
    3ae8:	09 f0       	breq	.+2      	; 0x3aec <disk_read+0x9e>
    3aea:	81 e0       	ldi	r24, 0x01	; 1
}
    3aec:	df 91       	pop	r29
    3aee:	cf 91       	pop	r28
    3af0:	1f 91       	pop	r17
    3af2:	0f 91       	pop	r16
    3af4:	ff 90       	pop	r15
    3af6:	ef 90       	pop	r14
    3af8:	df 90       	pop	r13
    3afa:	cf 90       	pop	r12
    3afc:	bf 90       	pop	r11
    3afe:	08 95       	ret

00003b00 <disk_write>:
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    3b00:	cf 92       	push	r12
    3b02:	df 92       	push	r13
    3b04:	ef 92       	push	r14
    3b06:	ff 92       	push	r15
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	cf 93       	push	r28
    3b0e:	df 93       	push	r29
    3b10:	eb 01       	movw	r28, r22
    3b12:	69 01       	movw	r12, r18
    3b14:	7a 01       	movw	r14, r20
	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3b16:	0e 94 57 1c 	call	0x38ae	; 0x38ae <disk_status>
    3b1a:	80 ff       	sbrs	r24, 0
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <disk_write+0x22>
    3b1e:	83 e0       	ldi	r24, 0x03	; 3
    3b20:	4d c0       	rjmp	.+154    	; 0x3bbc <disk_write+0xbc>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert LBA to byte address if needed */
    3b22:	80 91 7a 02 	lds	r24, 0x027A
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	83 fd       	sbrc	r24, 3
    3b2a:	09 c0       	rjmp	.+18     	; 0x3b3e <disk_write+0x3e>
    3b2c:	0b 2e       	mov	r0, r27
    3b2e:	b9 e0       	ldi	r27, 0x09	; 9
    3b30:	cc 0c       	add	r12, r12
    3b32:	dd 1c       	adc	r13, r13
    3b34:	ee 1c       	adc	r14, r14
    3b36:	ff 1c       	adc	r15, r15
    3b38:	ba 95       	dec	r27
    3b3a:	d1 f7       	brne	.-12     	; 0x3b30 <disk_write+0x30>
    3b3c:	b0 2d       	mov	r27, r0

	if (count == 1) {	/* Single block write */
    3b3e:	01 30       	cpi	r16, 0x01	; 1
    3b40:	11 05       	cpc	r17, r1
    3b42:	81 f4       	brne	.+32     	; 0x3b64 <disk_write+0x64>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    3b44:	88 e1       	ldi	r24, 0x18	; 24
    3b46:	b7 01       	movw	r22, r14
    3b48:	a6 01       	movw	r20, r12
    3b4a:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3b4e:	88 23       	and	r24, r24
    3b50:	79 f5       	brne	.+94     	; 0x3bb0 <disk_write+0xb0>
    3b52:	ce 01       	movw	r24, r28
    3b54:	6e ef       	ldi	r22, 0xFE	; 254
    3b56:	0e 94 77 1b 	call	0x36ee	; 0x36ee <xmit_datablock>
    3b5a:	89 2b       	or	r24, r25
    3b5c:	49 f1       	breq	.+82     	; 0x3bb0 <disk_write+0xb0>
    3b5e:	00 e0       	ldi	r16, 0x00	; 0
    3b60:	10 e0       	ldi	r17, 0x00	; 0
    3b62:	26 c0       	rjmp	.+76     	; 0x3bb0 <disk_write+0xb0>
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3b64:	86 70       	andi	r24, 0x06	; 6
    3b66:	90 70       	andi	r25, 0x00	; 0
    3b68:	89 2b       	or	r24, r25
    3b6a:	31 f0       	breq	.+12     	; 0x3b78 <disk_write+0x78>
    3b6c:	a8 01       	movw	r20, r16
    3b6e:	60 e0       	ldi	r22, 0x00	; 0
    3b70:	70 e0       	ldi	r23, 0x00	; 0
    3b72:	87 e9       	ldi	r24, 0x97	; 151
    3b74:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    3b78:	89 e1       	ldi	r24, 0x19	; 25
    3b7a:	b7 01       	movw	r22, r14
    3b7c:	a6 01       	movw	r20, r12
    3b7e:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3b82:	88 23       	and	r24, r24
    3b84:	a9 f4       	brne	.+42     	; 0x3bb0 <disk_write+0xb0>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    3b86:	ce 01       	movw	r24, r28
    3b88:	6c ef       	ldi	r22, 0xFC	; 252
    3b8a:	0e 94 77 1b 	call	0x36ee	; 0x36ee <xmit_datablock>
    3b8e:	89 2b       	or	r24, r25
    3b90:	31 f0       	breq	.+12     	; 0x3b9e <disk_write+0x9e>
				buff += 512;
			} while (--count);
    3b92:	01 50       	subi	r16, 0x01	; 1
    3b94:	10 40       	sbci	r17, 0x00	; 0
    3b96:	19 f0       	breq	.+6      	; 0x3b9e <disk_write+0x9e>
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
    3b98:	c0 50       	subi	r28, 0x00	; 0
    3b9a:	de 4f       	sbci	r29, 0xFE	; 254
    3b9c:	f4 cf       	rjmp	.-24     	; 0x3b86 <disk_write+0x86>
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    3b9e:	80 e0       	ldi	r24, 0x00	; 0
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	6d ef       	ldi	r22, 0xFD	; 253
    3ba4:	0e 94 77 1b 	call	0x36ee	; 0x36ee <xmit_datablock>
    3ba8:	89 2b       	or	r24, r25
    3baa:	11 f4       	brne	.+4      	; 0x3bb0 <disk_write+0xb0>
    3bac:	01 e0       	ldi	r16, 0x01	; 1
    3bae:	10 e0       	ldi	r17, 0x00	; 0
				count = 1;
		}
	}
	deselect();
    3bb0:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>

	return count ? RES_ERROR : RES_OK;
    3bb4:	80 e0       	ldi	r24, 0x00	; 0
    3bb6:	01 2b       	or	r16, r17
    3bb8:	09 f0       	breq	.+2      	; 0x3bbc <disk_write+0xbc>
    3bba:	81 e0       	ldi	r24, 0x01	; 1
}
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	ff 90       	pop	r15
    3bc6:	ef 90       	pop	r14
    3bc8:	df 90       	pop	r13
    3bca:	cf 90       	pop	r12
    3bcc:	08 95       	ret

00003bce <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    3bce:	ef 92       	push	r14
    3bd0:	ff 92       	push	r15
    3bd2:	1f 93       	push	r17
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	60 97       	sbiw	r28, 0x10	; 16
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	16 2f       	mov	r17, r22
    3bea:	7a 01       	movw	r14, r20
	DRESULT res;
	BYTE n, csd[16];
	DWORD cs;


	if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;	/* Check if card is in the socket */
    3bec:	0e 94 57 1c 	call	0x38ae	; 0x38ae <disk_status>
    3bf0:	80 ff       	sbrs	r24, 0
    3bf2:	02 c0       	rjmp	.+4      	; 0x3bf8 <disk_ioctl+0x2a>
    3bf4:	13 e0       	ldi	r17, 0x03	; 3
    3bf6:	98 c0       	rjmp	.+304    	; 0x3d28 <disk_ioctl+0x15a>

	res = RES_ERROR;
	switch (ctrl) {
    3bf8:	11 30       	cpi	r17, 0x01	; 1
    3bfa:	71 f0       	breq	.+28     	; 0x3c18 <disk_ioctl+0x4a>
    3bfc:	11 30       	cpi	r17, 0x01	; 1
    3bfe:	28 f0       	brcs	.+10     	; 0x3c0a <disk_ioctl+0x3c>
    3c00:	13 30       	cpi	r17, 0x03	; 3
    3c02:	09 f4       	brne	.+2      	; 0x3c06 <disk_ioctl+0x38>
    3c04:	83 c0       	rjmp	.+262    	; 0x3d0c <disk_ioctl+0x13e>
    3c06:	14 e0       	ldi	r17, 0x04	; 4
    3c08:	8d c0       	rjmp	.+282    	; 0x3d24 <disk_ioctl+0x156>
		case CTRL_SYNC :		/* Make sure that no pending write process */
			if (select()) res = RES_OK;
    3c0a:	0e 94 11 1b 	call	0x3622	; 0x3622 <select>
    3c0e:	89 2b       	or	r24, r25
    3c10:	09 f4       	brne	.+2      	; 0x3c14 <disk_ioctl+0x46>
    3c12:	87 c0       	rjmp	.+270    	; 0x3d22 <disk_ioctl+0x154>
    3c14:	10 e0       	ldi	r17, 0x00	; 0
    3c16:	86 c0       	rjmp	.+268    	; 0x3d24 <disk_ioctl+0x156>
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    3c18:	89 e0       	ldi	r24, 0x09	; 9
    3c1a:	40 e0       	ldi	r20, 0x00	; 0
    3c1c:	50 e0       	ldi	r21, 0x00	; 0
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	70 e0       	ldi	r23, 0x00	; 0
    3c22:	0e 94 bb 1b 	call	0x3776	; 0x3776 <send_cmd>
    3c26:	88 23       	and	r24, r24
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <disk_ioctl+0x5e>
    3c2a:	7b c0       	rjmp	.+246    	; 0x3d22 <disk_ioctl+0x154>
    3c2c:	ce 01       	movw	r24, r28
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	60 e1       	ldi	r22, 0x10	; 16
    3c32:	70 e0       	ldi	r23, 0x00	; 0
    3c34:	0e 94 32 1b 	call	0x3664	; 0x3664 <rcvr_datablock>
    3c38:	89 2b       	or	r24, r25
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <disk_ioctl+0x70>
    3c3c:	72 c0       	rjmp	.+228    	; 0x3d22 <disk_ioctl+0x154>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	82 95       	swap	r24
    3c42:	86 95       	lsr	r24
    3c44:	86 95       	lsr	r24
    3c46:	83 70       	andi	r24, 0x03	; 3
    3c48:	81 30       	cpi	r24, 0x01	; 1
    3c4a:	49 f5       	brne	.+82     	; 0x3c9e <disk_ioctl+0xd0>
					cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
					*(DWORD*)buff = cs << 10;
    3c4c:	88 85       	ldd	r24, Y+8	; 0x08
    3c4e:	90 e0       	ldi	r25, 0x00	; 0
    3c50:	a0 e0       	ldi	r26, 0x00	; 0
    3c52:	b0 e0       	ldi	r27, 0x00	; 0
    3c54:	8f 73       	andi	r24, 0x3F	; 63
    3c56:	90 70       	andi	r25, 0x00	; 0
    3c58:	a0 70       	andi	r26, 0x00	; 0
    3c5a:	b0 70       	andi	r27, 0x00	; 0
    3c5c:	dc 01       	movw	r26, r24
    3c5e:	99 27       	eor	r25, r25
    3c60:	88 27       	eor	r24, r24
    3c62:	01 96       	adiw	r24, 0x01	; 1
    3c64:	a1 1d       	adc	r26, r1
    3c66:	b1 1d       	adc	r27, r1
    3c68:	39 85       	ldd	r19, Y+9	; 0x09
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	6a 85       	ldd	r22, Y+10	; 0x0a
    3c6e:	26 0f       	add	r18, r22
    3c70:	31 1d       	adc	r19, r1
    3c72:	40 e0       	ldi	r20, 0x00	; 0
    3c74:	50 e0       	ldi	r21, 0x00	; 0
    3c76:	82 0f       	add	r24, r18
    3c78:	93 1f       	adc	r25, r19
    3c7a:	a4 1f       	adc	r26, r20
    3c7c:	b5 1f       	adc	r27, r21
    3c7e:	07 2e       	mov	r0, r23
    3c80:	7a e0       	ldi	r23, 0x0A	; 10
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	aa 1f       	adc	r26, r26
    3c88:	bb 1f       	adc	r27, r27
    3c8a:	7a 95       	dec	r23
    3c8c:	d1 f7       	brne	.-12     	; 0x3c82 <disk_ioctl+0xb4>
    3c8e:	70 2d       	mov	r23, r0
    3c90:	f7 01       	movw	r30, r14
    3c92:	80 83       	st	Z, r24
    3c94:	91 83       	std	Z+1, r25	; 0x01
    3c96:	a2 83       	std	Z+2, r26	; 0x02
    3c98:	b3 83       	std	Z+3, r27	; 0x03
    3c9a:	10 e0       	ldi	r17, 0x00	; 0
    3c9c:	43 c0       	rjmp	.+134    	; 0x3d24 <disk_ioctl+0x156>
				} else {					/* SDC ver 1.XX or MMC */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = cs << (n - 9);
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	82 95       	swap	r24
    3ca2:	86 95       	lsr	r24
    3ca4:	86 95       	lsr	r24
    3ca6:	83 70       	andi	r24, 0x03	; 3
    3ca8:	28 85       	ldd	r18, Y+8	; 0x08
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	22 0f       	add	r18, r18
    3cae:	33 1f       	adc	r19, r19
    3cb0:	22 0f       	add	r18, r18
    3cb2:	33 1f       	adc	r19, r19
    3cb4:	28 0f       	add	r18, r24
    3cb6:	31 1d       	adc	r19, r1
    3cb8:	2f 5f       	subi	r18, 0xFF	; 255
    3cba:	3f 4f       	sbci	r19, 0xFF	; 255
    3cbc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	83 70       	andi	r24, 0x03	; 3
    3cc2:	90 70       	andi	r25, 0x00	; 0
    3cc4:	98 2f       	mov	r25, r24
    3cc6:	88 27       	eor	r24, r24
    3cc8:	99 0f       	add	r25, r25
    3cca:	99 0f       	add	r25, r25
    3ccc:	28 0f       	add	r18, r24
    3cce:	39 1f       	adc	r19, r25
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	8e 81       	ldd	r24, Y+6	; 0x06
    3cd6:	8f 70       	andi	r24, 0x0F	; 15
    3cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cda:	66 1f       	adc	r22, r22
    3cdc:	66 27       	eor	r22, r22
    3cde:	66 1f       	adc	r22, r22
    3ce0:	86 0f       	add	r24, r22
    3ce2:	8e 5f       	subi	r24, 0xFE	; 254
    3ce4:	6a 85       	ldd	r22, Y+10	; 0x0a
    3ce6:	63 70       	andi	r22, 0x03	; 3
    3ce8:	66 0f       	add	r22, r22
    3cea:	86 0f       	add	r24, r22
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	09 97       	sbiw	r24, 0x09	; 9
    3cf0:	04 c0       	rjmp	.+8      	; 0x3cfa <disk_ioctl+0x12c>
    3cf2:	22 0f       	add	r18, r18
    3cf4:	33 1f       	adc	r19, r19
    3cf6:	44 1f       	adc	r20, r20
    3cf8:	55 1f       	adc	r21, r21
    3cfa:	8a 95       	dec	r24
    3cfc:	d2 f7       	brpl	.-12     	; 0x3cf2 <disk_ioctl+0x124>
    3cfe:	f7 01       	movw	r30, r14
    3d00:	20 83       	st	Z, r18
    3d02:	31 83       	std	Z+1, r19	; 0x01
    3d04:	42 83       	std	Z+2, r20	; 0x02
    3d06:	53 83       	std	Z+3, r21	; 0x03
    3d08:	10 e0       	ldi	r17, 0x00	; 0
    3d0a:	0c c0       	rjmp	.+24     	; 0x3d24 <disk_ioctl+0x156>
				res = RES_OK;
			}
			break;

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			*(DWORD*)buff = 128;
    3d0c:	80 e8       	ldi	r24, 0x80	; 128
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	a0 e0       	ldi	r26, 0x00	; 0
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	f7 01       	movw	r30, r14
    3d16:	80 83       	st	Z, r24
    3d18:	91 83       	std	Z+1, r25	; 0x01
    3d1a:	a2 83       	std	Z+2, r26	; 0x02
    3d1c:	b3 83       	std	Z+3, r27	; 0x03
    3d1e:	10 e0       	ldi	r17, 0x00	; 0
    3d20:	01 c0       	rjmp	.+2      	; 0x3d24 <disk_ioctl+0x156>
			res = RES_OK;
			break;
    3d22:	11 e0       	ldi	r17, 0x01	; 1

		default:
			res = RES_PARERR;
	}

	deselect();
    3d24:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <deselect>

	return res;
}
    3d28:	81 2f       	mov	r24, r17
    3d2a:	60 96       	adiw	r28, 0x10	; 16
    3d2c:	0f b6       	in	r0, 0x3f	; 63
    3d2e:	f8 94       	cli
    3d30:	de bf       	out	0x3e, r29	; 62
    3d32:	0f be       	out	0x3f, r0	; 63
    3d34:	cd bf       	out	0x3d, r28	; 61
    3d36:	cf 91       	pop	r28
    3d38:	df 91       	pop	r29
    3d3a:	1f 91       	pop	r17
    3d3c:	ff 90       	pop	r15
    3d3e:	ef 90       	pop	r14
    3d40:	08 95       	ret

00003d42 <__subsf3>:
    3d42:	50 58       	subi	r21, 0x80	; 128

00003d44 <__addsf3>:
    3d44:	bb 27       	eor	r27, r27
    3d46:	aa 27       	eor	r26, r26
    3d48:	0e d0       	rcall	.+28     	; 0x3d66 <__addsf3x>
    3d4a:	4d c1       	rjmp	.+666    	; 0x3fe6 <__fp_round>
    3d4c:	3e d1       	rcall	.+636    	; 0x3fca <__fp_pscA>
    3d4e:	30 f0       	brcs	.+12     	; 0x3d5c <__addsf3+0x18>
    3d50:	43 d1       	rcall	.+646    	; 0x3fd8 <__fp_pscB>
    3d52:	20 f0       	brcs	.+8      	; 0x3d5c <__addsf3+0x18>
    3d54:	31 f4       	brne	.+12     	; 0x3d62 <__addsf3+0x1e>
    3d56:	9f 3f       	cpi	r25, 0xFF	; 255
    3d58:	11 f4       	brne	.+4      	; 0x3d5e <__addsf3+0x1a>
    3d5a:	1e f4       	brtc	.+6      	; 0x3d62 <__addsf3+0x1e>
    3d5c:	33 c1       	rjmp	.+614    	; 0x3fc4 <__fp_nan>
    3d5e:	0e f4       	brtc	.+2      	; 0x3d62 <__addsf3+0x1e>
    3d60:	e0 95       	com	r30
    3d62:	e7 fb       	bst	r30, 7
    3d64:	29 c1       	rjmp	.+594    	; 0x3fb8 <__fp_inf>

00003d66 <__addsf3x>:
    3d66:	e9 2f       	mov	r30, r25
    3d68:	4f d1       	rcall	.+670    	; 0x4008 <__fp_split3>
    3d6a:	80 f3       	brcs	.-32     	; 0x3d4c <__addsf3+0x8>
    3d6c:	ba 17       	cp	r27, r26
    3d6e:	62 07       	cpc	r22, r18
    3d70:	73 07       	cpc	r23, r19
    3d72:	84 07       	cpc	r24, r20
    3d74:	95 07       	cpc	r25, r21
    3d76:	18 f0       	brcs	.+6      	; 0x3d7e <__addsf3x+0x18>
    3d78:	71 f4       	brne	.+28     	; 0x3d96 <__addsf3x+0x30>
    3d7a:	9e f5       	brtc	.+102    	; 0x3de2 <__addsf3x+0x7c>
    3d7c:	67 c1       	rjmp	.+718    	; 0x404c <__fp_zero>
    3d7e:	0e f4       	brtc	.+2      	; 0x3d82 <__addsf3x+0x1c>
    3d80:	e0 95       	com	r30
    3d82:	0b 2e       	mov	r0, r27
    3d84:	ba 2f       	mov	r27, r26
    3d86:	a0 2d       	mov	r26, r0
    3d88:	0b 01       	movw	r0, r22
    3d8a:	b9 01       	movw	r22, r18
    3d8c:	90 01       	movw	r18, r0
    3d8e:	0c 01       	movw	r0, r24
    3d90:	ca 01       	movw	r24, r20
    3d92:	a0 01       	movw	r20, r0
    3d94:	11 24       	eor	r1, r1
    3d96:	ff 27       	eor	r31, r31
    3d98:	59 1b       	sub	r21, r25
    3d9a:	99 f0       	breq	.+38     	; 0x3dc2 <__addsf3x+0x5c>
    3d9c:	59 3f       	cpi	r21, 0xF9	; 249
    3d9e:	50 f4       	brcc	.+20     	; 0x3db4 <__addsf3x+0x4e>
    3da0:	50 3e       	cpi	r21, 0xE0	; 224
    3da2:	68 f1       	brcs	.+90     	; 0x3dfe <__addsf3x+0x98>
    3da4:	1a 16       	cp	r1, r26
    3da6:	f0 40       	sbci	r31, 0x00	; 0
    3da8:	a2 2f       	mov	r26, r18
    3daa:	23 2f       	mov	r18, r19
    3dac:	34 2f       	mov	r19, r20
    3dae:	44 27       	eor	r20, r20
    3db0:	58 5f       	subi	r21, 0xF8	; 248
    3db2:	f3 cf       	rjmp	.-26     	; 0x3d9a <__addsf3x+0x34>
    3db4:	46 95       	lsr	r20
    3db6:	37 95       	ror	r19
    3db8:	27 95       	ror	r18
    3dba:	a7 95       	ror	r26
    3dbc:	f0 40       	sbci	r31, 0x00	; 0
    3dbe:	53 95       	inc	r21
    3dc0:	c9 f7       	brne	.-14     	; 0x3db4 <__addsf3x+0x4e>
    3dc2:	7e f4       	brtc	.+30     	; 0x3de2 <__addsf3x+0x7c>
    3dc4:	1f 16       	cp	r1, r31
    3dc6:	ba 0b       	sbc	r27, r26
    3dc8:	62 0b       	sbc	r22, r18
    3dca:	73 0b       	sbc	r23, r19
    3dcc:	84 0b       	sbc	r24, r20
    3dce:	ba f0       	brmi	.+46     	; 0x3dfe <__addsf3x+0x98>
    3dd0:	91 50       	subi	r25, 0x01	; 1
    3dd2:	a1 f0       	breq	.+40     	; 0x3dfc <__addsf3x+0x96>
    3dd4:	ff 0f       	add	r31, r31
    3dd6:	bb 1f       	adc	r27, r27
    3dd8:	66 1f       	adc	r22, r22
    3dda:	77 1f       	adc	r23, r23
    3ddc:	88 1f       	adc	r24, r24
    3dde:	c2 f7       	brpl	.-16     	; 0x3dd0 <__addsf3x+0x6a>
    3de0:	0e c0       	rjmp	.+28     	; 0x3dfe <__addsf3x+0x98>
    3de2:	ba 0f       	add	r27, r26
    3de4:	62 1f       	adc	r22, r18
    3de6:	73 1f       	adc	r23, r19
    3de8:	84 1f       	adc	r24, r20
    3dea:	48 f4       	brcc	.+18     	; 0x3dfe <__addsf3x+0x98>
    3dec:	87 95       	ror	r24
    3dee:	77 95       	ror	r23
    3df0:	67 95       	ror	r22
    3df2:	b7 95       	ror	r27
    3df4:	f7 95       	ror	r31
    3df6:	9e 3f       	cpi	r25, 0xFE	; 254
    3df8:	08 f0       	brcs	.+2      	; 0x3dfc <__addsf3x+0x96>
    3dfa:	b3 cf       	rjmp	.-154    	; 0x3d62 <__addsf3+0x1e>
    3dfc:	93 95       	inc	r25
    3dfe:	88 0f       	add	r24, r24
    3e00:	08 f0       	brcs	.+2      	; 0x3e04 <__addsf3x+0x9e>
    3e02:	99 27       	eor	r25, r25
    3e04:	ee 0f       	add	r30, r30
    3e06:	97 95       	ror	r25
    3e08:	87 95       	ror	r24
    3e0a:	08 95       	ret

00003e0c <__divsf3>:
    3e0c:	0c d0       	rcall	.+24     	; 0x3e26 <__divsf3x>
    3e0e:	eb c0       	rjmp	.+470    	; 0x3fe6 <__fp_round>
    3e10:	e3 d0       	rcall	.+454    	; 0x3fd8 <__fp_pscB>
    3e12:	40 f0       	brcs	.+16     	; 0x3e24 <__divsf3+0x18>
    3e14:	da d0       	rcall	.+436    	; 0x3fca <__fp_pscA>
    3e16:	30 f0       	brcs	.+12     	; 0x3e24 <__divsf3+0x18>
    3e18:	21 f4       	brne	.+8      	; 0x3e22 <__divsf3+0x16>
    3e1a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e1c:	19 f0       	breq	.+6      	; 0x3e24 <__divsf3+0x18>
    3e1e:	cc c0       	rjmp	.+408    	; 0x3fb8 <__fp_inf>
    3e20:	51 11       	cpse	r21, r1
    3e22:	15 c1       	rjmp	.+554    	; 0x404e <__fp_szero>
    3e24:	cf c0       	rjmp	.+414    	; 0x3fc4 <__fp_nan>

00003e26 <__divsf3x>:
    3e26:	f0 d0       	rcall	.+480    	; 0x4008 <__fp_split3>
    3e28:	98 f3       	brcs	.-26     	; 0x3e10 <__divsf3+0x4>

00003e2a <__divsf3_pse>:
    3e2a:	99 23       	and	r25, r25
    3e2c:	c9 f3       	breq	.-14     	; 0x3e20 <__divsf3+0x14>
    3e2e:	55 23       	and	r21, r21
    3e30:	b1 f3       	breq	.-20     	; 0x3e1e <__divsf3+0x12>
    3e32:	95 1b       	sub	r25, r21
    3e34:	55 0b       	sbc	r21, r21
    3e36:	bb 27       	eor	r27, r27
    3e38:	aa 27       	eor	r26, r26
    3e3a:	62 17       	cp	r22, r18
    3e3c:	73 07       	cpc	r23, r19
    3e3e:	84 07       	cpc	r24, r20
    3e40:	38 f0       	brcs	.+14     	; 0x3e50 <__divsf3_pse+0x26>
    3e42:	9f 5f       	subi	r25, 0xFF	; 255
    3e44:	5f 4f       	sbci	r21, 0xFF	; 255
    3e46:	22 0f       	add	r18, r18
    3e48:	33 1f       	adc	r19, r19
    3e4a:	44 1f       	adc	r20, r20
    3e4c:	aa 1f       	adc	r26, r26
    3e4e:	a9 f3       	breq	.-22     	; 0x3e3a <__divsf3_pse+0x10>
    3e50:	33 d0       	rcall	.+102    	; 0x3eb8 <__divsf3_pse+0x8e>
    3e52:	0e 2e       	mov	r0, r30
    3e54:	3a f0       	brmi	.+14     	; 0x3e64 <__divsf3_pse+0x3a>
    3e56:	e0 e8       	ldi	r30, 0x80	; 128
    3e58:	30 d0       	rcall	.+96     	; 0x3eba <__divsf3_pse+0x90>
    3e5a:	91 50       	subi	r25, 0x01	; 1
    3e5c:	50 40       	sbci	r21, 0x00	; 0
    3e5e:	e6 95       	lsr	r30
    3e60:	00 1c       	adc	r0, r0
    3e62:	ca f7       	brpl	.-14     	; 0x3e56 <__divsf3_pse+0x2c>
    3e64:	29 d0       	rcall	.+82     	; 0x3eb8 <__divsf3_pse+0x8e>
    3e66:	fe 2f       	mov	r31, r30
    3e68:	27 d0       	rcall	.+78     	; 0x3eb8 <__divsf3_pse+0x8e>
    3e6a:	66 0f       	add	r22, r22
    3e6c:	77 1f       	adc	r23, r23
    3e6e:	88 1f       	adc	r24, r24
    3e70:	bb 1f       	adc	r27, r27
    3e72:	26 17       	cp	r18, r22
    3e74:	37 07       	cpc	r19, r23
    3e76:	48 07       	cpc	r20, r24
    3e78:	ab 07       	cpc	r26, r27
    3e7a:	b0 e8       	ldi	r27, 0x80	; 128
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <__divsf3_pse+0x56>
    3e7e:	bb 0b       	sbc	r27, r27
    3e80:	80 2d       	mov	r24, r0
    3e82:	bf 01       	movw	r22, r30
    3e84:	ff 27       	eor	r31, r31
    3e86:	93 58       	subi	r25, 0x83	; 131
    3e88:	5f 4f       	sbci	r21, 0xFF	; 255
    3e8a:	2a f0       	brmi	.+10     	; 0x3e96 <__divsf3_pse+0x6c>
    3e8c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e8e:	51 05       	cpc	r21, r1
    3e90:	68 f0       	brcs	.+26     	; 0x3eac <__divsf3_pse+0x82>
    3e92:	92 c0       	rjmp	.+292    	; 0x3fb8 <__fp_inf>
    3e94:	dc c0       	rjmp	.+440    	; 0x404e <__fp_szero>
    3e96:	5f 3f       	cpi	r21, 0xFF	; 255
    3e98:	ec f3       	brlt	.-6      	; 0x3e94 <__divsf3_pse+0x6a>
    3e9a:	98 3e       	cpi	r25, 0xE8	; 232
    3e9c:	dc f3       	brlt	.-10     	; 0x3e94 <__divsf3_pse+0x6a>
    3e9e:	86 95       	lsr	r24
    3ea0:	77 95       	ror	r23
    3ea2:	67 95       	ror	r22
    3ea4:	b7 95       	ror	r27
    3ea6:	f7 95       	ror	r31
    3ea8:	9f 5f       	subi	r25, 0xFF	; 255
    3eaa:	c9 f7       	brne	.-14     	; 0x3e9e <__divsf3_pse+0x74>
    3eac:	88 0f       	add	r24, r24
    3eae:	91 1d       	adc	r25, r1
    3eb0:	96 95       	lsr	r25
    3eb2:	87 95       	ror	r24
    3eb4:	97 f9       	bld	r25, 7
    3eb6:	08 95       	ret
    3eb8:	e1 e0       	ldi	r30, 0x01	; 1
    3eba:	66 0f       	add	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	bb 1f       	adc	r27, r27
    3ec2:	62 17       	cp	r22, r18
    3ec4:	73 07       	cpc	r23, r19
    3ec6:	84 07       	cpc	r24, r20
    3ec8:	ba 07       	cpc	r27, r26
    3eca:	20 f0       	brcs	.+8      	; 0x3ed4 <__divsf3_pse+0xaa>
    3ecc:	62 1b       	sub	r22, r18
    3ece:	73 0b       	sbc	r23, r19
    3ed0:	84 0b       	sbc	r24, r20
    3ed2:	ba 0b       	sbc	r27, r26
    3ed4:	ee 1f       	adc	r30, r30
    3ed6:	88 f7       	brcc	.-30     	; 0x3eba <__divsf3_pse+0x90>
    3ed8:	e0 95       	com	r30
    3eda:	08 95       	ret

00003edc <__fixsfsi>:
    3edc:	04 d0       	rcall	.+8      	; 0x3ee6 <__fixunssfsi>
    3ede:	68 94       	set
    3ee0:	b1 11       	cpse	r27, r1
    3ee2:	b5 c0       	rjmp	.+362    	; 0x404e <__fp_szero>
    3ee4:	08 95       	ret

00003ee6 <__fixunssfsi>:
    3ee6:	98 d0       	rcall	.+304    	; 0x4018 <__fp_splitA>
    3ee8:	88 f0       	brcs	.+34     	; 0x3f0c <__fixunssfsi+0x26>
    3eea:	9f 57       	subi	r25, 0x7F	; 127
    3eec:	90 f0       	brcs	.+36     	; 0x3f12 <__fixunssfsi+0x2c>
    3eee:	b9 2f       	mov	r27, r25
    3ef0:	99 27       	eor	r25, r25
    3ef2:	b7 51       	subi	r27, 0x17	; 23
    3ef4:	a0 f0       	brcs	.+40     	; 0x3f1e <__fixunssfsi+0x38>
    3ef6:	d1 f0       	breq	.+52     	; 0x3f2c <__fixunssfsi+0x46>
    3ef8:	66 0f       	add	r22, r22
    3efa:	77 1f       	adc	r23, r23
    3efc:	88 1f       	adc	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	1a f0       	brmi	.+6      	; 0x3f08 <__fixunssfsi+0x22>
    3f02:	ba 95       	dec	r27
    3f04:	c9 f7       	brne	.-14     	; 0x3ef8 <__fixunssfsi+0x12>
    3f06:	12 c0       	rjmp	.+36     	; 0x3f2c <__fixunssfsi+0x46>
    3f08:	b1 30       	cpi	r27, 0x01	; 1
    3f0a:	81 f0       	breq	.+32     	; 0x3f2c <__fixunssfsi+0x46>
    3f0c:	9f d0       	rcall	.+318    	; 0x404c <__fp_zero>
    3f0e:	b1 e0       	ldi	r27, 0x01	; 1
    3f10:	08 95       	ret
    3f12:	9c c0       	rjmp	.+312    	; 0x404c <__fp_zero>
    3f14:	67 2f       	mov	r22, r23
    3f16:	78 2f       	mov	r23, r24
    3f18:	88 27       	eor	r24, r24
    3f1a:	b8 5f       	subi	r27, 0xF8	; 248
    3f1c:	39 f0       	breq	.+14     	; 0x3f2c <__fixunssfsi+0x46>
    3f1e:	b9 3f       	cpi	r27, 0xF9	; 249
    3f20:	cc f3       	brlt	.-14     	; 0x3f14 <__fixunssfsi+0x2e>
    3f22:	86 95       	lsr	r24
    3f24:	77 95       	ror	r23
    3f26:	67 95       	ror	r22
    3f28:	b3 95       	inc	r27
    3f2a:	d9 f7       	brne	.-10     	; 0x3f22 <__fixunssfsi+0x3c>
    3f2c:	3e f4       	brtc	.+14     	; 0x3f3c <__fixunssfsi+0x56>
    3f2e:	90 95       	com	r25
    3f30:	80 95       	com	r24
    3f32:	70 95       	com	r23
    3f34:	61 95       	neg	r22
    3f36:	7f 4f       	sbci	r23, 0xFF	; 255
    3f38:	8f 4f       	sbci	r24, 0xFF	; 255
    3f3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f3c:	08 95       	ret

00003f3e <__floatunsisf>:
    3f3e:	e8 94       	clt
    3f40:	09 c0       	rjmp	.+18     	; 0x3f54 <__floatsisf+0x12>

00003f42 <__floatsisf>:
    3f42:	97 fb       	bst	r25, 7
    3f44:	3e f4       	brtc	.+14     	; 0x3f54 <__floatsisf+0x12>
    3f46:	90 95       	com	r25
    3f48:	80 95       	com	r24
    3f4a:	70 95       	com	r23
    3f4c:	61 95       	neg	r22
    3f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f50:	8f 4f       	sbci	r24, 0xFF	; 255
    3f52:	9f 4f       	sbci	r25, 0xFF	; 255
    3f54:	99 23       	and	r25, r25
    3f56:	a9 f0       	breq	.+42     	; 0x3f82 <__floatsisf+0x40>
    3f58:	f9 2f       	mov	r31, r25
    3f5a:	96 e9       	ldi	r25, 0x96	; 150
    3f5c:	bb 27       	eor	r27, r27
    3f5e:	93 95       	inc	r25
    3f60:	f6 95       	lsr	r31
    3f62:	87 95       	ror	r24
    3f64:	77 95       	ror	r23
    3f66:	67 95       	ror	r22
    3f68:	b7 95       	ror	r27
    3f6a:	f1 11       	cpse	r31, r1
    3f6c:	f8 cf       	rjmp	.-16     	; 0x3f5e <__floatsisf+0x1c>
    3f6e:	fa f4       	brpl	.+62     	; 0x3fae <__floatsisf+0x6c>
    3f70:	bb 0f       	add	r27, r27
    3f72:	11 f4       	brne	.+4      	; 0x3f78 <__floatsisf+0x36>
    3f74:	60 ff       	sbrs	r22, 0
    3f76:	1b c0       	rjmp	.+54     	; 0x3fae <__floatsisf+0x6c>
    3f78:	6f 5f       	subi	r22, 0xFF	; 255
    3f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    3f7c:	8f 4f       	sbci	r24, 0xFF	; 255
    3f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f80:	16 c0       	rjmp	.+44     	; 0x3fae <__floatsisf+0x6c>
    3f82:	88 23       	and	r24, r24
    3f84:	11 f0       	breq	.+4      	; 0x3f8a <__floatsisf+0x48>
    3f86:	96 e9       	ldi	r25, 0x96	; 150
    3f88:	11 c0       	rjmp	.+34     	; 0x3fac <__floatsisf+0x6a>
    3f8a:	77 23       	and	r23, r23
    3f8c:	21 f0       	breq	.+8      	; 0x3f96 <__floatsisf+0x54>
    3f8e:	9e e8       	ldi	r25, 0x8E	; 142
    3f90:	87 2f       	mov	r24, r23
    3f92:	76 2f       	mov	r23, r22
    3f94:	05 c0       	rjmp	.+10     	; 0x3fa0 <__floatsisf+0x5e>
    3f96:	66 23       	and	r22, r22
    3f98:	71 f0       	breq	.+28     	; 0x3fb6 <__floatsisf+0x74>
    3f9a:	96 e8       	ldi	r25, 0x86	; 134
    3f9c:	86 2f       	mov	r24, r22
    3f9e:	70 e0       	ldi	r23, 0x00	; 0
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	2a f0       	brmi	.+10     	; 0x3fae <__floatsisf+0x6c>
    3fa4:	9a 95       	dec	r25
    3fa6:	66 0f       	add	r22, r22
    3fa8:	77 1f       	adc	r23, r23
    3faa:	88 1f       	adc	r24, r24
    3fac:	da f7       	brpl	.-10     	; 0x3fa4 <__floatsisf+0x62>
    3fae:	88 0f       	add	r24, r24
    3fb0:	96 95       	lsr	r25
    3fb2:	87 95       	ror	r24
    3fb4:	97 f9       	bld	r25, 7
    3fb6:	08 95       	ret

00003fb8 <__fp_inf>:
    3fb8:	97 f9       	bld	r25, 7
    3fba:	9f 67       	ori	r25, 0x7F	; 127
    3fbc:	80 e8       	ldi	r24, 0x80	; 128
    3fbe:	70 e0       	ldi	r23, 0x00	; 0
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	08 95       	ret

00003fc4 <__fp_nan>:
    3fc4:	9f ef       	ldi	r25, 0xFF	; 255
    3fc6:	80 ec       	ldi	r24, 0xC0	; 192
    3fc8:	08 95       	ret

00003fca <__fp_pscA>:
    3fca:	00 24       	eor	r0, r0
    3fcc:	0a 94       	dec	r0
    3fce:	16 16       	cp	r1, r22
    3fd0:	17 06       	cpc	r1, r23
    3fd2:	18 06       	cpc	r1, r24
    3fd4:	09 06       	cpc	r0, r25
    3fd6:	08 95       	ret

00003fd8 <__fp_pscB>:
    3fd8:	00 24       	eor	r0, r0
    3fda:	0a 94       	dec	r0
    3fdc:	12 16       	cp	r1, r18
    3fde:	13 06       	cpc	r1, r19
    3fe0:	14 06       	cpc	r1, r20
    3fe2:	05 06       	cpc	r0, r21
    3fe4:	08 95       	ret

00003fe6 <__fp_round>:
    3fe6:	09 2e       	mov	r0, r25
    3fe8:	03 94       	inc	r0
    3fea:	00 0c       	add	r0, r0
    3fec:	11 f4       	brne	.+4      	; 0x3ff2 <__fp_round+0xc>
    3fee:	88 23       	and	r24, r24
    3ff0:	52 f0       	brmi	.+20     	; 0x4006 <__fp_round+0x20>
    3ff2:	bb 0f       	add	r27, r27
    3ff4:	40 f4       	brcc	.+16     	; 0x4006 <__fp_round+0x20>
    3ff6:	bf 2b       	or	r27, r31
    3ff8:	11 f4       	brne	.+4      	; 0x3ffe <__fp_round+0x18>
    3ffa:	60 ff       	sbrs	r22, 0
    3ffc:	04 c0       	rjmp	.+8      	; 0x4006 <__fp_round+0x20>
    3ffe:	6f 5f       	subi	r22, 0xFF	; 255
    4000:	7f 4f       	sbci	r23, 0xFF	; 255
    4002:	8f 4f       	sbci	r24, 0xFF	; 255
    4004:	9f 4f       	sbci	r25, 0xFF	; 255
    4006:	08 95       	ret

00004008 <__fp_split3>:
    4008:	57 fd       	sbrc	r21, 7
    400a:	90 58       	subi	r25, 0x80	; 128
    400c:	44 0f       	add	r20, r20
    400e:	55 1f       	adc	r21, r21
    4010:	59 f0       	breq	.+22     	; 0x4028 <__fp_splitA+0x10>
    4012:	5f 3f       	cpi	r21, 0xFF	; 255
    4014:	71 f0       	breq	.+28     	; 0x4032 <__fp_splitA+0x1a>
    4016:	47 95       	ror	r20

00004018 <__fp_splitA>:
    4018:	88 0f       	add	r24, r24
    401a:	97 fb       	bst	r25, 7
    401c:	99 1f       	adc	r25, r25
    401e:	61 f0       	breq	.+24     	; 0x4038 <__fp_splitA+0x20>
    4020:	9f 3f       	cpi	r25, 0xFF	; 255
    4022:	79 f0       	breq	.+30     	; 0x4042 <__fp_splitA+0x2a>
    4024:	87 95       	ror	r24
    4026:	08 95       	ret
    4028:	12 16       	cp	r1, r18
    402a:	13 06       	cpc	r1, r19
    402c:	14 06       	cpc	r1, r20
    402e:	55 1f       	adc	r21, r21
    4030:	f2 cf       	rjmp	.-28     	; 0x4016 <__fp_split3+0xe>
    4032:	46 95       	lsr	r20
    4034:	f1 df       	rcall	.-30     	; 0x4018 <__fp_splitA>
    4036:	08 c0       	rjmp	.+16     	; 0x4048 <__fp_splitA+0x30>
    4038:	16 16       	cp	r1, r22
    403a:	17 06       	cpc	r1, r23
    403c:	18 06       	cpc	r1, r24
    403e:	99 1f       	adc	r25, r25
    4040:	f1 cf       	rjmp	.-30     	; 0x4024 <__fp_splitA+0xc>
    4042:	86 95       	lsr	r24
    4044:	71 05       	cpc	r23, r1
    4046:	61 05       	cpc	r22, r1
    4048:	08 94       	sec
    404a:	08 95       	ret

0000404c <__fp_zero>:
    404c:	e8 94       	clt

0000404e <__fp_szero>:
    404e:	bb 27       	eor	r27, r27
    4050:	66 27       	eor	r22, r22
    4052:	77 27       	eor	r23, r23
    4054:	cb 01       	movw	r24, r22
    4056:	97 f9       	bld	r25, 7
    4058:	08 95       	ret

0000405a <__gesf2>:
    405a:	66 d0       	rcall	.+204    	; 0x4128 <__fp_cmp>
    405c:	08 f4       	brcc	.+2      	; 0x4060 <__gesf2+0x6>
    405e:	8f ef       	ldi	r24, 0xFF	; 255
    4060:	08 95       	ret

00004062 <__mulsf3>:
    4062:	0b d0       	rcall	.+22     	; 0x407a <__mulsf3x>
    4064:	c0 cf       	rjmp	.-128    	; 0x3fe6 <__fp_round>
    4066:	b1 df       	rcall	.-158    	; 0x3fca <__fp_pscA>
    4068:	28 f0       	brcs	.+10     	; 0x4074 <__mulsf3+0x12>
    406a:	b6 df       	rcall	.-148    	; 0x3fd8 <__fp_pscB>
    406c:	18 f0       	brcs	.+6      	; 0x4074 <__mulsf3+0x12>
    406e:	95 23       	and	r25, r21
    4070:	09 f0       	breq	.+2      	; 0x4074 <__mulsf3+0x12>
    4072:	a2 cf       	rjmp	.-188    	; 0x3fb8 <__fp_inf>
    4074:	a7 cf       	rjmp	.-178    	; 0x3fc4 <__fp_nan>
    4076:	11 24       	eor	r1, r1
    4078:	ea cf       	rjmp	.-44     	; 0x404e <__fp_szero>

0000407a <__mulsf3x>:
    407a:	c6 df       	rcall	.-116    	; 0x4008 <__fp_split3>
    407c:	a0 f3       	brcs	.-24     	; 0x4066 <__mulsf3+0x4>

0000407e <__mulsf3_pse>:
    407e:	95 9f       	mul	r25, r21
    4080:	d1 f3       	breq	.-12     	; 0x4076 <__mulsf3+0x14>
    4082:	95 0f       	add	r25, r21
    4084:	50 e0       	ldi	r21, 0x00	; 0
    4086:	55 1f       	adc	r21, r21
    4088:	62 9f       	mul	r22, r18
    408a:	f0 01       	movw	r30, r0
    408c:	72 9f       	mul	r23, r18
    408e:	bb 27       	eor	r27, r27
    4090:	f0 0d       	add	r31, r0
    4092:	b1 1d       	adc	r27, r1
    4094:	63 9f       	mul	r22, r19
    4096:	aa 27       	eor	r26, r26
    4098:	f0 0d       	add	r31, r0
    409a:	b1 1d       	adc	r27, r1
    409c:	aa 1f       	adc	r26, r26
    409e:	64 9f       	mul	r22, r20
    40a0:	66 27       	eor	r22, r22
    40a2:	b0 0d       	add	r27, r0
    40a4:	a1 1d       	adc	r26, r1
    40a6:	66 1f       	adc	r22, r22
    40a8:	82 9f       	mul	r24, r18
    40aa:	22 27       	eor	r18, r18
    40ac:	b0 0d       	add	r27, r0
    40ae:	a1 1d       	adc	r26, r1
    40b0:	62 1f       	adc	r22, r18
    40b2:	73 9f       	mul	r23, r19
    40b4:	b0 0d       	add	r27, r0
    40b6:	a1 1d       	adc	r26, r1
    40b8:	62 1f       	adc	r22, r18
    40ba:	83 9f       	mul	r24, r19
    40bc:	a0 0d       	add	r26, r0
    40be:	61 1d       	adc	r22, r1
    40c0:	22 1f       	adc	r18, r18
    40c2:	74 9f       	mul	r23, r20
    40c4:	33 27       	eor	r19, r19
    40c6:	a0 0d       	add	r26, r0
    40c8:	61 1d       	adc	r22, r1
    40ca:	23 1f       	adc	r18, r19
    40cc:	84 9f       	mul	r24, r20
    40ce:	60 0d       	add	r22, r0
    40d0:	21 1d       	adc	r18, r1
    40d2:	82 2f       	mov	r24, r18
    40d4:	76 2f       	mov	r23, r22
    40d6:	6a 2f       	mov	r22, r26
    40d8:	11 24       	eor	r1, r1
    40da:	9f 57       	subi	r25, 0x7F	; 127
    40dc:	50 40       	sbci	r21, 0x00	; 0
    40de:	8a f0       	brmi	.+34     	; 0x4102 <__mulsf3_pse+0x84>
    40e0:	e1 f0       	breq	.+56     	; 0x411a <__mulsf3_pse+0x9c>
    40e2:	88 23       	and	r24, r24
    40e4:	4a f0       	brmi	.+18     	; 0x40f8 <__mulsf3_pse+0x7a>
    40e6:	ee 0f       	add	r30, r30
    40e8:	ff 1f       	adc	r31, r31
    40ea:	bb 1f       	adc	r27, r27
    40ec:	66 1f       	adc	r22, r22
    40ee:	77 1f       	adc	r23, r23
    40f0:	88 1f       	adc	r24, r24
    40f2:	91 50       	subi	r25, 0x01	; 1
    40f4:	50 40       	sbci	r21, 0x00	; 0
    40f6:	a9 f7       	brne	.-22     	; 0x40e2 <__mulsf3_pse+0x64>
    40f8:	9e 3f       	cpi	r25, 0xFE	; 254
    40fa:	51 05       	cpc	r21, r1
    40fc:	70 f0       	brcs	.+28     	; 0x411a <__mulsf3_pse+0x9c>
    40fe:	5c cf       	rjmp	.-328    	; 0x3fb8 <__fp_inf>
    4100:	a6 cf       	rjmp	.-180    	; 0x404e <__fp_szero>
    4102:	5f 3f       	cpi	r21, 0xFF	; 255
    4104:	ec f3       	brlt	.-6      	; 0x4100 <__mulsf3_pse+0x82>
    4106:	98 3e       	cpi	r25, 0xE8	; 232
    4108:	dc f3       	brlt	.-10     	; 0x4100 <__mulsf3_pse+0x82>
    410a:	86 95       	lsr	r24
    410c:	77 95       	ror	r23
    410e:	67 95       	ror	r22
    4110:	b7 95       	ror	r27
    4112:	f7 95       	ror	r31
    4114:	e7 95       	ror	r30
    4116:	9f 5f       	subi	r25, 0xFF	; 255
    4118:	c1 f7       	brne	.-16     	; 0x410a <__mulsf3_pse+0x8c>
    411a:	fe 2b       	or	r31, r30
    411c:	88 0f       	add	r24, r24
    411e:	91 1d       	adc	r25, r1
    4120:	96 95       	lsr	r25
    4122:	87 95       	ror	r24
    4124:	97 f9       	bld	r25, 7
    4126:	08 95       	ret

00004128 <__fp_cmp>:
    4128:	99 0f       	add	r25, r25
    412a:	00 08       	sbc	r0, r0
    412c:	55 0f       	add	r21, r21
    412e:	aa 0b       	sbc	r26, r26
    4130:	e0 e8       	ldi	r30, 0x80	; 128
    4132:	fe ef       	ldi	r31, 0xFE	; 254
    4134:	16 16       	cp	r1, r22
    4136:	17 06       	cpc	r1, r23
    4138:	e8 07       	cpc	r30, r24
    413a:	f9 07       	cpc	r31, r25
    413c:	c0 f0       	brcs	.+48     	; 0x416e <__fp_cmp+0x46>
    413e:	12 16       	cp	r1, r18
    4140:	13 06       	cpc	r1, r19
    4142:	e4 07       	cpc	r30, r20
    4144:	f5 07       	cpc	r31, r21
    4146:	98 f0       	brcs	.+38     	; 0x416e <__fp_cmp+0x46>
    4148:	62 1b       	sub	r22, r18
    414a:	73 0b       	sbc	r23, r19
    414c:	84 0b       	sbc	r24, r20
    414e:	95 0b       	sbc	r25, r21
    4150:	39 f4       	brne	.+14     	; 0x4160 <__fp_cmp+0x38>
    4152:	0a 26       	eor	r0, r26
    4154:	61 f0       	breq	.+24     	; 0x416e <__fp_cmp+0x46>
    4156:	23 2b       	or	r18, r19
    4158:	24 2b       	or	r18, r20
    415a:	25 2b       	or	r18, r21
    415c:	21 f4       	brne	.+8      	; 0x4166 <__fp_cmp+0x3e>
    415e:	08 95       	ret
    4160:	0a 26       	eor	r0, r26
    4162:	09 f4       	brne	.+2      	; 0x4166 <__fp_cmp+0x3e>
    4164:	a1 40       	sbci	r26, 0x01	; 1
    4166:	a6 95       	lsr	r26
    4168:	8f ef       	ldi	r24, 0xFF	; 255
    416a:	81 1d       	adc	r24, r1
    416c:	81 1d       	adc	r24, r1
    416e:	08 95       	ret

00004170 <__mulsi3>:
    4170:	62 9f       	mul	r22, r18
    4172:	d0 01       	movw	r26, r0
    4174:	73 9f       	mul	r23, r19
    4176:	f0 01       	movw	r30, r0
    4178:	82 9f       	mul	r24, r18
    417a:	e0 0d       	add	r30, r0
    417c:	f1 1d       	adc	r31, r1
    417e:	64 9f       	mul	r22, r20
    4180:	e0 0d       	add	r30, r0
    4182:	f1 1d       	adc	r31, r1
    4184:	92 9f       	mul	r25, r18
    4186:	f0 0d       	add	r31, r0
    4188:	83 9f       	mul	r24, r19
    418a:	f0 0d       	add	r31, r0
    418c:	74 9f       	mul	r23, r20
    418e:	f0 0d       	add	r31, r0
    4190:	65 9f       	mul	r22, r21
    4192:	f0 0d       	add	r31, r0
    4194:	99 27       	eor	r25, r25
    4196:	72 9f       	mul	r23, r18
    4198:	b0 0d       	add	r27, r0
    419a:	e1 1d       	adc	r30, r1
    419c:	f9 1f       	adc	r31, r25
    419e:	63 9f       	mul	r22, r19
    41a0:	b0 0d       	add	r27, r0
    41a2:	e1 1d       	adc	r30, r1
    41a4:	f9 1f       	adc	r31, r25
    41a6:	bd 01       	movw	r22, r26
    41a8:	cf 01       	movw	r24, r30
    41aa:	11 24       	eor	r1, r1
    41ac:	08 95       	ret

000041ae <__udivmodsi4>:
    41ae:	a1 e2       	ldi	r26, 0x21	; 33
    41b0:	1a 2e       	mov	r1, r26
    41b2:	aa 1b       	sub	r26, r26
    41b4:	bb 1b       	sub	r27, r27
    41b6:	fd 01       	movw	r30, r26
    41b8:	0d c0       	rjmp	.+26     	; 0x41d4 <__udivmodsi4_ep>

000041ba <__udivmodsi4_loop>:
    41ba:	aa 1f       	adc	r26, r26
    41bc:	bb 1f       	adc	r27, r27
    41be:	ee 1f       	adc	r30, r30
    41c0:	ff 1f       	adc	r31, r31
    41c2:	a2 17       	cp	r26, r18
    41c4:	b3 07       	cpc	r27, r19
    41c6:	e4 07       	cpc	r30, r20
    41c8:	f5 07       	cpc	r31, r21
    41ca:	20 f0       	brcs	.+8      	; 0x41d4 <__udivmodsi4_ep>
    41cc:	a2 1b       	sub	r26, r18
    41ce:	b3 0b       	sbc	r27, r19
    41d0:	e4 0b       	sbc	r30, r20
    41d2:	f5 0b       	sbc	r31, r21

000041d4 <__udivmodsi4_ep>:
    41d4:	66 1f       	adc	r22, r22
    41d6:	77 1f       	adc	r23, r23
    41d8:	88 1f       	adc	r24, r24
    41da:	99 1f       	adc	r25, r25
    41dc:	1a 94       	dec	r1
    41de:	69 f7       	brne	.-38     	; 0x41ba <__udivmodsi4_loop>
    41e0:	60 95       	com	r22
    41e2:	70 95       	com	r23
    41e4:	80 95       	com	r24
    41e6:	90 95       	com	r25
    41e8:	9b 01       	movw	r18, r22
    41ea:	ac 01       	movw	r20, r24
    41ec:	bd 01       	movw	r22, r26
    41ee:	cf 01       	movw	r24, r30
    41f0:	08 95       	ret

000041f2 <atof>:
    41f2:	66 27       	eor	r22, r22
    41f4:	77 27       	eor	r23, r23
    41f6:	0c 94 3a 23 	jmp	0x4674	; 0x4674 <strtod>

000041fa <strtok>:
    41fa:	4a e6       	ldi	r20, 0x6A	; 106
    41fc:	52 e0       	ldi	r21, 0x02	; 2
    41fe:	0e 94 12 21 	call	0x4224	; 0x4224 <strtok_r>
    4202:	08 95       	ret

00004204 <strcmp>:
    4204:	fb 01       	movw	r30, r22
    4206:	dc 01       	movw	r26, r24
    4208:	8d 91       	ld	r24, X+
    420a:	01 90       	ld	r0, Z+
    420c:	80 19       	sub	r24, r0
    420e:	01 10       	cpse	r0, r1
    4210:	d9 f3       	breq	.-10     	; 0x4208 <strcmp+0x4>
    4212:	99 0b       	sbc	r25, r25
    4214:	08 95       	ret

00004216 <strcpy>:
    4216:	fb 01       	movw	r30, r22
    4218:	dc 01       	movw	r26, r24
    421a:	01 90       	ld	r0, Z+
    421c:	0d 92       	st	X+, r0
    421e:	00 20       	and	r0, r0
    4220:	e1 f7       	brne	.-8      	; 0x421a <strcpy+0x4>
    4222:	08 95       	ret

00004224 <strtok_r>:
    4224:	fa 01       	movw	r30, r20
    4226:	a1 91       	ld	r26, Z+
    4228:	b0 81       	ld	r27, Z
    422a:	00 97       	sbiw	r24, 0x00	; 0
    422c:	19 f4       	brne	.+6      	; 0x4234 <strtok_r+0x10>
    422e:	10 97       	sbiw	r26, 0x00	; 0
    4230:	e1 f0       	breq	.+56     	; 0x426a <strtok_r+0x46>
    4232:	cd 01       	movw	r24, r26
    4234:	dc 01       	movw	r26, r24
    4236:	cd 01       	movw	r24, r26
    4238:	0d 90       	ld	r0, X+
    423a:	00 20       	and	r0, r0
    423c:	11 f4       	brne	.+4      	; 0x4242 <strtok_r+0x1e>
    423e:	c0 01       	movw	r24, r0
    4240:	13 c0       	rjmp	.+38     	; 0x4268 <strtok_r+0x44>
    4242:	fb 01       	movw	r30, r22
    4244:	21 91       	ld	r18, Z+
    4246:	22 23       	and	r18, r18
    4248:	19 f0       	breq	.+6      	; 0x4250 <strtok_r+0x2c>
    424a:	20 15       	cp	r18, r0
    424c:	d9 f7       	brne	.-10     	; 0x4244 <strtok_r+0x20>
    424e:	f3 cf       	rjmp	.-26     	; 0x4236 <strtok_r+0x12>
    4250:	fb 01       	movw	r30, r22
    4252:	21 91       	ld	r18, Z+
    4254:	20 15       	cp	r18, r0
    4256:	19 f4       	brne	.+6      	; 0x425e <strtok_r+0x3a>
    4258:	1e 92       	st	-X, r1
    425a:	11 96       	adiw	r26, 0x01	; 1
    425c:	06 c0       	rjmp	.+12     	; 0x426a <strtok_r+0x46>
    425e:	22 23       	and	r18, r18
    4260:	c1 f7       	brne	.-16     	; 0x4252 <strtok_r+0x2e>
    4262:	0d 90       	ld	r0, X+
    4264:	00 20       	and	r0, r0
    4266:	a1 f7       	brne	.-24     	; 0x4250 <strtok_r+0x2c>
    4268:	d0 01       	movw	r26, r0
    426a:	fa 01       	movw	r30, r20
    426c:	a1 93       	st	Z+, r26
    426e:	b0 83       	st	Z, r27
    4270:	08 95       	ret

00004272 <sprintf>:
    4272:	ae e0       	ldi	r26, 0x0E	; 14
    4274:	b0 e0       	ldi	r27, 0x00	; 0
    4276:	ef e3       	ldi	r30, 0x3F	; 63
    4278:	f1 e2       	ldi	r31, 0x21	; 33
    427a:	0c 94 6f 25 	jmp	0x4ade	; 0x4ade <__prologue_saves__+0x1c>
    427e:	0d 89       	ldd	r16, Y+21	; 0x15
    4280:	1e 89       	ldd	r17, Y+22	; 0x16
    4282:	86 e0       	ldi	r24, 0x06	; 6
    4284:	8c 83       	std	Y+4, r24	; 0x04
    4286:	1a 83       	std	Y+2, r17	; 0x02
    4288:	09 83       	std	Y+1, r16	; 0x01
    428a:	8f ef       	ldi	r24, 0xFF	; 255
    428c:	9f e7       	ldi	r25, 0x7F	; 127
    428e:	9e 83       	std	Y+6, r25	; 0x06
    4290:	8d 83       	std	Y+5, r24	; 0x05
    4292:	9e 01       	movw	r18, r28
    4294:	27 5e       	subi	r18, 0xE7	; 231
    4296:	3f 4f       	sbci	r19, 0xFF	; 255
    4298:	ce 01       	movw	r24, r28
    429a:	01 96       	adiw	r24, 0x01	; 1
    429c:	6f 89       	ldd	r22, Y+23	; 0x17
    429e:	78 8d       	ldd	r23, Y+24	; 0x18
    42a0:	a9 01       	movw	r20, r18
    42a2:	0e 94 5d 21 	call	0x42ba	; 0x42ba <vfprintf>
    42a6:	2f 81       	ldd	r18, Y+7	; 0x07
    42a8:	38 85       	ldd	r19, Y+8	; 0x08
    42aa:	02 0f       	add	r16, r18
    42ac:	13 1f       	adc	r17, r19
    42ae:	f8 01       	movw	r30, r16
    42b0:	10 82       	st	Z, r1
    42b2:	2e 96       	adiw	r28, 0x0e	; 14
    42b4:	e4 e0       	ldi	r30, 0x04	; 4
    42b6:	0c 94 8b 25 	jmp	0x4b16	; 0x4b16 <__epilogue_restores__+0x1c>

000042ba <vfprintf>:
    42ba:	ab e0       	ldi	r26, 0x0B	; 11
    42bc:	b0 e0       	ldi	r27, 0x00	; 0
    42be:	e3 e6       	ldi	r30, 0x63	; 99
    42c0:	f1 e2       	ldi	r31, 0x21	; 33
    42c2:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__prologue_saves__>
    42c6:	3c 01       	movw	r6, r24
    42c8:	2b 01       	movw	r4, r22
    42ca:	5a 01       	movw	r10, r20
    42cc:	fc 01       	movw	r30, r24
    42ce:	17 82       	std	Z+7, r1	; 0x07
    42d0:	16 82       	std	Z+6, r1	; 0x06
    42d2:	83 81       	ldd	r24, Z+3	; 0x03
    42d4:	81 fd       	sbrc	r24, 1
    42d6:	03 c0       	rjmp	.+6      	; 0x42de <vfprintf+0x24>
    42d8:	6f ef       	ldi	r22, 0xFF	; 255
    42da:	7f ef       	ldi	r23, 0xFF	; 255
    42dc:	c6 c1       	rjmp	.+908    	; 0x466a <vfprintf+0x3b0>
    42de:	9a e0       	ldi	r25, 0x0A	; 10
    42e0:	89 2e       	mov	r8, r25
    42e2:	1e 01       	movw	r2, r28
    42e4:	08 94       	sec
    42e6:	21 1c       	adc	r2, r1
    42e8:	31 1c       	adc	r3, r1
    42ea:	f3 01       	movw	r30, r6
    42ec:	23 81       	ldd	r18, Z+3	; 0x03
    42ee:	f2 01       	movw	r30, r4
    42f0:	23 fd       	sbrc	r18, 3
    42f2:	85 91       	lpm	r24, Z+
    42f4:	23 ff       	sbrs	r18, 3
    42f6:	81 91       	ld	r24, Z+
    42f8:	2f 01       	movw	r4, r30
    42fa:	88 23       	and	r24, r24
    42fc:	09 f4       	brne	.+2      	; 0x4300 <vfprintf+0x46>
    42fe:	b2 c1       	rjmp	.+868    	; 0x4664 <vfprintf+0x3aa>
    4300:	85 32       	cpi	r24, 0x25	; 37
    4302:	39 f4       	brne	.+14     	; 0x4312 <vfprintf+0x58>
    4304:	23 fd       	sbrc	r18, 3
    4306:	85 91       	lpm	r24, Z+
    4308:	23 ff       	sbrs	r18, 3
    430a:	81 91       	ld	r24, Z+
    430c:	2f 01       	movw	r4, r30
    430e:	85 32       	cpi	r24, 0x25	; 37
    4310:	29 f4       	brne	.+10     	; 0x431c <vfprintf+0x62>
    4312:	90 e0       	ldi	r25, 0x00	; 0
    4314:	b3 01       	movw	r22, r6
    4316:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    431a:	e7 cf       	rjmp	.-50     	; 0x42ea <vfprintf+0x30>
    431c:	98 2f       	mov	r25, r24
    431e:	ff 24       	eor	r15, r15
    4320:	ee 24       	eor	r14, r14
    4322:	99 24       	eor	r9, r9
    4324:	ff e1       	ldi	r31, 0x1F	; 31
    4326:	ff 15       	cp	r31, r15
    4328:	d0 f0       	brcs	.+52     	; 0x435e <vfprintf+0xa4>
    432a:	9b 32       	cpi	r25, 0x2B	; 43
    432c:	69 f0       	breq	.+26     	; 0x4348 <vfprintf+0x8e>
    432e:	9c 32       	cpi	r25, 0x2C	; 44
    4330:	28 f4       	brcc	.+10     	; 0x433c <vfprintf+0x82>
    4332:	90 32       	cpi	r25, 0x20	; 32
    4334:	59 f0       	breq	.+22     	; 0x434c <vfprintf+0x92>
    4336:	93 32       	cpi	r25, 0x23	; 35
    4338:	91 f4       	brne	.+36     	; 0x435e <vfprintf+0xa4>
    433a:	0e c0       	rjmp	.+28     	; 0x4358 <vfprintf+0x9e>
    433c:	9d 32       	cpi	r25, 0x2D	; 45
    433e:	49 f0       	breq	.+18     	; 0x4352 <vfprintf+0x98>
    4340:	90 33       	cpi	r25, 0x30	; 48
    4342:	69 f4       	brne	.+26     	; 0x435e <vfprintf+0xa4>
    4344:	41 e0       	ldi	r20, 0x01	; 1
    4346:	24 c0       	rjmp	.+72     	; 0x4390 <vfprintf+0xd6>
    4348:	52 e0       	ldi	r21, 0x02	; 2
    434a:	f5 2a       	or	r15, r21
    434c:	84 e0       	ldi	r24, 0x04	; 4
    434e:	f8 2a       	or	r15, r24
    4350:	28 c0       	rjmp	.+80     	; 0x43a2 <vfprintf+0xe8>
    4352:	98 e0       	ldi	r25, 0x08	; 8
    4354:	f9 2a       	or	r15, r25
    4356:	25 c0       	rjmp	.+74     	; 0x43a2 <vfprintf+0xe8>
    4358:	e0 e1       	ldi	r30, 0x10	; 16
    435a:	fe 2a       	or	r15, r30
    435c:	22 c0       	rjmp	.+68     	; 0x43a2 <vfprintf+0xe8>
    435e:	f7 fc       	sbrc	r15, 7
    4360:	29 c0       	rjmp	.+82     	; 0x43b4 <vfprintf+0xfa>
    4362:	89 2f       	mov	r24, r25
    4364:	80 53       	subi	r24, 0x30	; 48
    4366:	8a 30       	cpi	r24, 0x0A	; 10
    4368:	70 f4       	brcc	.+28     	; 0x4386 <vfprintf+0xcc>
    436a:	f6 fe       	sbrs	r15, 6
    436c:	05 c0       	rjmp	.+10     	; 0x4378 <vfprintf+0xbe>
    436e:	98 9c       	mul	r9, r8
    4370:	90 2c       	mov	r9, r0
    4372:	11 24       	eor	r1, r1
    4374:	98 0e       	add	r9, r24
    4376:	15 c0       	rjmp	.+42     	; 0x43a2 <vfprintf+0xe8>
    4378:	e8 9c       	mul	r14, r8
    437a:	e0 2c       	mov	r14, r0
    437c:	11 24       	eor	r1, r1
    437e:	e8 0e       	add	r14, r24
    4380:	f0 e2       	ldi	r31, 0x20	; 32
    4382:	ff 2a       	or	r15, r31
    4384:	0e c0       	rjmp	.+28     	; 0x43a2 <vfprintf+0xe8>
    4386:	9e 32       	cpi	r25, 0x2E	; 46
    4388:	29 f4       	brne	.+10     	; 0x4394 <vfprintf+0xda>
    438a:	f6 fc       	sbrc	r15, 6
    438c:	6b c1       	rjmp	.+726    	; 0x4664 <vfprintf+0x3aa>
    438e:	40 e4       	ldi	r20, 0x40	; 64
    4390:	f4 2a       	or	r15, r20
    4392:	07 c0       	rjmp	.+14     	; 0x43a2 <vfprintf+0xe8>
    4394:	9c 36       	cpi	r25, 0x6C	; 108
    4396:	19 f4       	brne	.+6      	; 0x439e <vfprintf+0xe4>
    4398:	50 e8       	ldi	r21, 0x80	; 128
    439a:	f5 2a       	or	r15, r21
    439c:	02 c0       	rjmp	.+4      	; 0x43a2 <vfprintf+0xe8>
    439e:	98 36       	cpi	r25, 0x68	; 104
    43a0:	49 f4       	brne	.+18     	; 0x43b4 <vfprintf+0xfa>
    43a2:	f2 01       	movw	r30, r4
    43a4:	23 fd       	sbrc	r18, 3
    43a6:	95 91       	lpm	r25, Z+
    43a8:	23 ff       	sbrs	r18, 3
    43aa:	91 91       	ld	r25, Z+
    43ac:	2f 01       	movw	r4, r30
    43ae:	99 23       	and	r25, r25
    43b0:	09 f0       	breq	.+2      	; 0x43b4 <vfprintf+0xfa>
    43b2:	b8 cf       	rjmp	.-144    	; 0x4324 <vfprintf+0x6a>
    43b4:	89 2f       	mov	r24, r25
    43b6:	85 54       	subi	r24, 0x45	; 69
    43b8:	83 30       	cpi	r24, 0x03	; 3
    43ba:	18 f0       	brcs	.+6      	; 0x43c2 <vfprintf+0x108>
    43bc:	80 52       	subi	r24, 0x20	; 32
    43be:	83 30       	cpi	r24, 0x03	; 3
    43c0:	38 f4       	brcc	.+14     	; 0x43d0 <vfprintf+0x116>
    43c2:	44 e0       	ldi	r20, 0x04	; 4
    43c4:	50 e0       	ldi	r21, 0x00	; 0
    43c6:	a4 0e       	add	r10, r20
    43c8:	b5 1e       	adc	r11, r21
    43ca:	5f e3       	ldi	r21, 0x3F	; 63
    43cc:	59 83       	std	Y+1, r21	; 0x01
    43ce:	0f c0       	rjmp	.+30     	; 0x43ee <vfprintf+0x134>
    43d0:	93 36       	cpi	r25, 0x63	; 99
    43d2:	31 f0       	breq	.+12     	; 0x43e0 <vfprintf+0x126>
    43d4:	93 37       	cpi	r25, 0x73	; 115
    43d6:	79 f0       	breq	.+30     	; 0x43f6 <vfprintf+0x13c>
    43d8:	93 35       	cpi	r25, 0x53	; 83
    43da:	09 f0       	breq	.+2      	; 0x43de <vfprintf+0x124>
    43dc:	56 c0       	rjmp	.+172    	; 0x448a <vfprintf+0x1d0>
    43de:	20 c0       	rjmp	.+64     	; 0x4420 <vfprintf+0x166>
    43e0:	f5 01       	movw	r30, r10
    43e2:	80 81       	ld	r24, Z
    43e4:	89 83       	std	Y+1, r24	; 0x01
    43e6:	42 e0       	ldi	r20, 0x02	; 2
    43e8:	50 e0       	ldi	r21, 0x00	; 0
    43ea:	a4 0e       	add	r10, r20
    43ec:	b5 1e       	adc	r11, r21
    43ee:	61 01       	movw	r12, r2
    43f0:	01 e0       	ldi	r16, 0x01	; 1
    43f2:	10 e0       	ldi	r17, 0x00	; 0
    43f4:	12 c0       	rjmp	.+36     	; 0x441a <vfprintf+0x160>
    43f6:	f5 01       	movw	r30, r10
    43f8:	c0 80       	ld	r12, Z
    43fa:	d1 80       	ldd	r13, Z+1	; 0x01
    43fc:	f6 fc       	sbrc	r15, 6
    43fe:	03 c0       	rjmp	.+6      	; 0x4406 <vfprintf+0x14c>
    4400:	6f ef       	ldi	r22, 0xFF	; 255
    4402:	7f ef       	ldi	r23, 0xFF	; 255
    4404:	02 c0       	rjmp	.+4      	; 0x440a <vfprintf+0x150>
    4406:	69 2d       	mov	r22, r9
    4408:	70 e0       	ldi	r23, 0x00	; 0
    440a:	42 e0       	ldi	r20, 0x02	; 2
    440c:	50 e0       	ldi	r21, 0x00	; 0
    440e:	a4 0e       	add	r10, r20
    4410:	b5 1e       	adc	r11, r21
    4412:	c6 01       	movw	r24, r12
    4414:	0e 94 c5 24 	call	0x498a	; 0x498a <strnlen>
    4418:	8c 01       	movw	r16, r24
    441a:	5f e7       	ldi	r21, 0x7F	; 127
    441c:	f5 22       	and	r15, r21
    441e:	14 c0       	rjmp	.+40     	; 0x4448 <vfprintf+0x18e>
    4420:	f5 01       	movw	r30, r10
    4422:	c0 80       	ld	r12, Z
    4424:	d1 80       	ldd	r13, Z+1	; 0x01
    4426:	f6 fc       	sbrc	r15, 6
    4428:	03 c0       	rjmp	.+6      	; 0x4430 <vfprintf+0x176>
    442a:	6f ef       	ldi	r22, 0xFF	; 255
    442c:	7f ef       	ldi	r23, 0xFF	; 255
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <vfprintf+0x17a>
    4430:	69 2d       	mov	r22, r9
    4432:	70 e0       	ldi	r23, 0x00	; 0
    4434:	42 e0       	ldi	r20, 0x02	; 2
    4436:	50 e0       	ldi	r21, 0x00	; 0
    4438:	a4 0e       	add	r10, r20
    443a:	b5 1e       	adc	r11, r21
    443c:	c6 01       	movw	r24, r12
    443e:	0e 94 ba 24 	call	0x4974	; 0x4974 <strnlen_P>
    4442:	8c 01       	movw	r16, r24
    4444:	50 e8       	ldi	r21, 0x80	; 128
    4446:	f5 2a       	or	r15, r21
    4448:	f3 fe       	sbrs	r15, 3
    444a:	07 c0       	rjmp	.+14     	; 0x445a <vfprintf+0x1a0>
    444c:	1a c0       	rjmp	.+52     	; 0x4482 <vfprintf+0x1c8>
    444e:	80 e2       	ldi	r24, 0x20	; 32
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	b3 01       	movw	r22, r6
    4454:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    4458:	ea 94       	dec	r14
    445a:	8e 2d       	mov	r24, r14
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	08 17       	cp	r16, r24
    4460:	19 07       	cpc	r17, r25
    4462:	a8 f3       	brcs	.-22     	; 0x444e <vfprintf+0x194>
    4464:	0e c0       	rjmp	.+28     	; 0x4482 <vfprintf+0x1c8>
    4466:	f6 01       	movw	r30, r12
    4468:	f7 fc       	sbrc	r15, 7
    446a:	85 91       	lpm	r24, Z+
    446c:	f7 fe       	sbrs	r15, 7
    446e:	81 91       	ld	r24, Z+
    4470:	6f 01       	movw	r12, r30
    4472:	90 e0       	ldi	r25, 0x00	; 0
    4474:	b3 01       	movw	r22, r6
    4476:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    447a:	e1 10       	cpse	r14, r1
    447c:	ea 94       	dec	r14
    447e:	01 50       	subi	r16, 0x01	; 1
    4480:	10 40       	sbci	r17, 0x00	; 0
    4482:	01 15       	cp	r16, r1
    4484:	11 05       	cpc	r17, r1
    4486:	79 f7       	brne	.-34     	; 0x4466 <vfprintf+0x1ac>
    4488:	ea c0       	rjmp	.+468    	; 0x465e <vfprintf+0x3a4>
    448a:	94 36       	cpi	r25, 0x64	; 100
    448c:	11 f0       	breq	.+4      	; 0x4492 <vfprintf+0x1d8>
    448e:	99 36       	cpi	r25, 0x69	; 105
    4490:	69 f5       	brne	.+90     	; 0x44ec <vfprintf+0x232>
    4492:	f7 fe       	sbrs	r15, 7
    4494:	08 c0       	rjmp	.+16     	; 0x44a6 <vfprintf+0x1ec>
    4496:	f5 01       	movw	r30, r10
    4498:	20 81       	ld	r18, Z
    449a:	31 81       	ldd	r19, Z+1	; 0x01
    449c:	42 81       	ldd	r20, Z+2	; 0x02
    449e:	53 81       	ldd	r21, Z+3	; 0x03
    44a0:	84 e0       	ldi	r24, 0x04	; 4
    44a2:	90 e0       	ldi	r25, 0x00	; 0
    44a4:	0a c0       	rjmp	.+20     	; 0x44ba <vfprintf+0x200>
    44a6:	f5 01       	movw	r30, r10
    44a8:	80 81       	ld	r24, Z
    44aa:	91 81       	ldd	r25, Z+1	; 0x01
    44ac:	9c 01       	movw	r18, r24
    44ae:	44 27       	eor	r20, r20
    44b0:	37 fd       	sbrc	r19, 7
    44b2:	40 95       	com	r20
    44b4:	54 2f       	mov	r21, r20
    44b6:	82 e0       	ldi	r24, 0x02	; 2
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	a8 0e       	add	r10, r24
    44bc:	b9 1e       	adc	r11, r25
    44be:	9f e6       	ldi	r25, 0x6F	; 111
    44c0:	f9 22       	and	r15, r25
    44c2:	57 ff       	sbrs	r21, 7
    44c4:	09 c0       	rjmp	.+18     	; 0x44d8 <vfprintf+0x21e>
    44c6:	50 95       	com	r21
    44c8:	40 95       	com	r20
    44ca:	30 95       	com	r19
    44cc:	21 95       	neg	r18
    44ce:	3f 4f       	sbci	r19, 0xFF	; 255
    44d0:	4f 4f       	sbci	r20, 0xFF	; 255
    44d2:	5f 4f       	sbci	r21, 0xFF	; 255
    44d4:	e0 e8       	ldi	r30, 0x80	; 128
    44d6:	fe 2a       	or	r15, r30
    44d8:	ca 01       	movw	r24, r20
    44da:	b9 01       	movw	r22, r18
    44dc:	a1 01       	movw	r20, r2
    44de:	2a e0       	ldi	r18, 0x0A	; 10
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <__ultoa_invert>
    44e6:	d8 2e       	mov	r13, r24
    44e8:	d2 18       	sub	r13, r2
    44ea:	40 c0       	rjmp	.+128    	; 0x456c <vfprintf+0x2b2>
    44ec:	95 37       	cpi	r25, 0x75	; 117
    44ee:	29 f4       	brne	.+10     	; 0x44fa <vfprintf+0x240>
    44f0:	1f 2d       	mov	r17, r15
    44f2:	1f 7e       	andi	r17, 0xEF	; 239
    44f4:	2a e0       	ldi	r18, 0x0A	; 10
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	1d c0       	rjmp	.+58     	; 0x4534 <vfprintf+0x27a>
    44fa:	1f 2d       	mov	r17, r15
    44fc:	19 7f       	andi	r17, 0xF9	; 249
    44fe:	9f 36       	cpi	r25, 0x6F	; 111
    4500:	61 f0       	breq	.+24     	; 0x451a <vfprintf+0x260>
    4502:	90 37       	cpi	r25, 0x70	; 112
    4504:	20 f4       	brcc	.+8      	; 0x450e <vfprintf+0x254>
    4506:	98 35       	cpi	r25, 0x58	; 88
    4508:	09 f0       	breq	.+2      	; 0x450c <vfprintf+0x252>
    450a:	ac c0       	rjmp	.+344    	; 0x4664 <vfprintf+0x3aa>
    450c:	0f c0       	rjmp	.+30     	; 0x452c <vfprintf+0x272>
    450e:	90 37       	cpi	r25, 0x70	; 112
    4510:	39 f0       	breq	.+14     	; 0x4520 <vfprintf+0x266>
    4512:	98 37       	cpi	r25, 0x78	; 120
    4514:	09 f0       	breq	.+2      	; 0x4518 <vfprintf+0x25e>
    4516:	a6 c0       	rjmp	.+332    	; 0x4664 <vfprintf+0x3aa>
    4518:	04 c0       	rjmp	.+8      	; 0x4522 <vfprintf+0x268>
    451a:	28 e0       	ldi	r18, 0x08	; 8
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	0a c0       	rjmp	.+20     	; 0x4534 <vfprintf+0x27a>
    4520:	10 61       	ori	r17, 0x10	; 16
    4522:	14 fd       	sbrc	r17, 4
    4524:	14 60       	ori	r17, 0x04	; 4
    4526:	20 e1       	ldi	r18, 0x10	; 16
    4528:	30 e0       	ldi	r19, 0x00	; 0
    452a:	04 c0       	rjmp	.+8      	; 0x4534 <vfprintf+0x27a>
    452c:	14 fd       	sbrc	r17, 4
    452e:	16 60       	ori	r17, 0x06	; 6
    4530:	20 e1       	ldi	r18, 0x10	; 16
    4532:	32 e0       	ldi	r19, 0x02	; 2
    4534:	17 ff       	sbrs	r17, 7
    4536:	08 c0       	rjmp	.+16     	; 0x4548 <vfprintf+0x28e>
    4538:	f5 01       	movw	r30, r10
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	44 e0       	ldi	r20, 0x04	; 4
    4544:	50 e0       	ldi	r21, 0x00	; 0
    4546:	08 c0       	rjmp	.+16     	; 0x4558 <vfprintf+0x29e>
    4548:	f5 01       	movw	r30, r10
    454a:	80 81       	ld	r24, Z
    454c:	91 81       	ldd	r25, Z+1	; 0x01
    454e:	bc 01       	movw	r22, r24
    4550:	80 e0       	ldi	r24, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	42 e0       	ldi	r20, 0x02	; 2
    4556:	50 e0       	ldi	r21, 0x00	; 0
    4558:	a4 0e       	add	r10, r20
    455a:	b5 1e       	adc	r11, r21
    455c:	a1 01       	movw	r20, r2
    455e:	0e 94 fc 24 	call	0x49f8	; 0x49f8 <__ultoa_invert>
    4562:	d8 2e       	mov	r13, r24
    4564:	d2 18       	sub	r13, r2
    4566:	8f e7       	ldi	r24, 0x7F	; 127
    4568:	f8 2e       	mov	r15, r24
    456a:	f1 22       	and	r15, r17
    456c:	f6 fe       	sbrs	r15, 6
    456e:	0b c0       	rjmp	.+22     	; 0x4586 <vfprintf+0x2cc>
    4570:	5e ef       	ldi	r21, 0xFE	; 254
    4572:	f5 22       	and	r15, r21
    4574:	d9 14       	cp	r13, r9
    4576:	38 f4       	brcc	.+14     	; 0x4586 <vfprintf+0x2cc>
    4578:	f4 fe       	sbrs	r15, 4
    457a:	07 c0       	rjmp	.+14     	; 0x458a <vfprintf+0x2d0>
    457c:	f2 fc       	sbrc	r15, 2
    457e:	05 c0       	rjmp	.+10     	; 0x458a <vfprintf+0x2d0>
    4580:	8f ee       	ldi	r24, 0xEF	; 239
    4582:	f8 22       	and	r15, r24
    4584:	02 c0       	rjmp	.+4      	; 0x458a <vfprintf+0x2d0>
    4586:	1d 2d       	mov	r17, r13
    4588:	01 c0       	rjmp	.+2      	; 0x458c <vfprintf+0x2d2>
    458a:	19 2d       	mov	r17, r9
    458c:	f4 fe       	sbrs	r15, 4
    458e:	0d c0       	rjmp	.+26     	; 0x45aa <vfprintf+0x2f0>
    4590:	fe 01       	movw	r30, r28
    4592:	ed 0d       	add	r30, r13
    4594:	f1 1d       	adc	r31, r1
    4596:	80 81       	ld	r24, Z
    4598:	80 33       	cpi	r24, 0x30	; 48
    459a:	19 f4       	brne	.+6      	; 0x45a2 <vfprintf+0x2e8>
    459c:	99 ee       	ldi	r25, 0xE9	; 233
    459e:	f9 22       	and	r15, r25
    45a0:	08 c0       	rjmp	.+16     	; 0x45b2 <vfprintf+0x2f8>
    45a2:	1f 5f       	subi	r17, 0xFF	; 255
    45a4:	f2 fe       	sbrs	r15, 2
    45a6:	05 c0       	rjmp	.+10     	; 0x45b2 <vfprintf+0x2f8>
    45a8:	03 c0       	rjmp	.+6      	; 0x45b0 <vfprintf+0x2f6>
    45aa:	8f 2d       	mov	r24, r15
    45ac:	86 78       	andi	r24, 0x86	; 134
    45ae:	09 f0       	breq	.+2      	; 0x45b2 <vfprintf+0x2f8>
    45b0:	1f 5f       	subi	r17, 0xFF	; 255
    45b2:	0f 2d       	mov	r16, r15
    45b4:	f3 fc       	sbrc	r15, 3
    45b6:	14 c0       	rjmp	.+40     	; 0x45e0 <vfprintf+0x326>
    45b8:	f0 fe       	sbrs	r15, 0
    45ba:	0f c0       	rjmp	.+30     	; 0x45da <vfprintf+0x320>
    45bc:	1e 15       	cp	r17, r14
    45be:	10 f0       	brcs	.+4      	; 0x45c4 <vfprintf+0x30a>
    45c0:	9d 2c       	mov	r9, r13
    45c2:	0b c0       	rjmp	.+22     	; 0x45da <vfprintf+0x320>
    45c4:	9d 2c       	mov	r9, r13
    45c6:	9e 0c       	add	r9, r14
    45c8:	91 1a       	sub	r9, r17
    45ca:	1e 2d       	mov	r17, r14
    45cc:	06 c0       	rjmp	.+12     	; 0x45da <vfprintf+0x320>
    45ce:	80 e2       	ldi	r24, 0x20	; 32
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	b3 01       	movw	r22, r6
    45d4:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    45d8:	1f 5f       	subi	r17, 0xFF	; 255
    45da:	1e 15       	cp	r17, r14
    45dc:	c0 f3       	brcs	.-16     	; 0x45ce <vfprintf+0x314>
    45de:	04 c0       	rjmp	.+8      	; 0x45e8 <vfprintf+0x32e>
    45e0:	1e 15       	cp	r17, r14
    45e2:	10 f4       	brcc	.+4      	; 0x45e8 <vfprintf+0x32e>
    45e4:	e1 1a       	sub	r14, r17
    45e6:	01 c0       	rjmp	.+2      	; 0x45ea <vfprintf+0x330>
    45e8:	ee 24       	eor	r14, r14
    45ea:	04 ff       	sbrs	r16, 4
    45ec:	0f c0       	rjmp	.+30     	; 0x460c <vfprintf+0x352>
    45ee:	80 e3       	ldi	r24, 0x30	; 48
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	b3 01       	movw	r22, r6
    45f4:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    45f8:	02 ff       	sbrs	r16, 2
    45fa:	1d c0       	rjmp	.+58     	; 0x4636 <vfprintf+0x37c>
    45fc:	01 fd       	sbrc	r16, 1
    45fe:	03 c0       	rjmp	.+6      	; 0x4606 <vfprintf+0x34c>
    4600:	88 e7       	ldi	r24, 0x78	; 120
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	0e c0       	rjmp	.+28     	; 0x4622 <vfprintf+0x368>
    4606:	88 e5       	ldi	r24, 0x58	; 88
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0b c0       	rjmp	.+22     	; 0x4622 <vfprintf+0x368>
    460c:	80 2f       	mov	r24, r16
    460e:	86 78       	andi	r24, 0x86	; 134
    4610:	91 f0       	breq	.+36     	; 0x4636 <vfprintf+0x37c>
    4612:	01 ff       	sbrs	r16, 1
    4614:	02 c0       	rjmp	.+4      	; 0x461a <vfprintf+0x360>
    4616:	8b e2       	ldi	r24, 0x2B	; 43
    4618:	01 c0       	rjmp	.+2      	; 0x461c <vfprintf+0x362>
    461a:	80 e2       	ldi	r24, 0x20	; 32
    461c:	f7 fc       	sbrc	r15, 7
    461e:	8d e2       	ldi	r24, 0x2D	; 45
    4620:	90 e0       	ldi	r25, 0x00	; 0
    4622:	b3 01       	movw	r22, r6
    4624:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    4628:	06 c0       	rjmp	.+12     	; 0x4636 <vfprintf+0x37c>
    462a:	80 e3       	ldi	r24, 0x30	; 48
    462c:	90 e0       	ldi	r25, 0x00	; 0
    462e:	b3 01       	movw	r22, r6
    4630:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    4634:	9a 94       	dec	r9
    4636:	d9 14       	cp	r13, r9
    4638:	c0 f3       	brcs	.-16     	; 0x462a <vfprintf+0x370>
    463a:	da 94       	dec	r13
    463c:	f1 01       	movw	r30, r2
    463e:	ed 0d       	add	r30, r13
    4640:	f1 1d       	adc	r31, r1
    4642:	80 81       	ld	r24, Z
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	b3 01       	movw	r22, r6
    4648:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    464c:	dd 20       	and	r13, r13
    464e:	a9 f7       	brne	.-22     	; 0x463a <vfprintf+0x380>
    4650:	06 c0       	rjmp	.+12     	; 0x465e <vfprintf+0x3a4>
    4652:	80 e2       	ldi	r24, 0x20	; 32
    4654:	90 e0       	ldi	r25, 0x00	; 0
    4656:	b3 01       	movw	r22, r6
    4658:	0e 94 d0 24 	call	0x49a0	; 0x49a0 <fputc>
    465c:	ea 94       	dec	r14
    465e:	ee 20       	and	r14, r14
    4660:	c1 f7       	brne	.-16     	; 0x4652 <vfprintf+0x398>
    4662:	43 ce       	rjmp	.-890    	; 0x42ea <vfprintf+0x30>
    4664:	f3 01       	movw	r30, r6
    4666:	66 81       	ldd	r22, Z+6	; 0x06
    4668:	77 81       	ldd	r23, Z+7	; 0x07
    466a:	cb 01       	movw	r24, r22
    466c:	2b 96       	adiw	r28, 0x0b	; 11
    466e:	e2 e1       	ldi	r30, 0x12	; 18
    4670:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__epilogue_restores__>

00004674 <strtod>:
    4674:	a0 e0       	ldi	r26, 0x00	; 0
    4676:	b0 e0       	ldi	r27, 0x00	; 0
    4678:	e0 e4       	ldi	r30, 0x40	; 64
    467a:	f3 e2       	ldi	r31, 0x23	; 35
    467c:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__prologue_saves__+0xc>
    4680:	ec 01       	movw	r28, r24
    4682:	5b 01       	movw	r10, r22
    4684:	61 15       	cp	r22, r1
    4686:	71 05       	cpc	r23, r1
    4688:	19 f0       	breq	.+6      	; 0x4690 <strtod+0x1c>
    468a:	fb 01       	movw	r30, r22
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	80 83       	st	Z, r24
    4690:	f9 90       	ld	r15, Y+
    4692:	8f 2d       	mov	r24, r15
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	0e 94 9a 24 	call	0x4934	; 0x4934 <isspace>
    469a:	89 2b       	or	r24, r25
    469c:	c9 f7       	brne	.-14     	; 0x4690 <strtod+0x1c>
    469e:	fd e2       	ldi	r31, 0x2D	; 45
    46a0:	ff 16       	cp	r15, r31
    46a2:	21 f4       	brne	.+8      	; 0x46ac <strtod+0x38>
    46a4:	f9 90       	ld	r15, Y+
    46a6:	ee 24       	eor	r14, r14
    46a8:	e3 94       	inc	r14
    46aa:	05 c0       	rjmp	.+10     	; 0x46b6 <strtod+0x42>
    46ac:	2b e2       	ldi	r18, 0x2B	; 43
    46ae:	f2 16       	cp	r15, r18
    46b0:	09 f4       	brne	.+2      	; 0x46b4 <strtod+0x40>
    46b2:	f9 90       	ld	r15, Y+
    46b4:	ee 24       	eor	r14, r14
    46b6:	8e 01       	movw	r16, r28
    46b8:	01 50       	subi	r16, 0x01	; 1
    46ba:	10 40       	sbci	r17, 0x00	; 0
    46bc:	c8 01       	movw	r24, r16
    46be:	67 e0       	ldi	r22, 0x07	; 7
    46c0:	73 e0       	ldi	r23, 0x03	; 3
    46c2:	43 e0       	ldi	r20, 0x03	; 3
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	0e 94 a2 24 	call	0x4944	; 0x4944 <strncasecmp_P>
    46ca:	89 2b       	or	r24, r25
    46cc:	01 f5       	brne	.+64     	; 0x470e <strtod+0x9a>
    46ce:	8e 01       	movw	r16, r28
    46d0:	0e 5f       	subi	r16, 0xFE	; 254
    46d2:	1f 4f       	sbci	r17, 0xFF	; 255
    46d4:	c8 01       	movw	r24, r16
    46d6:	6a e0       	ldi	r22, 0x0A	; 10
    46d8:	73 e0       	ldi	r23, 0x03	; 3
    46da:	45 e0       	ldi	r20, 0x05	; 5
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	0e 94 a2 24 	call	0x4944	; 0x4944 <strncasecmp_P>
    46e2:	89 2b       	or	r24, r25
    46e4:	19 f4       	brne	.+6      	; 0x46ec <strtod+0x78>
    46e6:	8e 01       	movw	r16, r28
    46e8:	09 5f       	subi	r16, 0xF9	; 249
    46ea:	1f 4f       	sbci	r17, 0xFF	; 255
    46ec:	a1 14       	cp	r10, r1
    46ee:	b1 04       	cpc	r11, r1
    46f0:	19 f0       	breq	.+6      	; 0x46f8 <strtod+0x84>
    46f2:	f5 01       	movw	r30, r10
    46f4:	11 83       	std	Z+1, r17	; 0x01
    46f6:	00 83       	st	Z, r16
    46f8:	e0 fc       	sbrc	r14, 0
    46fa:	04 c0       	rjmp	.+8      	; 0x4704 <strtod+0x90>
    46fc:	70 e0       	ldi	r23, 0x00	; 0
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	80 e8       	ldi	r24, 0x80	; 128
    4702:	14 c0       	rjmp	.+40     	; 0x472c <strtod+0xb8>
    4704:	70 e0       	ldi	r23, 0x00	; 0
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	80 e8       	ldi	r24, 0x80	; 128
    470a:	6f ef       	ldi	r22, 0xFF	; 255
    470c:	08 c1       	rjmp	.+528    	; 0x491e <strtod+0x2aa>
    470e:	c8 01       	movw	r24, r16
    4710:	6f e0       	ldi	r22, 0x0F	; 15
    4712:	73 e0       	ldi	r23, 0x03	; 3
    4714:	43 e0       	ldi	r20, 0x03	; 3
    4716:	50 e0       	ldi	r21, 0x00	; 0
    4718:	0e 94 a2 24 	call	0x4944	; 0x4944 <strncasecmp_P>
    471c:	89 2b       	or	r24, r25
    471e:	69 f4       	brne	.+26     	; 0x473a <strtod+0xc6>
    4720:	a1 14       	cp	r10, r1
    4722:	b1 04       	cpc	r11, r1
    4724:	29 f4       	brne	.+10     	; 0x4730 <strtod+0xbc>
    4726:	70 e0       	ldi	r23, 0x00	; 0
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	80 ec       	ldi	r24, 0xC0	; 192
    472c:	6f e7       	ldi	r22, 0x7F	; 127
    472e:	f7 c0       	rjmp	.+494    	; 0x491e <strtod+0x2aa>
    4730:	22 96       	adiw	r28, 0x02	; 2
    4732:	f5 01       	movw	r30, r10
    4734:	d1 83       	std	Z+1, r29	; 0x01
    4736:	c0 83       	st	Z, r28
    4738:	f6 cf       	rjmp	.-20     	; 0x4726 <strtod+0xb2>
    473a:	88 24       	eor	r8, r8
    473c:	99 24       	eor	r9, r9
    473e:	40 e0       	ldi	r20, 0x00	; 0
    4740:	50 e0       	ldi	r21, 0x00	; 0
    4742:	60 e0       	ldi	r22, 0x00	; 0
    4744:	70 e0       	ldi	r23, 0x00	; 0
    4746:	ef 2d       	mov	r30, r15
    4748:	e0 53       	subi	r30, 0x30	; 48
    474a:	ea 30       	cpi	r30, 0x0A	; 10
    474c:	a0 f5       	brcc	.+104    	; 0x47b6 <strtod+0x142>
    474e:	f2 e0       	ldi	r31, 0x02	; 2
    4750:	ef 2a       	or	r14, r31
    4752:	8e 2d       	mov	r24, r14
    4754:	90 e0       	ldi	r25, 0x00	; 0
    4756:	9c 01       	movw	r18, r24
    4758:	28 70       	andi	r18, 0x08	; 8
    475a:	30 70       	andi	r19, 0x00	; 0
    475c:	e2 fe       	sbrs	r14, 2
    475e:	06 c0       	rjmp	.+12     	; 0x476c <strtod+0xf8>
    4760:	23 2b       	or	r18, r19
    4762:	79 f5       	brne	.+94     	; 0x47c2 <strtod+0x14e>
    4764:	08 94       	sec
    4766:	81 1c       	adc	r8, r1
    4768:	91 1c       	adc	r9, r1
    476a:	2b c0       	rjmp	.+86     	; 0x47c2 <strtod+0x14e>
    476c:	23 2b       	or	r18, r19
    476e:	19 f0       	breq	.+6      	; 0x4776 <strtod+0x102>
    4770:	08 94       	sec
    4772:	81 08       	sbc	r8, r1
    4774:	91 08       	sbc	r9, r1
    4776:	db 01       	movw	r26, r22
    4778:	ca 01       	movw	r24, r20
    477a:	12 e0       	ldi	r17, 0x02	; 2
    477c:	88 0f       	add	r24, r24
    477e:	99 1f       	adc	r25, r25
    4780:	aa 1f       	adc	r26, r26
    4782:	bb 1f       	adc	r27, r27
    4784:	1a 95       	dec	r17
    4786:	d1 f7       	brne	.-12     	; 0x477c <strtod+0x108>
    4788:	48 0f       	add	r20, r24
    478a:	59 1f       	adc	r21, r25
    478c:	6a 1f       	adc	r22, r26
    478e:	7b 1f       	adc	r23, r27
    4790:	44 0f       	add	r20, r20
    4792:	55 1f       	adc	r21, r21
    4794:	66 1f       	adc	r22, r22
    4796:	77 1f       	adc	r23, r23
    4798:	4e 0f       	add	r20, r30
    479a:	51 1d       	adc	r21, r1
    479c:	61 1d       	adc	r22, r1
    479e:	71 1d       	adc	r23, r1
    47a0:	48 39       	cpi	r20, 0x98	; 152
    47a2:	29 e9       	ldi	r18, 0x99	; 153
    47a4:	52 07       	cpc	r21, r18
    47a6:	29 e9       	ldi	r18, 0x99	; 153
    47a8:	62 07       	cpc	r22, r18
    47aa:	29 e1       	ldi	r18, 0x19	; 25
    47ac:	72 07       	cpc	r23, r18
    47ae:	48 f0       	brcs	.+18     	; 0x47c2 <strtod+0x14e>
    47b0:	84 e0       	ldi	r24, 0x04	; 4
    47b2:	e8 2a       	or	r14, r24
    47b4:	06 c0       	rjmp	.+12     	; 0x47c2 <strtod+0x14e>
    47b6:	ee 3f       	cpi	r30, 0xFE	; 254
    47b8:	31 f4       	brne	.+12     	; 0x47c6 <strtod+0x152>
    47ba:	e3 fc       	sbrc	r14, 3
    47bc:	39 c0       	rjmp	.+114    	; 0x4830 <strtod+0x1bc>
    47be:	98 e0       	ldi	r25, 0x08	; 8
    47c0:	e9 2a       	or	r14, r25
    47c2:	f9 90       	ld	r15, Y+
    47c4:	c0 cf       	rjmp	.-128    	; 0x4746 <strtod+0xd2>
    47c6:	e5 33       	cpi	r30, 0x35	; 53
    47c8:	11 f0       	breq	.+4      	; 0x47ce <strtod+0x15a>
    47ca:	e5 31       	cpi	r30, 0x15	; 21
    47cc:	89 f5       	brne	.+98     	; 0x4830 <strtod+0x1bc>
    47ce:	29 91       	ld	r18, Y+
    47d0:	2d 32       	cpi	r18, 0x2D	; 45
    47d2:	19 f4       	brne	.+6      	; 0x47da <strtod+0x166>
    47d4:	e0 e1       	ldi	r30, 0x10	; 16
    47d6:	ee 2a       	or	r14, r30
    47d8:	05 c0       	rjmp	.+10     	; 0x47e4 <strtod+0x170>
    47da:	2b 32       	cpi	r18, 0x2B	; 43
    47dc:	19 f0       	breq	.+6      	; 0x47e4 <strtod+0x170>
    47de:	81 e0       	ldi	r24, 0x01	; 1
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	03 c0       	rjmp	.+6      	; 0x47ea <strtod+0x176>
    47e4:	29 91       	ld	r18, Y+
    47e6:	82 e0       	ldi	r24, 0x02	; 2
    47e8:	90 e0       	ldi	r25, 0x00	; 0
    47ea:	e2 2f       	mov	r30, r18
    47ec:	e0 53       	subi	r30, 0x30	; 48
    47ee:	ea 30       	cpi	r30, 0x0A	; 10
    47f0:	18 f0       	brcs	.+6      	; 0x47f8 <strtod+0x184>
    47f2:	c8 1b       	sub	r28, r24
    47f4:	d9 0b       	sbc	r29, r25
    47f6:	1c c0       	rjmp	.+56     	; 0x4830 <strtod+0x1bc>
    47f8:	20 e0       	ldi	r18, 0x00	; 0
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	fc e0       	ldi	r31, 0x0C	; 12
    47fe:	20 38       	cpi	r18, 0x80	; 128
    4800:	3f 07       	cpc	r19, r31
    4802:	5c f4       	brge	.+22     	; 0x481a <strtod+0x1a6>
    4804:	c9 01       	movw	r24, r18
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	88 0f       	add	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	28 0f       	add	r18, r24
    4810:	39 1f       	adc	r19, r25
    4812:	22 0f       	add	r18, r18
    4814:	33 1f       	adc	r19, r19
    4816:	2e 0f       	add	r18, r30
    4818:	31 1d       	adc	r19, r1
    481a:	e9 91       	ld	r30, Y+
    481c:	e0 53       	subi	r30, 0x30	; 48
    481e:	ea 30       	cpi	r30, 0x0A	; 10
    4820:	68 f3       	brcs	.-38     	; 0x47fc <strtod+0x188>
    4822:	e4 fe       	sbrs	r14, 4
    4824:	03 c0       	rjmp	.+6      	; 0x482c <strtod+0x1b8>
    4826:	30 95       	com	r19
    4828:	21 95       	neg	r18
    482a:	3f 4f       	sbci	r19, 0xFF	; 255
    482c:	82 0e       	add	r8, r18
    482e:	93 1e       	adc	r9, r19
    4830:	ce 2c       	mov	r12, r14
    4832:	dd 24       	eor	r13, r13
    4834:	e1 fe       	sbrs	r14, 1
    4836:	07 c0       	rjmp	.+14     	; 0x4846 <strtod+0x1d2>
    4838:	a1 14       	cp	r10, r1
    483a:	b1 04       	cpc	r11, r1
    483c:	21 f0       	breq	.+8      	; 0x4846 <strtod+0x1d2>
    483e:	21 97       	sbiw	r28, 0x01	; 1
    4840:	f5 01       	movw	r30, r10
    4842:	d1 83       	std	Z+1, r29	; 0x01
    4844:	c0 83       	st	Z, r28
    4846:	cb 01       	movw	r24, r22
    4848:	ba 01       	movw	r22, r20
    484a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <__floatunsisf>
    484e:	7b 01       	movw	r14, r22
    4850:	8c 01       	movw	r16, r24
    4852:	f3 e0       	ldi	r31, 0x03	; 3
    4854:	cf 22       	and	r12, r31
    4856:	dd 24       	eor	r13, r13
    4858:	23 e0       	ldi	r18, 0x03	; 3
    485a:	c2 16       	cp	r12, r18
    485c:	d1 04       	cpc	r13, r1
    485e:	21 f4       	brne	.+8      	; 0x4868 <strtod+0x1f4>
    4860:	17 fb       	bst	r17, 7
    4862:	10 95       	com	r17
    4864:	17 f9       	bld	r17, 7
    4866:	10 95       	com	r17
    4868:	57 01       	movw	r10, r14
    486a:	68 01       	movw	r12, r16
    486c:	c8 01       	movw	r24, r16
    486e:	b7 01       	movw	r22, r14
    4870:	20 e0       	ldi	r18, 0x00	; 0
    4872:	30 e0       	ldi	r19, 0x00	; 0
    4874:	40 e0       	ldi	r20, 0x00	; 0
    4876:	50 e0       	ldi	r21, 0x00	; 0
    4878:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__cmpsf2>
    487c:	88 23       	and	r24, r24
    487e:	09 f4       	brne	.+2      	; 0x4882 <strtod+0x20e>
    4880:	4a c0       	rjmp	.+148    	; 0x4916 <strtod+0x2a2>
    4882:	97 fe       	sbrs	r9, 7
    4884:	0d c0       	rjmp	.+26     	; 0x48a0 <strtod+0x22c>
    4886:	26 e2       	ldi	r18, 0x26	; 38
    4888:	e2 2e       	mov	r14, r18
    488a:	23 e0       	ldi	r18, 0x03	; 3
    488c:	f2 2e       	mov	r15, r18
    488e:	90 94       	com	r9
    4890:	81 94       	neg	r8
    4892:	91 08       	sbc	r9, r1
    4894:	93 94       	inc	r9
    4896:	c0 e2       	ldi	r28, 0x20	; 32
    4898:	d0 e0       	ldi	r29, 0x00	; 0
    489a:	00 e0       	ldi	r16, 0x00	; 0
    489c:	10 e0       	ldi	r17, 0x00	; 0
    489e:	12 c0       	rjmp	.+36     	; 0x48c4 <strtod+0x250>
    48a0:	9e e3       	ldi	r25, 0x3E	; 62
    48a2:	e9 2e       	mov	r14, r25
    48a4:	93 e0       	ldi	r25, 0x03	; 3
    48a6:	f9 2e       	mov	r15, r25
    48a8:	f6 cf       	rjmp	.-20     	; 0x4896 <strtod+0x222>
    48aa:	f7 01       	movw	r30, r14
    48ac:	25 91       	lpm	r18, Z+
    48ae:	35 91       	lpm	r19, Z+
    48b0:	45 91       	lpm	r20, Z+
    48b2:	54 91       	lpm	r21, Z+
    48b4:	c6 01       	movw	r24, r12
    48b6:	b5 01       	movw	r22, r10
    48b8:	0e 94 31 20 	call	0x4062	; 0x4062 <__mulsf3>
    48bc:	5b 01       	movw	r10, r22
    48be:	6c 01       	movw	r12, r24
    48c0:	8c 1a       	sub	r8, r28
    48c2:	9d 0a       	sbc	r9, r29
    48c4:	8c 16       	cp	r8, r28
    48c6:	9d 06       	cpc	r9, r29
    48c8:	84 f7       	brge	.-32     	; 0x48aa <strtod+0x236>
    48ca:	d5 95       	asr	r29
    48cc:	c7 95       	ror	r28
    48ce:	0f 5f       	subi	r16, 0xFF	; 255
    48d0:	1f 4f       	sbci	r17, 0xFF	; 255
    48d2:	06 30       	cpi	r16, 0x06	; 6
    48d4:	11 05       	cpc	r17, r1
    48d6:	29 f0       	breq	.+10     	; 0x48e2 <strtod+0x26e>
    48d8:	8c ef       	ldi	r24, 0xFC	; 252
    48da:	9f ef       	ldi	r25, 0xFF	; 255
    48dc:	e8 0e       	add	r14, r24
    48de:	f9 1e       	adc	r15, r25
    48e0:	f1 cf       	rjmp	.-30     	; 0x48c4 <strtod+0x250>
    48e2:	c5 01       	movw	r24, r10
    48e4:	d6 01       	movw	r26, r12
    48e6:	7c 01       	movw	r14, r24
    48e8:	8d 01       	movw	r16, r26
    48ea:	8c 2d       	mov	r24, r12
    48ec:	88 0f       	add	r24, r24
    48ee:	8d 2d       	mov	r24, r13
    48f0:	88 1f       	adc	r24, r24
    48f2:	8f 3f       	cpi	r24, 0xFF	; 255
    48f4:	51 f0       	breq	.+20     	; 0x490a <strtod+0x296>
    48f6:	c6 01       	movw	r24, r12
    48f8:	b5 01       	movw	r22, r10
    48fa:	20 e0       	ldi	r18, 0x00	; 0
    48fc:	30 e0       	ldi	r19, 0x00	; 0
    48fe:	40 e0       	ldi	r20, 0x00	; 0
    4900:	50 e0       	ldi	r21, 0x00	; 0
    4902:	0e 94 5a 25 	call	0x4ab4	; 0x4ab4 <__cmpsf2>
    4906:	88 23       	and	r24, r24
    4908:	31 f4       	brne	.+12     	; 0x4916 <strtod+0x2a2>
    490a:	82 e2       	ldi	r24, 0x22	; 34
    490c:	90 e0       	ldi	r25, 0x00	; 0
    490e:	90 93 d2 06 	sts	0x06D2, r25
    4912:	80 93 d1 06 	sts	0x06D1, r24
    4916:	7e 2d       	mov	r23, r14
    4918:	9f 2d       	mov	r25, r15
    491a:	80 2f       	mov	r24, r16
    491c:	61 2f       	mov	r22, r17
    491e:	27 2f       	mov	r18, r23
    4920:	39 2f       	mov	r19, r25
    4922:	48 2f       	mov	r20, r24
    4924:	56 2f       	mov	r21, r22
    4926:	b9 01       	movw	r22, r18
    4928:	ca 01       	movw	r24, r20
    492a:	cd b7       	in	r28, 0x3d	; 61
    492c:	de b7       	in	r29, 0x3e	; 62
    492e:	ec e0       	ldi	r30, 0x0C	; 12
    4930:	0c 94 83 25 	jmp	0x4b06	; 0x4b06 <__epilogue_restores__+0xc>

00004934 <isspace>:
    4934:	91 11       	cpse	r25, r1
    4936:	c2 c0       	rjmp	.+388    	; 0x4abc <__ctype_isfalse>
    4938:	80 32       	cpi	r24, 0x20	; 32
    493a:	19 f0       	breq	.+6      	; 0x4942 <isspace+0xe>
    493c:	89 50       	subi	r24, 0x09	; 9
    493e:	85 50       	subi	r24, 0x05	; 5
    4940:	d0 f7       	brcc	.-12     	; 0x4936 <isspace+0x2>
    4942:	08 95       	ret

00004944 <strncasecmp_P>:
    4944:	fb 01       	movw	r30, r22
    4946:	dc 01       	movw	r26, r24
    4948:	41 50       	subi	r20, 0x01	; 1
    494a:	50 40       	sbci	r21, 0x00	; 0
    494c:	88 f0       	brcs	.+34     	; 0x4970 <strncasecmp_P+0x2c>
    494e:	8d 91       	ld	r24, X+
    4950:	81 34       	cpi	r24, 0x41	; 65
    4952:	1c f0       	brlt	.+6      	; 0x495a <strncasecmp_P+0x16>
    4954:	8b 35       	cpi	r24, 0x5B	; 91
    4956:	0c f4       	brge	.+2      	; 0x495a <strncasecmp_P+0x16>
    4958:	80 5e       	subi	r24, 0xE0	; 224
    495a:	65 91       	lpm	r22, Z+
    495c:	61 34       	cpi	r22, 0x41	; 65
    495e:	1c f0       	brlt	.+6      	; 0x4966 <strncasecmp_P+0x22>
    4960:	6b 35       	cpi	r22, 0x5B	; 91
    4962:	0c f4       	brge	.+2      	; 0x4966 <strncasecmp_P+0x22>
    4964:	60 5e       	subi	r22, 0xE0	; 224
    4966:	86 1b       	sub	r24, r22
    4968:	61 11       	cpse	r22, r1
    496a:	71 f3       	breq	.-36     	; 0x4948 <strncasecmp_P+0x4>
    496c:	99 0b       	sbc	r25, r25
    496e:	08 95       	ret
    4970:	88 1b       	sub	r24, r24
    4972:	fc cf       	rjmp	.-8      	; 0x496c <strncasecmp_P+0x28>

00004974 <strnlen_P>:
    4974:	fc 01       	movw	r30, r24
    4976:	05 90       	lpm	r0, Z+
    4978:	61 50       	subi	r22, 0x01	; 1
    497a:	70 40       	sbci	r23, 0x00	; 0
    497c:	01 10       	cpse	r0, r1
    497e:	d8 f7       	brcc	.-10     	; 0x4976 <strnlen_P+0x2>
    4980:	80 95       	com	r24
    4982:	90 95       	com	r25
    4984:	8e 0f       	add	r24, r30
    4986:	9f 1f       	adc	r25, r31
    4988:	08 95       	ret

0000498a <strnlen>:
    498a:	fc 01       	movw	r30, r24
    498c:	61 50       	subi	r22, 0x01	; 1
    498e:	70 40       	sbci	r23, 0x00	; 0
    4990:	01 90       	ld	r0, Z+
    4992:	01 10       	cpse	r0, r1
    4994:	d8 f7       	brcc	.-10     	; 0x498c <strnlen+0x2>
    4996:	80 95       	com	r24
    4998:	90 95       	com	r25
    499a:	8e 0f       	add	r24, r30
    499c:	9f 1f       	adc	r25, r31
    499e:	08 95       	ret

000049a0 <fputc>:
    49a0:	0f 93       	push	r16
    49a2:	1f 93       	push	r17
    49a4:	cf 93       	push	r28
    49a6:	df 93       	push	r29
    49a8:	8c 01       	movw	r16, r24
    49aa:	eb 01       	movw	r28, r22
    49ac:	8b 81       	ldd	r24, Y+3	; 0x03
    49ae:	81 ff       	sbrs	r24, 1
    49b0:	1b c0       	rjmp	.+54     	; 0x49e8 <fputc+0x48>
    49b2:	82 ff       	sbrs	r24, 2
    49b4:	0d c0       	rjmp	.+26     	; 0x49d0 <fputc+0x30>
    49b6:	2e 81       	ldd	r18, Y+6	; 0x06
    49b8:	3f 81       	ldd	r19, Y+7	; 0x07
    49ba:	8c 81       	ldd	r24, Y+4	; 0x04
    49bc:	9d 81       	ldd	r25, Y+5	; 0x05
    49be:	28 17       	cp	r18, r24
    49c0:	39 07       	cpc	r19, r25
    49c2:	64 f4       	brge	.+24     	; 0x49dc <fputc+0x3c>
    49c4:	e8 81       	ld	r30, Y
    49c6:	f9 81       	ldd	r31, Y+1	; 0x01
    49c8:	01 93       	st	Z+, r16
    49ca:	f9 83       	std	Y+1, r31	; 0x01
    49cc:	e8 83       	st	Y, r30
    49ce:	06 c0       	rjmp	.+12     	; 0x49dc <fputc+0x3c>
    49d0:	e8 85       	ldd	r30, Y+8	; 0x08
    49d2:	f9 85       	ldd	r31, Y+9	; 0x09
    49d4:	80 2f       	mov	r24, r16
    49d6:	09 95       	icall
    49d8:	89 2b       	or	r24, r25
    49da:	31 f4       	brne	.+12     	; 0x49e8 <fputc+0x48>
    49dc:	8e 81       	ldd	r24, Y+6	; 0x06
    49de:	9f 81       	ldd	r25, Y+7	; 0x07
    49e0:	01 96       	adiw	r24, 0x01	; 1
    49e2:	9f 83       	std	Y+7, r25	; 0x07
    49e4:	8e 83       	std	Y+6, r24	; 0x06
    49e6:	02 c0       	rjmp	.+4      	; 0x49ec <fputc+0x4c>
    49e8:	0f ef       	ldi	r16, 0xFF	; 255
    49ea:	1f ef       	ldi	r17, 0xFF	; 255
    49ec:	c8 01       	movw	r24, r16
    49ee:	df 91       	pop	r29
    49f0:	cf 91       	pop	r28
    49f2:	1f 91       	pop	r17
    49f4:	0f 91       	pop	r16
    49f6:	08 95       	ret

000049f8 <__ultoa_invert>:
    49f8:	fa 01       	movw	r30, r20
    49fa:	aa 27       	eor	r26, r26
    49fc:	28 30       	cpi	r18, 0x08	; 8
    49fe:	51 f1       	breq	.+84     	; 0x4a54 <__ultoa_invert+0x5c>
    4a00:	20 31       	cpi	r18, 0x10	; 16
    4a02:	81 f1       	breq	.+96     	; 0x4a64 <__ultoa_invert+0x6c>
    4a04:	e8 94       	clt
    4a06:	6f 93       	push	r22
    4a08:	6e 7f       	andi	r22, 0xFE	; 254
    4a0a:	6e 5f       	subi	r22, 0xFE	; 254
    4a0c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a0e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a10:	9f 4f       	sbci	r25, 0xFF	; 255
    4a12:	af 4f       	sbci	r26, 0xFF	; 255
    4a14:	b1 e0       	ldi	r27, 0x01	; 1
    4a16:	3e d0       	rcall	.+124    	; 0x4a94 <__ultoa_invert+0x9c>
    4a18:	b4 e0       	ldi	r27, 0x04	; 4
    4a1a:	3c d0       	rcall	.+120    	; 0x4a94 <__ultoa_invert+0x9c>
    4a1c:	67 0f       	add	r22, r23
    4a1e:	78 1f       	adc	r23, r24
    4a20:	89 1f       	adc	r24, r25
    4a22:	9a 1f       	adc	r25, r26
    4a24:	a1 1d       	adc	r26, r1
    4a26:	68 0f       	add	r22, r24
    4a28:	79 1f       	adc	r23, r25
    4a2a:	8a 1f       	adc	r24, r26
    4a2c:	91 1d       	adc	r25, r1
    4a2e:	a1 1d       	adc	r26, r1
    4a30:	6a 0f       	add	r22, r26
    4a32:	71 1d       	adc	r23, r1
    4a34:	81 1d       	adc	r24, r1
    4a36:	91 1d       	adc	r25, r1
    4a38:	a1 1d       	adc	r26, r1
    4a3a:	20 d0       	rcall	.+64     	; 0x4a7c <__ultoa_invert+0x84>
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <__ultoa_invert+0x48>
    4a3e:	68 94       	set
    4a40:	3f 91       	pop	r19
    4a42:	2a e0       	ldi	r18, 0x0A	; 10
    4a44:	26 9f       	mul	r18, r22
    4a46:	11 24       	eor	r1, r1
    4a48:	30 19       	sub	r19, r0
    4a4a:	30 5d       	subi	r19, 0xD0	; 208
    4a4c:	31 93       	st	Z+, r19
    4a4e:	de f6       	brtc	.-74     	; 0x4a06 <__ultoa_invert+0xe>
    4a50:	cf 01       	movw	r24, r30
    4a52:	08 95       	ret
    4a54:	46 2f       	mov	r20, r22
    4a56:	47 70       	andi	r20, 0x07	; 7
    4a58:	40 5d       	subi	r20, 0xD0	; 208
    4a5a:	41 93       	st	Z+, r20
    4a5c:	b3 e0       	ldi	r27, 0x03	; 3
    4a5e:	0f d0       	rcall	.+30     	; 0x4a7e <__ultoa_invert+0x86>
    4a60:	c9 f7       	brne	.-14     	; 0x4a54 <__ultoa_invert+0x5c>
    4a62:	f6 cf       	rjmp	.-20     	; 0x4a50 <__ultoa_invert+0x58>
    4a64:	46 2f       	mov	r20, r22
    4a66:	4f 70       	andi	r20, 0x0F	; 15
    4a68:	40 5d       	subi	r20, 0xD0	; 208
    4a6a:	4a 33       	cpi	r20, 0x3A	; 58
    4a6c:	18 f0       	brcs	.+6      	; 0x4a74 <__ultoa_invert+0x7c>
    4a6e:	49 5d       	subi	r20, 0xD9	; 217
    4a70:	31 fd       	sbrc	r19, 1
    4a72:	40 52       	subi	r20, 0x20	; 32
    4a74:	41 93       	st	Z+, r20
    4a76:	02 d0       	rcall	.+4      	; 0x4a7c <__ultoa_invert+0x84>
    4a78:	a9 f7       	brne	.-22     	; 0x4a64 <__ultoa_invert+0x6c>
    4a7a:	ea cf       	rjmp	.-44     	; 0x4a50 <__ultoa_invert+0x58>
    4a7c:	b4 e0       	ldi	r27, 0x04	; 4
    4a7e:	a6 95       	lsr	r26
    4a80:	97 95       	ror	r25
    4a82:	87 95       	ror	r24
    4a84:	77 95       	ror	r23
    4a86:	67 95       	ror	r22
    4a88:	ba 95       	dec	r27
    4a8a:	c9 f7       	brne	.-14     	; 0x4a7e <__ultoa_invert+0x86>
    4a8c:	00 97       	sbiw	r24, 0x00	; 0
    4a8e:	61 05       	cpc	r22, r1
    4a90:	71 05       	cpc	r23, r1
    4a92:	08 95       	ret
    4a94:	9b 01       	movw	r18, r22
    4a96:	ac 01       	movw	r20, r24
    4a98:	0a 2e       	mov	r0, r26
    4a9a:	06 94       	lsr	r0
    4a9c:	57 95       	ror	r21
    4a9e:	47 95       	ror	r20
    4aa0:	37 95       	ror	r19
    4aa2:	27 95       	ror	r18
    4aa4:	ba 95       	dec	r27
    4aa6:	c9 f7       	brne	.-14     	; 0x4a9a <__ultoa_invert+0xa2>
    4aa8:	62 0f       	add	r22, r18
    4aaa:	73 1f       	adc	r23, r19
    4aac:	84 1f       	adc	r24, r20
    4aae:	95 1f       	adc	r25, r21
    4ab0:	a0 1d       	adc	r26, r0
    4ab2:	08 95       	ret

00004ab4 <__cmpsf2>:
    4ab4:	39 db       	rcall	.-2446   	; 0x4128 <__fp_cmp>
    4ab6:	08 f4       	brcc	.+2      	; 0x4aba <__cmpsf2+0x6>
    4ab8:	81 e0       	ldi	r24, 0x01	; 1
    4aba:	08 95       	ret

00004abc <__ctype_isfalse>:
    4abc:	99 27       	eor	r25, r25
    4abe:	88 27       	eor	r24, r24

00004ac0 <__ctype_istrue>:
    4ac0:	08 95       	ret

00004ac2 <__prologue_saves__>:
    4ac2:	2f 92       	push	r2
    4ac4:	3f 92       	push	r3
    4ac6:	4f 92       	push	r4
    4ac8:	5f 92       	push	r5
    4aca:	6f 92       	push	r6
    4acc:	7f 92       	push	r7
    4ace:	8f 92       	push	r8
    4ad0:	9f 92       	push	r9
    4ad2:	af 92       	push	r10
    4ad4:	bf 92       	push	r11
    4ad6:	cf 92       	push	r12
    4ad8:	df 92       	push	r13
    4ada:	ef 92       	push	r14
    4adc:	ff 92       	push	r15
    4ade:	0f 93       	push	r16
    4ae0:	1f 93       	push	r17
    4ae2:	cf 93       	push	r28
    4ae4:	df 93       	push	r29
    4ae6:	cd b7       	in	r28, 0x3d	; 61
    4ae8:	de b7       	in	r29, 0x3e	; 62
    4aea:	ca 1b       	sub	r28, r26
    4aec:	db 0b       	sbc	r29, r27
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	09 94       	ijmp

00004afa <__epilogue_restores__>:
    4afa:	2a 88       	ldd	r2, Y+18	; 0x12
    4afc:	39 88       	ldd	r3, Y+17	; 0x11
    4afe:	48 88       	ldd	r4, Y+16	; 0x10
    4b00:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b02:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b04:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b06:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b08:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b0a:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b0c:	b9 84       	ldd	r11, Y+9	; 0x09
    4b0e:	c8 84       	ldd	r12, Y+8	; 0x08
    4b10:	df 80       	ldd	r13, Y+7	; 0x07
    4b12:	ee 80       	ldd	r14, Y+6	; 0x06
    4b14:	fd 80       	ldd	r15, Y+5	; 0x05
    4b16:	0c 81       	ldd	r16, Y+4	; 0x04
    4b18:	1b 81       	ldd	r17, Y+3	; 0x03
    4b1a:	aa 81       	ldd	r26, Y+2	; 0x02
    4b1c:	b9 81       	ldd	r27, Y+1	; 0x01
    4b1e:	ce 0f       	add	r28, r30
    4b20:	d1 1d       	adc	r29, r1
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	ed 01       	movw	r28, r26
    4b2e:	08 95       	ret

00004b30 <_exit>:
    4b30:	f8 94       	cli

00004b32 <__stop_program>:
    4b32:	ff cf       	rjmp	.-2      	; 0x4b32 <__stop_program>
